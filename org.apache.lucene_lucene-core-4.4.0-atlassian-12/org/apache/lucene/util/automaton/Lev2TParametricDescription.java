/*
 * Decompiled with CFR 0.152.
 */
package org.apache.lucene.util.automaton;

import org.apache.lucene.util.automaton.LevenshteinAutomata;

class Lev2TParametricDescription
extends LevenshteinAutomata.ParametricDescription {
    private static final long[] toStates0 = new long[]{35L};
    private static final long[] offsetIncrs0 = new long[]{0L};
    private static final long[] toStates1 = new long[]{325618500L};
    private static final long[] offsetIncrs1 = new long[]{992L};
    private static final long[] toStates2 = new long[]{6979366318877226244L, 5923114726266905127L, 2546033738411815477L, 17236L};
    private static final long[] offsetIncrs2 = new long[]{6147554950403596288L, 0x5555555555L};
    private static final long[] toStates3 = new long[]{-1800947092571188220L, -6913001101308133376L, -5752068414847753592L, 757185495108704448L, 3550001542237565441L, 5945284945289644256L, -6757228122019321842L, 2175965060745275276L, -8340331579171085016L, 1244194202541804065L, 1271249058462238827L, 3054100890482000068L, 5774922090076468397L, 1477773083993194778L, 6379548472375855684L, -7773946190368758683L, -8405809869392026924L, 441472420L};
    private static final long[] offsetIncrs3 = new long[]{13725212239470592L, 3026472773116244796L, 2538341556914661408L, 6148914690655421352L, 0x5555555555555555L, 0x5555555555555555L, 0x5555555555555555L};
    private static final long[] toStates4 = new long[]{252223912965591044L, -4251396626603569608L, 5584820638722L, 0L, 367043417210945536L, 716567156030046768L, 2422670451190427842L, -9079256290296823296L, 577873630659086336L, 3495366731963049539L, 5000122870615015524L, 598984334434633777L, 4701854907668373634L, 4999418451841827329L, 590372925821947985L, 2397344504400965856L, 942414781129720340L, 4332955527169580128L, 129219020834742407L, -9221083656396635604L, 0x20020820800020L, -3457049135975759035L, -3816095024750826743L, 626464403889785297L, 164671797091143817L, -4389846602478338012L, 4337323872987989027L, 3568324399744201024L, 4977691497066430996L, 608408386849669201L, -5563276699131907899L, -1719124513021450224L, 1450945319151537760L, 3495123313580880197L, -8926097069250100724L, 6638532385049544784L, 2342443692050968770L, 4758141525930623496L, 657669857848003616L, -4173906916518054510L, -3240001160211014835L, 7216131132760476980L, -7924316494743726910L, 4764934072820762928L, 2625835115829862626L, -7869708912254218110L, -3816659113407787512L, 5004509812253009025L, -4117893465828657958L, 5430555924776392477L, 1166574538100727010L, 5855840947787313477L, -4235599104788263380L, 599332880472804720L, 2326962774390100290L, -7920318252825099252L, 5577160915206170005L, -7721117116187949480L, -9051067187072806043L, 2923406995035981843L, -2107085998248910069L, 4984482956854921488L, 626786694180255889L, -9094152754179034546L, -2718798075316221404L, 2145642402060591332L, -2104485924852362930L, 949191224L};
    private static final long[] offsetIncrs4 = new long[]{3459327463774486528L, 2146400L, -9130766769449861120L, 4621979925736474660L, -2639055765951733630L, 7797631375734672768L, -5757744715050143525L, 1977139749924167789L, 576621281115925943L, 329339071547581584L, 20547682026426377L, 5262476510514792452L, 3783024803989570722L, -4392926566269320692L, 4611855382489484580L, 331095964691531290L, 5281882964985549410L, 0x2492492492492492L, -7905747460161236407L, 0x4924924924924924L, 0x2492492492492492L, -7905747460161236407L, 0x4924924924924924L, 0x2492492492492492L, -7905747460161236407L, 0x4924924924924924L, 0x2492492492492492L, -7905747460161236407L, 0x4924924924924924L, 0x2492492492492492L, -7905747460161236407L, 0x4924924924924924L, 0x2492492492492492L, 0x249249249249L};
    private static final long[] toStates5 = new long[]{252223912965591044L, -4251396626603569608L, 5584820638722L, 0L, 365917517304102912L, 23925373080043744L, 2757637078811455872L, -9076969306111049208L, 779554826356768L, 8107053517011419462L, -4360574318985313668L, 9150170671351911L, -5674517800828264320L, -9039252067384721408L, 590155221714279456L, 5856109226530566367L, 1590933136061006356L, 6928227706089787472L, 2667547177274319000L, 4755801769485156372L, 598980984368857169L, -9180293033502702206L, -9078814836377905143L, 617561706251815233L, 2470546083330961986L, 4830116119411050796L, -9205000204623650778L, 4018196170788843842L, 4758141538818621460L, 90424215576313937L, 5856194095399669954L, -2303536864972201968L, 3193838476949398000L, 6921237211172876873L, -8702043271061274084L, 3171038899468964896L, 2341880745218822530L, 4972009181715398656L, 607992633209853955L, 8360089335634600399L, -7832438949126565888L, 5486742574523895088L, 109784182066042434L, -4422408625828740492L, 3200233701527155826L, -7907749059876347326L, -9076880253511530240L, 2067795953034526817L, 6982308338375372968L, -3236867849906237890L, 2044648765629029748L, 5859557311050953026L, -4455148775278394604L, 50315886028068947L, 235604107599302981L, 6130824674307770136L, 609117351220417620L, -2138280108507991920L, 5276009128862597688L, 4909982509997359318L, 8269348074542667077L, 4768249342975919476L, 50319236895812690L, -1097461650619584373L, -6336368089599225592L, 2477235038272167088L, -1848397434679626546L, 4759232237781877304L, 599124023984655537L, 8125157973695144142L, 4758088749171116813L, 873770931187749921L, 2380161751114862723L, -6554927126502915564L, -6148914691251661776L, 1921487462315195050L, -9058954572392774904L, 8179895307725262180L, 3801685728374634195L, -7419339253664656563L, 591102983828276528L, 3809026270803075218L, -6595021529808577439L, -7923345143763791286L, 8269207258510043178L, 514732289139345696L, 968839466448725026L, -7865807822690704825L, -8643498086307428052L, 3211783573774802096L, -9176888496864327863L, 7675852484967351188L, 584109671022310008L, -6698769566993210877L, -2924659339952796068L, 6734221045216799030L, 8236531160334562519L, 5486652955065106949L, 7022477710804330690L, 5377708926983583194L, 7675993208958509446L, 914588135168509642L, 2453947574510440706L, -3815269316960383444L, 1464023957362578514L, 5855818748325810309L, -3813333889334607060L, -7768320094521063288L, -384356302815594045L, 218453076865441661L, 7306111109055910993L, -7632658521814105191L, -2781757523894002831L, 351449037389763892L, 2402116470765273282L, -2999145725249037991L, -7924108310098451068L, -6329103355988522976L, -8565720300552945242L, 3180112175436542130L, 5964751014840537358L, -8418156966825457388L, 2067508522811860192L, -8697809109968444856L, 4869659355609860872L, -7027749954712011145L, 5837518449439844839L, -8198623853307361492L, 7608294293716035859L, 8416727933732288283L, -4466196105660232915L, 2937132165144187968L, -8802741885618297970L, 7603773720146401893L, -6428208254338759094L};
    private static final long[] offsetIncrs5 = new long[]{3459327463774486528L, 2146400L, 0x100000004000000L, -2635249153879298024L, -6593269845880459850L, 1317620135563104832L, 4611687117940080928L, 2635384376133230674L, 878439422006498009L, -5756994475475847464L, 1759781569095457549L, -5943058940167492602L, 3891111965072676573L, -4318335096136006900L, 240851949415942L, 655429905877665307L, 30917010455472994L, 4621821630153230624L, 2342515022955618498L, 1297358300907868160L, 6135219128485568800L, 4652851871248547861L, -7903213635629968375L, 5269229161108473888L, 2959578693389386912L, -8068145053932628663L, 663316725495906356L, 295101224354063507L, -7329179505071744440L, 879468569921997268L, 2649252585047663618L, 1891512505073984077L, 7062937559329014022L, -7905702645242714478L, 0x4924924924924924L, 0x2492492492492492L, -7905747460161236407L, 0x4924924924924924L, 0x2492492492492492L, -7905747460161236407L, 0x4924924924924924L, 0x2492492492492492L, -7905747460161236407L, 0x4924924924924924L, 0x2492492492492492L, -7905747460161236407L, 0x4924924924924924L, 0x2492492492492492L, -7905747460161236407L, 0x4924924924924924L, 0x2492492492492492L, -7905747460161236407L, 0x4924924924924924L, 0x2492492492492492L, -7905747460161236407L, 0x4924924924924924L, 0x2492492492492492L, -7905747460161236407L, 0x4924924924924924L, 0x2492492492492492L, -7905747460161236407L, 0x4924924924924924L, 0x2492492492492492L, -7905747460161236407L, 0x4924924924924924L, 0x2492492492492492L, -7905747460161236407L, 0x24924924L};

    @Override
    int transition(int absState, int position, int vector) {
        assert (absState != -1);
        int state = absState / (this.w + 1);
        int offset = absState % (this.w + 1);
        assert (offset >= 0);
        if (position == this.w) {
            if (state < 3) {
                int loc = vector * 3 + state;
                offset += this.unpack(offsetIncrs0, loc, 1);
                state = this.unpack(toStates0, loc, 2) - 1;
            }
        } else if (position == this.w - 1) {
            if (state < 5) {
                int loc = vector * 5 + state;
                offset += this.unpack(offsetIncrs1, loc, 1);
                state = this.unpack(toStates1, loc, 3) - 1;
            }
        } else if (position == this.w - 2) {
            if (state < 13) {
                int loc = vector * 13 + state;
                offset += this.unpack(offsetIncrs2, loc, 2);
                state = this.unpack(toStates2, loc, 4) - 1;
            }
        } else if (position == this.w - 3) {
            if (state < 28) {
                int loc = vector * 28 + state;
                offset += this.unpack(offsetIncrs3, loc, 2);
                state = this.unpack(toStates3, loc, 5) - 1;
            }
        } else if (position == this.w - 4) {
            if (state < 45) {
                int loc = vector * 45 + state;
                offset += this.unpack(offsetIncrs4, loc, 3);
                state = this.unpack(toStates4, loc, 6) - 1;
            }
        } else if (state < 45) {
            int loc = vector * 45 + state;
            offset += this.unpack(offsetIncrs5, loc, 3);
            state = this.unpack(toStates5, loc, 6) - 1;
        }
        if (state == -1) {
            return -1;
        }
        return state * (this.w + 1) + offset;
    }

    public Lev2TParametricDescription(int w) {
        super(w, 2, new int[]{0, 2, 1, 0, 1, 0, -1, 0, 0, -1, 0, -1, -1, -1, -1, -1, -2, -1, -1, -1, -2, -1, -1, -2, -1, -1, -2, -1, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2});
    }
}

