/*
 * Decompiled with CFR 0.152.
 */
package org.apache.commons.text.translate;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;

public class EntityArrays {
    public static final Map<CharSequence, CharSequence> ISO8859_1_ESCAPE;
    public static final Map<CharSequence, CharSequence> ISO8859_1_UNESCAPE;
    public static final Map<CharSequence, CharSequence> HTML40_EXTENDED_ESCAPE;
    public static final Map<CharSequence, CharSequence> HTML40_EXTENDED_UNESCAPE;
    public static final Map<CharSequence, CharSequence> BASIC_ESCAPE;
    public static final Map<CharSequence, CharSequence> BASIC_UNESCAPE;
    public static final Map<CharSequence, CharSequence> APOS_ESCAPE;
    public static final Map<CharSequence, CharSequence> APOS_UNESCAPE;
    public static final Map<CharSequence, CharSequence> JAVA_CTRL_CHARS_ESCAPE;
    public static final Map<CharSequence, CharSequence> JAVA_CTRL_CHARS_UNESCAPE;

    public static Map<CharSequence, CharSequence> invert(Map<CharSequence, CharSequence> map) {
        return map.entrySet().stream().collect(Collectors.toMap(Map.Entry::getValue, Map.Entry::getKey));
    }

    static {
        HashMap<String, String> initialMap = new HashMap<String, String>();
        initialMap.put("\u00a0", "&nbsp;");
        initialMap.put("\u00a1", "&iexcl;");
        initialMap.put("\u00a2", "&cent;");
        initialMap.put("\u00a3", "&pound;");
        initialMap.put("\u00a4", "&curren;");
        initialMap.put("\u00a5", "&yen;");
        initialMap.put("\u00a6", "&brvbar;");
        initialMap.put("\u00a7", "&sect;");
        initialMap.put("\u00a8", "&uml;");
        initialMap.put("\u00a9", "&copy;");
        initialMap.put("\u00aa", "&ordf;");
        initialMap.put("\u00ab", "&laquo;");
        initialMap.put("\u00ac", "&not;");
        initialMap.put("\u00ad", "&shy;");
        initialMap.put("\u00ae", "&reg;");
        initialMap.put("\u00af", "&macr;");
        initialMap.put("\u00b0", "&deg;");
        initialMap.put("\u00b1", "&plusmn;");
        initialMap.put("\u00b2", "&sup2;");
        initialMap.put("\u00b3", "&sup3;");
        initialMap.put("\u00b4", "&acute;");
        initialMap.put("\u00b5", "&micro;");
        initialMap.put("\u00b6", "&para;");
        initialMap.put("\u00b7", "&middot;");
        initialMap.put("\u00b8", "&cedil;");
        initialMap.put("\u00b9", "&sup1;");
        initialMap.put("\u00ba", "&ordm;");
        initialMap.put("\u00bb", "&raquo;");
        initialMap.put("\u00bc", "&frac14;");
        initialMap.put("\u00bd", "&frac12;");
        initialMap.put("\u00be", "&frac34;");
        initialMap.put("\u00bf", "&iquest;");
        initialMap.put("\u00c0", "&Agrave;");
        initialMap.put("\u00c1", "&Aacute;");
        initialMap.put("\u00c2", "&Acirc;");
        initialMap.put("\u00c3", "&Atilde;");
        initialMap.put("\u00c4", "&Auml;");
        initialMap.put("\u00c5", "&Aring;");
        initialMap.put("\u00c6", "&AElig;");
        initialMap.put("\u00c7", "&Ccedil;");
        initialMap.put("\u00c8", "&Egrave;");
        initialMap.put("\u00c9", "&Eacute;");
        initialMap.put("\u00ca", "&Ecirc;");
        initialMap.put("\u00cb", "&Euml;");
        initialMap.put("\u00cc", "&Igrave;");
        initialMap.put("\u00cd", "&Iacute;");
        initialMap.put("\u00ce", "&Icirc;");
        initialMap.put("\u00cf", "&Iuml;");
        initialMap.put("\u00d0", "&ETH;");
        initialMap.put("\u00d1", "&Ntilde;");
        initialMap.put("\u00d2", "&Ograve;");
        initialMap.put("\u00d3", "&Oacute;");
        initialMap.put("\u00d4", "&Ocirc;");
        initialMap.put("\u00d5", "&Otilde;");
        initialMap.put("\u00d6", "&Ouml;");
        initialMap.put("\u00d7", "&times;");
        initialMap.put("\u00d8", "&Oslash;");
        initialMap.put("\u00d9", "&Ugrave;");
        initialMap.put("\u00da", "&Uacute;");
        initialMap.put("\u00db", "&Ucirc;");
        initialMap.put("\u00dc", "&Uuml;");
        initialMap.put("\u00dd", "&Yacute;");
        initialMap.put("\u00de", "&THORN;");
        initialMap.put("\u00df", "&szlig;");
        initialMap.put("\u00e0", "&agrave;");
        initialMap.put("\u00e1", "&aacute;");
        initialMap.put("\u00e2", "&acirc;");
        initialMap.put("\u00e3", "&atilde;");
        initialMap.put("\u00e4", "&auml;");
        initialMap.put("\u00e5", "&aring;");
        initialMap.put("\u00e6", "&aelig;");
        initialMap.put("\u00e7", "&ccedil;");
        initialMap.put("\u00e8", "&egrave;");
        initialMap.put("\u00e9", "&eacute;");
        initialMap.put("\u00ea", "&ecirc;");
        initialMap.put("\u00eb", "&euml;");
        initialMap.put("\u00ec", "&igrave;");
        initialMap.put("\u00ed", "&iacute;");
        initialMap.put("\u00ee", "&icirc;");
        initialMap.put("\u00ef", "&iuml;");
        initialMap.put("\u00f0", "&eth;");
        initialMap.put("\u00f1", "&ntilde;");
        initialMap.put("\u00f2", "&ograve;");
        initialMap.put("\u00f3", "&oacute;");
        initialMap.put("\u00f4", "&ocirc;");
        initialMap.put("\u00f5", "&otilde;");
        initialMap.put("\u00f6", "&ouml;");
        initialMap.put("\u00f7", "&divide;");
        initialMap.put("\u00f8", "&oslash;");
        initialMap.put("\u00f9", "&ugrave;");
        initialMap.put("\u00fa", "&uacute;");
        initialMap.put("\u00fb", "&ucirc;");
        initialMap.put("\u00fc", "&uuml;");
        initialMap.put("\u00fd", "&yacute;");
        initialMap.put("\u00fe", "&thorn;");
        initialMap.put("\u00ff", "&yuml;");
        ISO8859_1_ESCAPE = Collections.unmodifiableMap(initialMap);
        ISO8859_1_UNESCAPE = Collections.unmodifiableMap(EntityArrays.invert(ISO8859_1_ESCAPE));
        initialMap = new HashMap();
        initialMap.put("\u0192", "&fnof;");
        initialMap.put("\u0391", "&Alpha;");
        initialMap.put("\u0392", "&Beta;");
        initialMap.put("\u0393", "&Gamma;");
        initialMap.put("\u0394", "&Delta;");
        initialMap.put("\u0395", "&Epsilon;");
        initialMap.put("\u0396", "&Zeta;");
        initialMap.put("\u0397", "&Eta;");
        initialMap.put("\u0398", "&Theta;");
        initialMap.put("\u0399", "&Iota;");
        initialMap.put("\u039a", "&Kappa;");
        initialMap.put("\u039b", "&Lambda;");
        initialMap.put("\u039c", "&Mu;");
        initialMap.put("\u039d", "&Nu;");
        initialMap.put("\u039e", "&Xi;");
        initialMap.put("\u039f", "&Omicron;");
        initialMap.put("\u03a0", "&Pi;");
        initialMap.put("\u03a1", "&Rho;");
        initialMap.put("\u03a3", "&Sigma;");
        initialMap.put("\u03a4", "&Tau;");
        initialMap.put("\u03a5", "&Upsilon;");
        initialMap.put("\u03a6", "&Phi;");
        initialMap.put("\u03a7", "&Chi;");
        initialMap.put("\u03a8", "&Psi;");
        initialMap.put("\u03a9", "&Omega;");
        initialMap.put("\u03b1", "&alpha;");
        initialMap.put("\u03b2", "&beta;");
        initialMap.put("\u03b3", "&gamma;");
        initialMap.put("\u03b4", "&delta;");
        initialMap.put("\u03b5", "&epsilon;");
        initialMap.put("\u03b6", "&zeta;");
        initialMap.put("\u03b7", "&eta;");
        initialMap.put("\u03b8", "&theta;");
        initialMap.put("\u03b9", "&iota;");
        initialMap.put("\u03ba", "&kappa;");
        initialMap.put("\u03bb", "&lambda;");
        initialMap.put("\u03bc", "&mu;");
        initialMap.put("\u03bd", "&nu;");
        initialMap.put("\u03be", "&xi;");
        initialMap.put("\u03bf", "&omicron;");
        initialMap.put("\u03c0", "&pi;");
        initialMap.put("\u03c1", "&rho;");
        initialMap.put("\u03c2", "&sigmaf;");
        initialMap.put("\u03c3", "&sigma;");
        initialMap.put("\u03c4", "&tau;");
        initialMap.put("\u03c5", "&upsilon;");
        initialMap.put("\u03c6", "&phi;");
        initialMap.put("\u03c7", "&chi;");
        initialMap.put("\u03c8", "&psi;");
        initialMap.put("\u03c9", "&omega;");
        initialMap.put("\u03d1", "&thetasym;");
        initialMap.put("\u03d2", "&upsih;");
        initialMap.put("\u03d6", "&piv;");
        initialMap.put("\u2022", "&bull;");
        initialMap.put("\u2026", "&hellip;");
        initialMap.put("\u2032", "&prime;");
        initialMap.put("\u2033", "&Prime;");
        initialMap.put("\u203e", "&oline;");
        initialMap.put("\u2044", "&frasl;");
        initialMap.put("\u2118", "&weierp;");
        initialMap.put("\u2111", "&image;");
        initialMap.put("\u211c", "&real;");
        initialMap.put("\u2122", "&trade;");
        initialMap.put("\u2135", "&alefsym;");
        initialMap.put("\u2190", "&larr;");
        initialMap.put("\u2191", "&uarr;");
        initialMap.put("\u2192", "&rarr;");
        initialMap.put("\u2193", "&darr;");
        initialMap.put("\u2194", "&harr;");
        initialMap.put("\u21b5", "&crarr;");
        initialMap.put("\u21d0", "&lArr;");
        initialMap.put("\u21d1", "&uArr;");
        initialMap.put("\u21d2", "&rArr;");
        initialMap.put("\u21d3", "&dArr;");
        initialMap.put("\u21d4", "&hArr;");
        initialMap.put("\u2200", "&forall;");
        initialMap.put("\u2202", "&part;");
        initialMap.put("\u2203", "&exist;");
        initialMap.put("\u2205", "&empty;");
        initialMap.put("\u2207", "&nabla;");
        initialMap.put("\u2208", "&isin;");
        initialMap.put("\u2209", "&notin;");
        initialMap.put("\u220b", "&ni;");
        initialMap.put("\u220f", "&prod;");
        initialMap.put("\u2211", "&sum;");
        initialMap.put("\u2212", "&minus;");
        initialMap.put("\u2217", "&lowast;");
        initialMap.put("\u221a", "&radic;");
        initialMap.put("\u221d", "&prop;");
        initialMap.put("\u221e", "&infin;");
        initialMap.put("\u2220", "&ang;");
        initialMap.put("\u2227", "&and;");
        initialMap.put("\u2228", "&or;");
        initialMap.put("\u2229", "&cap;");
        initialMap.put("\u222a", "&cup;");
        initialMap.put("\u222b", "&int;");
        initialMap.put("\u2234", "&there4;");
        initialMap.put("\u223c", "&sim;");
        initialMap.put("\u2245", "&cong;");
        initialMap.put("\u2248", "&asymp;");
        initialMap.put("\u2260", "&ne;");
        initialMap.put("\u2261", "&equiv;");
        initialMap.put("\u2264", "&le;");
        initialMap.put("\u2265", "&ge;");
        initialMap.put("\u2282", "&sub;");
        initialMap.put("\u2283", "&sup;");
        initialMap.put("\u2284", "&nsub;");
        initialMap.put("\u2286", "&sube;");
        initialMap.put("\u2287", "&supe;");
        initialMap.put("\u2295", "&oplus;");
        initialMap.put("\u2297", "&otimes;");
        initialMap.put("\u22a5", "&perp;");
        initialMap.put("\u22c5", "&sdot;");
        initialMap.put("\u2308", "&lceil;");
        initialMap.put("\u2309", "&rceil;");
        initialMap.put("\u230a", "&lfloor;");
        initialMap.put("\u230b", "&rfloor;");
        initialMap.put("\u2329", "&lang;");
        initialMap.put("\u232a", "&rang;");
        initialMap.put("\u25ca", "&loz;");
        initialMap.put("\u2660", "&spades;");
        initialMap.put("\u2663", "&clubs;");
        initialMap.put("\u2665", "&hearts;");
        initialMap.put("\u2666", "&diams;");
        initialMap.put("\u0152", "&OElig;");
        initialMap.put("\u0153", "&oelig;");
        initialMap.put("\u0160", "&Scaron;");
        initialMap.put("\u0161", "&scaron;");
        initialMap.put("\u0178", "&Yuml;");
        initialMap.put("\u02c6", "&circ;");
        initialMap.put("\u02dc", "&tilde;");
        initialMap.put("\u2002", "&ensp;");
        initialMap.put("\u2003", "&emsp;");
        initialMap.put("\u2009", "&thinsp;");
        initialMap.put("\u200c", "&zwnj;");
        initialMap.put("\u200d", "&zwj;");
        initialMap.put("\u200e", "&lrm;");
        initialMap.put("\u200f", "&rlm;");
        initialMap.put("\u2013", "&ndash;");
        initialMap.put("\u2014", "&mdash;");
        initialMap.put("\u2018", "&lsquo;");
        initialMap.put("\u2019", "&rsquo;");
        initialMap.put("\u201a", "&sbquo;");
        initialMap.put("\u201c", "&ldquo;");
        initialMap.put("\u201d", "&rdquo;");
        initialMap.put("\u201e", "&bdquo;");
        initialMap.put("\u2020", "&dagger;");
        initialMap.put("\u2021", "&Dagger;");
        initialMap.put("\u2030", "&permil;");
        initialMap.put("\u2039", "&lsaquo;");
        initialMap.put("\u203a", "&rsaquo;");
        initialMap.put("\u20ac", "&euro;");
        HTML40_EXTENDED_ESCAPE = Collections.unmodifiableMap(initialMap);
        HTML40_EXTENDED_UNESCAPE = Collections.unmodifiableMap(EntityArrays.invert(HTML40_EXTENDED_ESCAPE));
        initialMap = new HashMap();
        initialMap.put("\"", "&quot;");
        initialMap.put("&", "&amp;");
        initialMap.put("<", "&lt;");
        initialMap.put(">", "&gt;");
        BASIC_ESCAPE = Collections.unmodifiableMap(initialMap);
        BASIC_UNESCAPE = Collections.unmodifiableMap(EntityArrays.invert(BASIC_ESCAPE));
        initialMap = new HashMap();
        initialMap.put("'", "&apos;");
        APOS_ESCAPE = Collections.unmodifiableMap(initialMap);
        APOS_UNESCAPE = Collections.unmodifiableMap(EntityArrays.invert(APOS_ESCAPE));
        initialMap = new HashMap();
        initialMap.put("\b", "\\b");
        initialMap.put("\n", "\\n");
        initialMap.put("\t", "\\t");
        initialMap.put("\f", "\\f");
        initialMap.put("\r", "\\r");
        JAVA_CTRL_CHARS_ESCAPE = Collections.unmodifiableMap(initialMap);
        JAVA_CTRL_CHARS_UNESCAPE = Collections.unmodifiableMap(EntityArrays.invert(JAVA_CTRL_CHARS_ESCAPE));
    }
}

