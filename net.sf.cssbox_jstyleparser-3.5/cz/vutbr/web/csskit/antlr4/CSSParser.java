/*
 * Decompiled with CFR 0.152.
 * 
 * Could not load the following classes:
 *  org.antlr.v4.runtime.NoViableAltException
 *  org.antlr.v4.runtime.Parser
 *  org.antlr.v4.runtime.ParserRuleContext
 *  org.antlr.v4.runtime.RecognitionException
 *  org.antlr.v4.runtime.RuntimeMetaData
 *  org.antlr.v4.runtime.Token
 *  org.antlr.v4.runtime.TokenStream
 *  org.antlr.v4.runtime.Vocabulary
 *  org.antlr.v4.runtime.VocabularyImpl
 *  org.antlr.v4.runtime.atn.ATN
 *  org.antlr.v4.runtime.atn.ATNDeserializer
 *  org.antlr.v4.runtime.atn.ParserATNSimulator
 *  org.antlr.v4.runtime.atn.PredictionContextCache
 *  org.antlr.v4.runtime.dfa.DFA
 *  org.antlr.v4.runtime.misc.IntervalSet
 *  org.antlr.v4.runtime.tree.ParseTreeListener
 *  org.antlr.v4.runtime.tree.ParseTreeVisitor
 *  org.antlr.v4.runtime.tree.RuleNode
 *  org.antlr.v4.runtime.tree.TerminalNode
 *  org.slf4j.Logger
 *  org.slf4j.LoggerFactory
 */
package cz.vutbr.web.csskit.antlr4;

import cz.vutbr.web.csskit.antlr4.CSSErrorStrategy;
import cz.vutbr.web.csskit.antlr4.CSSLexerState;
import cz.vutbr.web.csskit.antlr4.CSSParserListener;
import cz.vutbr.web.csskit.antlr4.CSSParserVisitor;
import cz.vutbr.web.csskit.antlr4.CSSToken;
import java.util.List;
import org.antlr.v4.runtime.NoViableAltException;
import org.antlr.v4.runtime.Parser;
import org.antlr.v4.runtime.ParserRuleContext;
import org.antlr.v4.runtime.RecognitionException;
import org.antlr.v4.runtime.RuntimeMetaData;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.Vocabulary;
import org.antlr.v4.runtime.VocabularyImpl;
import org.antlr.v4.runtime.atn.ATN;
import org.antlr.v4.runtime.atn.ATNDeserializer;
import org.antlr.v4.runtime.atn.ParserATNSimulator;
import org.antlr.v4.runtime.atn.PredictionContextCache;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.IntervalSet;
import org.antlr.v4.runtime.tree.ParseTreeListener;
import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.tree.RuleNode;
import org.antlr.v4.runtime.tree.TerminalNode;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CSSParser
extends Parser {
    protected static final DFA[] _decisionToDFA;
    protected static final PredictionContextCache _sharedContextCache;
    public static final int STYLESHEET = 1;
    public static final int INLINESTYLE = 2;
    public static final int ATBLOCK = 3;
    public static final int CURLYBLOCK = 4;
    public static final int PARENBLOCK = 5;
    public static final int BRACKETBLOCK = 6;
    public static final int RULE = 7;
    public static final int SELECTOR = 8;
    public static final int ELEMENT = 9;
    public static final int PSEUDOCLASS = 10;
    public static final int PSEUDOELEM = 11;
    public static final int ADJACENT = 12;
    public static final int PRECEDING = 13;
    public static final int CHILD = 14;
    public static final int DESCENDANT = 15;
    public static final int ATTRIBUTE = 16;
    public static final int SET = 17;
    public static final int DECLARATION = 18;
    public static final int VALUE = 19;
    public static final int MEDIA_QUERY = 20;
    public static final int INVALID_STRING = 21;
    public static final int INVALID_SELECTOR = 22;
    public static final int INVALID_SELPART = 23;
    public static final int INVALID_DECLARATION = 24;
    public static final int INVALID_STATEMENT = 25;
    public static final int INVALID_ATSTATEMENT = 26;
    public static final int INVALID_IMPORT = 27;
    public static final int INVALID_DIRECTIVE = 28;
    public static final int IMPORTANT = 29;
    public static final int IDENT = 30;
    public static final int CHARSET = 31;
    public static final int IMPORT = 32;
    public static final int KEYFRAMES = 33;
    public static final int MEDIA = 34;
    public static final int PAGE = 35;
    public static final int MARGIN_AREA = 36;
    public static final int VIEWPORT = 37;
    public static final int FONTFACE = 38;
    public static final int ATKEYWORD = 39;
    public static final int CLASSKEYWORD = 40;
    public static final int STRING = 41;
    public static final int UNCLOSED_STRING = 42;
    public static final int HASH = 43;
    public static final int INDEX = 44;
    public static final int NUMBER = 45;
    public static final int PERCENTAGE = 46;
    public static final int DIMENSION = 47;
    public static final int URI = 48;
    public static final int UNCLOSED_URI = 49;
    public static final int UNIRANGE = 50;
    public static final int CDO = 51;
    public static final int CDC = 52;
    public static final int SEMICOLON = 53;
    public static final int COLON = 54;
    public static final int COMMA = 55;
    public static final int QUESTION = 56;
    public static final int PERCENT = 57;
    public static final int EQUALS = 58;
    public static final int SLASH = 59;
    public static final int GREATER = 60;
    public static final int LESS = 61;
    public static final int LCURLY = 62;
    public static final int RCURLY = 63;
    public static final int APOS = 64;
    public static final int QUOT = 65;
    public static final int LPAREN = 66;
    public static final int RPAREN = 67;
    public static final int LBRACKET = 68;
    public static final int RBRACKET = 69;
    public static final int EXCLAMATION = 70;
    public static final int TILDE = 71;
    public static final int MINUS = 72;
    public static final int PLUS = 73;
    public static final int ASTERISK = 74;
    public static final int POUND = 75;
    public static final int AMPERSAND = 76;
    public static final int HAT = 77;
    public static final int S = 78;
    public static final int COMMENT = 79;
    public static final int SL_COMMENT = 80;
    public static final int EXPRESSION = 81;
    public static final int FUNCTION = 82;
    public static final int INCLUDES = 83;
    public static final int DASHMATCH = 84;
    public static final int STARTSWITH = 85;
    public static final int ENDSWITH = 86;
    public static final int CONTAINS = 87;
    public static final int CTRL = 88;
    public static final int INVALID_TOKEN = 89;
    public static final int STRING_MACR = 90;
    public static final int UNCLOSED_STRING_MACR = 91;
    public static final int STRING_CHAR = 92;
    public static final int RULE_inlinestyle = 0;
    public static final int RULE_stylesheet = 1;
    public static final int RULE_statement = 2;
    public static final int RULE_atstatement = 3;
    public static final int RULE_import_uri = 4;
    public static final int RULE_page = 5;
    public static final int RULE_margin_rule = 6;
    public static final int RULE_inlineset = 7;
    public static final int RULE_media = 8;
    public static final int RULE_media_query = 9;
    public static final int RULE_media_term = 10;
    public static final int RULE_media_expression = 11;
    public static final int RULE_media_rule = 12;
    public static final int RULE_keyframes_name = 13;
    public static final int RULE_keyframe_block = 14;
    public static final int RULE_keyframe_selector = 15;
    public static final int RULE_unknown_atrule = 16;
    public static final int RULE_unknown_atrule_body = 17;
    public static final int RULE_ruleset = 18;
    public static final int RULE_declarations = 19;
    public static final int RULE_declaration = 20;
    public static final int RULE_important = 21;
    public static final int RULE_property = 22;
    public static final int RULE_terms = 23;
    public static final int RULE_term = 24;
    public static final int RULE_funct = 25;
    public static final int RULE_valuepart = 26;
    public static final int RULE_funct_args = 27;
    public static final int RULE_funct_argument = 28;
    public static final int RULE_combined_selector = 29;
    public static final int RULE_combinator = 30;
    public static final int RULE_selector = 31;
    public static final int RULE_selpart = 32;
    public static final int RULE_attribute = 33;
    public static final int RULE_pseudo = 34;
    public static final int RULE_string = 35;
    public static final int RULE_bracketed_idents = 36;
    public static final int RULE_ident_list_item = 37;
    public static final int RULE_any = 38;
    public static final int RULE_nostatement = 39;
    public static final int RULE_noprop = 40;
    public static final int RULE_norule = 41;
    public static final int RULE_nomediaquery = 42;
    public static final String[] ruleNames;
    private static final String[] _LITERAL_NAMES;
    private static final String[] _SYMBOLIC_NAMES;
    public static final Vocabulary VOCABULARY;
    @Deprecated
    public static final String[] tokenNames;
    private Logger log = LoggerFactory.getLogger(((Object)((Object)this)).getClass());
    private int functLevel = 0;
    public static final String _serializedATN = "\u0003\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\u0003^\u0420\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004'\t'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004,\t,\u0003\u0002\u0007\u0002Z\n\u0002\f\u0002\u000e\u0002]\u000b\u0002\u0003\u0002\u0003\u0002\u0006\u0002a\n\u0002\r\u0002\u000e\u0002b\u0005\u0002e\n\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0007\u0003l\n\u0003\f\u0003\u000e\u0003o\u000b\u0003\u0003\u0004\u0003\u0004\u0005\u0004s\n\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005x\n\u0005\f\u0005\u000e\u0005{\u000b\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u007f\n\u0005\f\u0005\u000e\u0005\u0082\u000b\u0005\u0003\u0005\u0005\u0005\u0085\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u008c\n\u0005\f\u0005\u000e\u0005\u008f\u000b\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u0093\n\u0005\f\u0005\u000e\u0005\u0096\u000b\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u009d\n\u0005\f\u0005\u000e\u0005\u00a0\u000b\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u00a4\n\u0005\f\u0005\u000e\u0005\u00a7\u000b\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u00ae\n\u0005\f\u0005\u000e\u0005\u00b1\u000b\u0005\u0003\u0005\u0005\u0005\u00b4\n\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u00b8\n\u0005\f\u0005\u000e\u0005\u00bb\u000b\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u00bf\n\u0005\f\u0005\u000e\u0005\u00c2\u000b\u0005\u0007\u0005\u00c4\n\u0005\f\u0005\u000e\u0005\u00c7\u000b\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u00cc\n\u0005\f\u0005\u000e\u0005\u00cf\u000b\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u00d3\n\u0005\f\u0005\u000e\u0005\u00d6\u000b\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u00da\n\u0005\f\u0005\u000e\u0005\u00dd\u000b\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u00e1\n\u0005\f\u0005\u000e\u0005\u00e4\u000b\u0005\u0007\u0005\u00e6\n\u0005\f\u0005\u000e\u0005\u00e9\u000b\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00ee\n\u0005\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0007\u0007\u00f4\n\u0007\f\u0007\u000e\u0007\u00f7\u000b\u0007\u0003\u0007\u0005\u0007\u00fa\n\u0007\u0003\u0007\u0005\u0007\u00fd\n\u0007\u0003\u0007\u0007\u0007\u0100\n\u0007\f\u0007\u000e\u0007\u0103\u000b\u0007\u0003\u0007\u0003\u0007\u0007\u0007\u0107\n\u0007\f\u0007\u000e\u0007\u010a\u000b\u0007\u0003\u0007\u0003\u0007\u0007\u0007\u010e\n\u0007\f\u0007\u000e\u0007\u0111\u000b\u0007\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0007\b\u0117\n\b\f\b\u000e\b\u011a\u000b\b\u0003\b\u0003\b\u0007\b\u011e\n\b\f\b\u000e\b\u0121\u000b\b\u0003\b\u0003\b\u0003\b\u0007\b\u0126\n\b\f\b\u000e\b\u0129\u000b\b\u0003\t\u0003\t\u0007\t\u012d\n\t\f\t\u000e\t\u0130\u000b\t\u0003\t\u0003\t\u0007\t\u0134\n\t\f\t\u000e\t\u0137\u000b\t\u0003\t\u0003\t\u0007\t\u013b\n\t\f\t\u000e\t\u013e\u000b\t\u0007\t\u0140\n\t\f\t\u000e\t\u0143\u000b\t\u0005\t\u0145\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0007\n\u014e\n\n\f\n\u000e\n\u0151\u000b\n\u0003\n\u0007\n\u0154\n\n\f\n\u000e\n\u0157\u000b\n\u0003\u000b\u0003\u000b\u0007\u000b\u015b\n\u000b\f\u000b\u000e\u000b\u015e\u000b\u000b\u0006\u000b\u0160\n\u000b\r\u000b\u000e\u000b\u0161\u0003\f\u0003\f\u0005\f\u0166\n\f\u0003\f\u0005\f\u0169\n\f\u0003\r\u0003\r\u0007\r\u016d\n\r\f\r\u000e\r\u0170\u000b\r\u0003\r\u0003\r\u0007\r\u0174\n\r\f\r\u000e\r\u0177\u000b\r\u0003\r\u0003\r\u0007\r\u017b\n\r\f\r\u000e\r\u017e\u000b\r\u0003\r\u0005\r\u0181\n\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0005\u000e\u0187\n\u000e\u0003\u000f\u0003\u000f\u0005\u000f\u018b\n\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0007\u0010\u0190\n\u0010\f\u0010\u000e\u0010\u0193\u000b\u0010\u0003\u0010\u0007\u0010\u0196\n\u0010\f\u0010\u000e\u0010\u0199\u000b\u0010\u0003\u0010\u0003\u0010\u0007\u0010\u019d\n\u0010\f\u0010\u000e\u0010\u01a0\u000b\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0007\u0011\u01a7\n\u0011\f\u0011\u000e\u0011\u01aa\u000b\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u01ae\n\u0011\f\u0011\u000e\u0011\u01b1\u000b\u0011\u0005\u0011\u01b3\n\u0011\u0003\u0012\u0003\u0012\u0007\u0012\u01b7\n\u0012\f\u0012\u000e\u0012\u01ba\u000b\u0012\u0003\u0012\u0007\u0012\u01bd\n\u0012\f\u0012\u000e\u0012\u01c0\u000b\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0007\u0012\u01c5\n\u0012\f\u0012\u000e\u0012\u01c8\u000b\u0012\u0003\u0012\u0007\u0012\u01cb\n\u0012\f\u0012\u000e\u0012\u01ce\u000b\u0012\u0003\u0012\u0005\u0012\u01d1\n\u0012\u0003\u0013\u0003\u0013\u0007\u0013\u01d5\n\u0013\f\u0013\u000e\u0013\u01d8\u000b\u0013\u0003\u0013\u0003\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0007\u0014\u01df\n\u0014\f\u0014\u000e\u0014\u01e2\u000b\u0014\u0003\u0014\u0007\u0014\u01e5\n\u0014\f\u0014\u000e\u0014\u01e8\u000b\u0014\u0005\u0014\u01ea\n\u0014\u0003\u0014\u0003\u0014\u0007\u0014\u01ee\n\u0014\f\u0014\u000e\u0014\u01f1\u000b\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u01f9\n\u0014\u0003\u0015\u0005\u0015\u01fc\n\u0015\u0003\u0015\u0003\u0015\u0007\u0015\u0200\n\u0015\f\u0015\u000e\u0015\u0203\u000b\u0015\u0003\u0015\u0005\u0015\u0206\n\u0015\u0007\u0015\u0208\n\u0015\f\u0015\u000e\u0015\u020b\u000b\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0007\u0016\u0210\n\u0016\f\u0016\u000e\u0016\u0213\u000b\u0016\u0003\u0016\u0005\u0016\u0216\n\u0016\u0003\u0016\u0005\u0016\u0219\n\u0016\u0003\u0016\u0003\u0016\u0007\u0016\u021d\n\u0016\f\u0016\u000e\u0016\u0220\u000b\u0016\u0005\u0016\u0222\n\u0016\u0003\u0017\u0003\u0017\u0007\u0017\u0226\n\u0017\f\u0017\u000e\u0017\u0229\u000b\u0017\u0003\u0017\u0003\u0017\u0007\u0017\u022d\n\u0017\f\u0017\u000e\u0017\u0230\u000b\u0017\u0003\u0018\u0005\u0018\u0233\n\u0018\u0003\u0018\u0003\u0018\u0007\u0018\u0237\n\u0018\f\u0018\u000e\u0018\u023a\u000b\u0018\u0003\u0019\u0006\u0019\u023d\n\u0019\r\u0019\u000e\u0019\u023e\u0003\u001a\u0003\u001a\u0003\u001a\u0007\u001a\u0244\n\u001a\f\u001a\u000e\u001a\u0247\u000b\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0007\u001a\u024c\n\u001a\f\u001a\u000e\u001a\u024f\u000b\u001a\u0007\u001a\u0251\n\u001a\f\u001a\u000e\u001a\u0254\u000b\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0007\u001a\u0259\n\u001a\f\u001a\u000e\u001a\u025c\u000b\u001a\u0005\u001a\u025e\n\u001a\u0003\u001b\u0003\u001b\u0007\u001b\u0262\n\u001b\f\u001b\u000e\u001b\u0265\u000b\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0007\u001b\u026a\n\u001b\f\u001b\u000e\u001b\u026d\u000b\u001b\u0007\u001b\u026f\n\u001b\f\u001b\u000e\u001b\u0272\u000b\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0007\u001b\u0277\n\u001b\f\u001b\u000e\u001b\u027a\u000b\u001b\u0003\u001b\u0005\u001b\u027d\n\u001b\u0003\u001b\u0005\u001b\u0280\n\u001b\u0003\u001c\u0005\u001c\u0283\n\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u0287\n\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u028b\n\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u028f\n\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u0297\n\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0007\u001c\u02aa\n\u001c\f\u001c\u000e\u001c\u02ad\u000b\u001c\u0003\u001c\u0005\u001c\u02b0\n\u001c\u0003\u001c\u0007\u001c\u02b3\n\u001c\f\u001c\u000e\u001c\u02b6\u000b\u001c\u0003\u001d\u0006\u001d\u02b9\n\u001d\r\u001d\u000e\u001d\u02ba\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u02d5\n\u001e\u0003\u001e\u0007\u001e\u02d8\n\u001e\f\u001e\u000e\u001e\u02db\u000b\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0007\u001f\u02e1\n\u001f\f\u001f\u000e\u001f\u02e4\u000b\u001f\u0003 \u0003 \u0007 \u02e8\n \f \u000e \u02eb\u000b \u0003 \u0003 \u0007 \u02ef\n \f \u000e \u02f2\u000b \u0003 \u0003 \u0007 \u02f6\n \f \u000e \u02f9\u000b \u0003 \u0005 \u02fc\n \u0003!\u0003!\u0007!\u0300\n!\f!\u000e!\u0303\u000b!\u0003!\u0007!\u0306\n!\f!\u000e!\u0309\u000b!\u0003!\u0006!\u030c\n!\r!\u000e!\u030d\u0003!\u0007!\u0311\n!\f!\u000e!\u0314\u000b!\u0005!\u0316\n!\u0003\"\u0003\"\u0003\"\u0003\"\u0007\"\u031c\n\"\f\"\u000e\"\u031f\u000b\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0005\"\u0326\n\"\u0003#\u0003#\u0007#\u032a\n#\f#\u000e#\u032d\u000b#\u0003#\u0003#\u0007#\u0331\n#\f#\u000e#\u0334\u000b#\u0003#\u0003#\u0005#\u0338\n#\u0003#\u0007#\u033b\n#\f#\u000e#\u033e\u000b#\u0005#\u0340\n#\u0003$\u0003$\u0005$\u0344\n$\u0003$\u0005$\u0347\n$\u0003$\u0003$\u0003$\u0007$\u034c\n$\f$\u000e$\u034f\u000b$\u0003$\u0005$\u0352\n$\u0003$\u0003$\u0005$\u0356\n$\u0003$\u0003$\u0005$\u035a\n$\u0003$\u0003$\u0005$\u035e\n$\u0003$\u0007$\u0361\n$\f$\u000e$\u0364\u000b$\u0003$\u0005$\u0367\n$\u0003%\u0003%\u0003&\u0003&\u0007&\u036d\n&\f&\u000e&\u0370\u000b&\u0003&\u0007&\u0373\n&\f&\u000e&\u0376\u000b&\u0003&\u0003&\u0005&\u037a\n&\u0003'\u0005'\u037d\n'\u0003'\u0003'\u0007'\u0381\n'\f'\u000e'\u0384\u000b'\u0003'\u0005'\u0387\n'\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0007(\u03a2\n(\f(\u000e(\u03a5\u000b(\u0003(\u0007(\u03a8\n(\f(\u000e(\u03ab\u000b(\u0003(\u0003(\u0003(\u0003(\u0007(\u03b1\n(\f(\u000e(\u03b4\u000b(\u0003(\u0003(\u0003(\u0007(\u03b9\n(\f(\u000e(\u03bc\u000b(\u0003(\u0005(\u03bf\n(\u0003(\u0007(\u03c2\n(\f(\u000e(\u03c5\u000b(\u0003)\u0003)\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0005*\u03e1\n*\u0003*\u0007*\u03e4\n*\f*\u000e*\u03e7\u000b*\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0005+\u0402\n+\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0005,\u041e\n,\u0003,\u0002\u0002-\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTV\u0002\b\u0004\u0002+,23\u0003\u0002JK\u0004\u0002  LL\u0004\u0002<<UY\u0004\u0002\u0017\u0017+,\u0004\u000277AC\u0522\u0002[\u0003\u0002\u0002\u0002\u0004m\u0003\u0002\u0002\u0002\u0006r\u0003\u0002\u0002\u0002\b\u00ed\u0003\u0002\u0002\u0002\n\u00ef\u0003\u0002\u0002\u0002\f\u00f1\u0003\u0002\u0002\u0002\u000e\u0114\u0003\u0002\u0002\u0002\u0010\u0144\u0003\u0002\u0002\u0002\u0012\u014a\u0003\u0002\u0002\u0002\u0014\u015f\u0003\u0002\u0002\u0002\u0016\u0168\u0003\u0002\u0002\u0002\u0018\u016a\u0003\u0002\u0002\u0002\u001a\u0186\u0003\u0002\u0002\u0002\u001c\u018a\u0003\u0002\u0002\u0002\u001e\u018c\u0003\u0002\u0002\u0002 \u01b2\u0003\u0002\u0002\u0002\"\u01d0\u0003\u0002\u0002\u0002$\u01d2\u0003\u0002\u0002\u0002&\u01f8\u0003\u0002\u0002\u0002(\u01fb\u0003\u0002\u0002\u0002*\u0221\u0003\u0002\u0002\u0002,\u0223\u0003\u0002\u0002\u0002.\u0232\u0003\u0002\u0002\u00020\u023c\u0003\u0002\u0002\u00022\u025d\u0003\u0002\u0002\u00024\u027f\u0003\u0002\u0002\u00026\u02af\u0003\u0002\u0002\u00028\u02b8\u0003\u0002\u0002\u0002:\u02d4\u0003\u0002\u0002\u0002<\u02dc\u0003\u0002\u0002\u0002>\u02fb\u0003\u0002\u0002\u0002@\u0315\u0003\u0002\u0002\u0002B\u0325\u0003\u0002\u0002\u0002D\u0327\u0003\u0002\u0002\u0002F\u0341\u0003\u0002\u0002\u0002H\u0368\u0003\u0002\u0002\u0002J\u0379\u0003\u0002\u0002\u0002L\u0386\u0003\u0002\u0002\u0002N\u03be\u0003\u0002\u0002\u0002P\u03c6\u0003\u0002\u0002\u0002R\u03e0\u0003\u0002\u0002\u0002T\u0401\u0003\u0002\u0002\u0002V\u041d\u0003\u0002\u0002\u0002XZ\u0007P\u0002\u0002YX\u0003\u0002\u0002\u0002Z]\u0003\u0002\u0002\u0002[Y\u0003\u0002\u0002\u0002[\\\u0003\u0002\u0002\u0002\\d\u0003\u0002\u0002\u0002][\u0003\u0002\u0002\u0002^e\u0005(\u0015\u0002_a\u0005\u0010\t\u0002`_\u0003\u0002\u0002\u0002ab\u0003\u0002\u0002\u0002b`\u0003\u0002\u0002\u0002bc\u0003\u0002\u0002\u0002ce\u0003\u0002\u0002\u0002d^\u0003\u0002\u0002\u0002d`\u0003\u0002\u0002\u0002e\u0003\u0003\u0002\u0002\u0002fl\u00075\u0002\u0002gl\u00076\u0002\u0002hl\u0007P\u0002\u0002il\u0005P)\u0002jl\u0005\u0006\u0004\u0002kf\u0003\u0002\u0002\u0002kg\u0003\u0002\u0002\u0002kh\u0003\u0002\u0002\u0002ki\u0003\u0002\u0002\u0002kj\u0003\u0002\u0002\u0002lo\u0003\u0002\u0002\u0002mk\u0003\u0002\u0002\u0002mn\u0003\u0002\u0002\u0002n\u0005\u0003\u0002\u0002\u0002om\u0003\u0002\u0002\u0002ps\u0005&\u0014\u0002qs\u0005\b\u0005\u0002rp\u0003\u0002\u0002\u0002rq\u0003\u0002\u0002\u0002s\u0007\u0003\u0002\u0002\u0002t\u00ee\u0007!\u0002\u0002uy\u0007\"\u0002\u0002vx\u0007P\u0002\u0002wv\u0003\u0002\u0002\u0002x{\u0003\u0002\u0002\u0002yw\u0003\u0002\u0002\u0002yz\u0003\u0002\u0002\u0002z|\u0003\u0002\u0002\u0002{y\u0003\u0002\u0002\u0002|\u0080\u0005\n\u0006\u0002}\u007f\u0007P\u0002\u0002~}\u0003\u0002\u0002\u0002\u007f\u0082\u0003\u0002\u0002\u0002\u0080~\u0003\u0002\u0002\u0002\u0080\u0081\u0003\u0002\u0002\u0002\u0081\u0084\u0003\u0002\u0002\u0002\u0082\u0080\u0003\u0002\u0002\u0002\u0083\u0085\u0005\u0012\n\u0002\u0084\u0083\u0003\u0002\u0002\u0002\u0084\u0085\u0003\u0002\u0002\u0002\u0085\u0086\u0003\u0002\u0002\u0002\u0086\u0087\u00077\u0002\u0002\u0087\u00ee\u0003\u0002\u0002\u0002\u0088\u00ee\u0005\f\u0007\u0002\u0089\u008d\u0007'\u0002\u0002\u008a\u008c\u0007P\u0002\u0002\u008b\u008a\u0003\u0002\u0002\u0002\u008c\u008f\u0003\u0002\u0002\u0002\u008d\u008b\u0003\u0002\u0002\u0002\u008d\u008e\u0003\u0002\u0002\u0002\u008e\u0090\u0003\u0002\u0002\u0002\u008f\u008d\u0003\u0002\u0002\u0002\u0090\u0094\u0007@\u0002\u0002\u0091\u0093\u0007P\u0002\u0002\u0092\u0091\u0003\u0002\u0002\u0002\u0093\u0096\u0003\u0002\u0002\u0002\u0094\u0092\u0003\u0002\u0002\u0002\u0094\u0095\u0003\u0002\u0002\u0002\u0095\u0097\u0003\u0002\u0002\u0002\u0096\u0094\u0003\u0002\u0002\u0002\u0097\u0098\u0005(\u0015\u0002\u0098\u0099\u0007A\u0002\u0002\u0099\u00ee\u0003\u0002\u0002\u0002\u009a\u009e\u0007(\u0002\u0002\u009b\u009d\u0007P\u0002\u0002\u009c\u009b\u0003\u0002\u0002\u0002\u009d\u00a0\u0003\u0002\u0002\u0002\u009e\u009c\u0003\u0002\u0002\u0002\u009e\u009f\u0003\u0002\u0002\u0002\u009f\u00a1\u0003\u0002\u0002\u0002\u00a0\u009e\u0003\u0002\u0002\u0002\u00a1\u00a5\u0007@\u0002\u0002\u00a2\u00a4\u0007P\u0002\u0002\u00a3\u00a2\u0003\u0002\u0002\u0002\u00a4\u00a7\u0003\u0002\u0002\u0002\u00a5\u00a3\u0003\u0002\u0002\u0002\u00a5\u00a6\u0003\u0002\u0002\u0002\u00a6\u00a8\u0003\u0002\u0002\u0002\u00a7\u00a5\u0003\u0002\u0002\u0002\u00a8\u00a9\u0005(\u0015\u0002\u00a9\u00aa\u0007A\u0002\u0002\u00aa\u00ee\u0003\u0002\u0002\u0002\u00ab\u00af\u0007$\u0002\u0002\u00ac\u00ae\u0007P\u0002\u0002\u00ad\u00ac\u0003\u0002\u0002\u0002\u00ae\u00b1\u0003\u0002\u0002\u0002\u00af\u00ad\u0003\u0002\u0002\u0002\u00af\u00b0\u0003\u0002\u0002\u0002\u00b0\u00b3\u0003\u0002\u0002\u0002\u00b1\u00af\u0003\u0002\u0002\u0002\u00b2\u00b4\u0005\u0012\n\u0002\u00b3\u00b2\u0003\u0002\u0002\u0002\u00b3\u00b4\u0003\u0002\u0002\u0002\u00b4\u00b5\u0003\u0002\u0002\u0002\u00b5\u00b9\u0007@\u0002\u0002\u00b6\u00b8\u0007P\u0002\u0002\u00b7\u00b6\u0003\u0002\u0002\u0002\u00b8\u00bb\u0003\u0002\u0002\u0002\u00b9\u00b7\u0003\u0002\u0002\u0002\u00b9\u00ba\u0003\u0002\u0002\u0002\u00ba\u00c5\u0003\u0002\u0002\u0002\u00bb\u00b9\u0003\u0002\u0002\u0002\u00bc\u00c0\u0005\u001a\u000e\u0002\u00bd\u00bf\u0007P\u0002\u0002\u00be\u00bd\u0003\u0002\u0002\u0002\u00bf\u00c2\u0003\u0002\u0002\u0002\u00c0\u00be\u0003\u0002\u0002\u0002\u00c0\u00c1\u0003\u0002\u0002\u0002\u00c1\u00c4\u0003\u0002\u0002\u0002\u00c2\u00c0\u0003\u0002\u0002\u0002\u00c3\u00bc\u0003\u0002\u0002\u0002\u00c4\u00c7\u0003\u0002\u0002\u0002\u00c5\u00c3\u0003\u0002\u0002\u0002\u00c5\u00c6\u0003\u0002\u0002\u0002\u00c6\u00c8\u0003\u0002\u0002\u0002\u00c7\u00c5\u0003\u0002\u0002\u0002\u00c8\u00ee\u0007A\u0002\u0002\u00c9\u00cd\u0007#\u0002\u0002\u00ca\u00cc\u0007P\u0002\u0002\u00cb\u00ca\u0003\u0002\u0002\u0002\u00cc\u00cf\u0003\u0002\u0002\u0002\u00cd\u00cb\u0003\u0002\u0002\u0002\u00cd\u00ce\u0003\u0002\u0002\u0002\u00ce\u00d0\u0003\u0002\u0002\u0002\u00cf\u00cd\u0003\u0002\u0002\u0002\u00d0\u00d4\u0005\u001c\u000f\u0002\u00d1\u00d3\u0007P\u0002\u0002\u00d2\u00d1\u0003\u0002\u0002\u0002\u00d3\u00d6\u0003\u0002\u0002\u0002\u00d4\u00d2\u0003\u0002\u0002\u0002\u00d4\u00d5\u0003\u0002\u0002\u0002\u00d5\u00d7\u0003\u0002\u0002\u0002\u00d6\u00d4\u0003\u0002\u0002\u0002\u00d7\u00db\u0007@\u0002\u0002\u00d8\u00da\u0007P\u0002\u0002\u00d9\u00d8\u0003\u0002\u0002\u0002\u00da\u00dd\u0003\u0002\u0002\u0002\u00db\u00d9\u0003\u0002\u0002\u0002\u00db\u00dc\u0003\u0002\u0002\u0002\u00dc\u00e7\u0003\u0002\u0002\u0002\u00dd\u00db\u0003\u0002\u0002\u0002\u00de\u00e2\u0005\u001e\u0010\u0002\u00df\u00e1\u0007P\u0002\u0002\u00e0\u00df\u0003\u0002\u0002\u0002\u00e1\u00e4\u0003\u0002\u0002\u0002\u00e2\u00e0\u0003\u0002\u0002\u0002\u00e2\u00e3\u0003\u0002\u0002\u0002\u00e3\u00e6\u0003\u0002\u0002\u0002\u00e4\u00e2\u0003\u0002\u0002\u0002\u00e5\u00de\u0003\u0002\u0002\u0002\u00e6\u00e9\u0003\u0002\u0002\u0002\u00e7\u00e5\u0003\u0002\u0002\u0002\u00e7\u00e8\u0003\u0002\u0002\u0002\u00e8\u00ea\u0003\u0002\u0002\u0002\u00e9\u00e7\u0003\u0002\u0002\u0002\u00ea\u00eb\u0007A\u0002\u0002\u00eb\u00ee\u0003\u0002\u0002\u0002\u00ec\u00ee\u0005\"\u0012\u0002\u00edt\u0003\u0002\u0002\u0002\u00edu\u0003\u0002\u0002\u0002\u00ed\u0088\u0003\u0002\u0002\u0002\u00ed\u0089\u0003\u0002\u0002\u0002\u00ed\u009a\u0003\u0002\u0002\u0002\u00ed\u00ab\u0003\u0002\u0002\u0002\u00ed\u00c9\u0003\u0002\u0002\u0002\u00ed\u00ec\u0003\u0002\u0002\u0002\u00ee\t\u0003\u0002\u0002\u0002\u00ef\u00f0\t\u0002\u0002\u0002\u00f0\u000b\u0003\u0002\u0002\u0002\u00f1\u00f5\u0007%\u0002\u0002\u00f2\u00f4\u0007P\u0002\u0002\u00f3\u00f2\u0003\u0002\u0002\u0002\u00f4\u00f7\u0003\u0002\u0002\u0002\u00f5\u00f3\u0003\u0002\u0002\u0002\u00f5\u00f6\u0003\u0002\u0002\u0002\u00f6\u00f9\u0003\u0002\u0002\u0002\u00f7\u00f5\u0003\u0002\u0002\u0002\u00f8\u00fa\u0007 \u0002\u0002\u00f9\u00f8\u0003\u0002\u0002\u0002\u00f9\u00fa\u0003\u0002\u0002\u0002\u00fa\u00fc\u0003\u0002\u0002\u0002\u00fb\u00fd\u0005F$\u0002\u00fc\u00fb\u0003\u0002\u0002\u0002\u00fc\u00fd\u0003\u0002\u0002\u0002\u00fd\u0101\u0003\u0002\u0002\u0002\u00fe\u0100\u0007P\u0002\u0002\u00ff\u00fe\u0003\u0002\u0002\u0002\u0100\u0103\u0003\u0002\u0002\u0002\u0101\u00ff\u0003\u0002\u0002\u0002\u0101\u0102\u0003\u0002\u0002\u0002\u0102\u0104\u0003\u0002\u0002\u0002\u0103\u0101\u0003\u0002\u0002\u0002\u0104\u0108\u0007@\u0002\u0002\u0105\u0107\u0007P\u0002\u0002\u0106\u0105\u0003\u0002\u0002\u0002\u0107\u010a\u0003\u0002\u0002\u0002\u0108\u0106\u0003\u0002\u0002\u0002\u0108\u0109\u0003\u0002\u0002\u0002\u0109\u010b\u0003\u0002\u0002\u0002\u010a\u0108\u0003\u0002\u0002\u0002\u010b\u010f\u0005(\u0015\u0002\u010c\u010e\u0005\u000e\b\u0002\u010d\u010c\u0003\u0002\u0002\u0002\u010e\u0111\u0003\u0002\u0002\u0002\u010f\u010d\u0003\u0002\u0002\u0002\u010f\u0110\u0003\u0002\u0002\u0002\u0110\u0112\u0003\u0002\u0002\u0002\u0111\u010f\u0003\u0002\u0002\u0002\u0112\u0113\u0007A\u0002\u0002\u0113\r\u0003\u0002\u0002\u0002\u0114\u0118\u0007&\u0002\u0002\u0115\u0117\u0007P\u0002\u0002\u0116\u0115\u0003\u0002\u0002\u0002\u0117\u011a\u0003\u0002\u0002\u0002\u0118\u0116\u0003\u0002\u0002\u0002\u0118\u0119\u0003\u0002\u0002\u0002\u0119\u011b\u0003\u0002\u0002\u0002\u011a\u0118\u0003\u0002\u0002\u0002\u011b\u011f\u0007@\u0002\u0002\u011c\u011e\u0007P\u0002\u0002\u011d\u011c\u0003\u0002\u0002\u0002\u011e\u0121\u0003\u0002\u0002\u0002\u011f\u011d\u0003\u0002\u0002\u0002\u011f\u0120\u0003\u0002\u0002\u0002\u0120\u0122\u0003\u0002\u0002\u0002\u0121\u011f\u0003\u0002\u0002\u0002\u0122\u0123\u0005(\u0015\u0002\u0123\u0127\u0007A\u0002\u0002\u0124\u0126\u0007P\u0002\u0002\u0125\u0124\u0003\u0002\u0002\u0002\u0126\u0129\u0003\u0002\u0002\u0002\u0127\u0125\u0003\u0002\u0002\u0002\u0127\u0128\u0003\u0002\u0002\u0002\u0128\u000f\u0003\u0002\u0002\u0002\u0129\u0127\u0003\u0002\u0002\u0002\u012a\u012e\u0005F$\u0002\u012b\u012d\u0007P\u0002\u0002\u012c\u012b\u0003\u0002\u0002\u0002\u012d\u0130\u0003\u0002\u0002\u0002\u012e\u012c\u0003\u0002\u0002\u0002\u012e\u012f\u0003\u0002\u0002\u0002\u012f\u0141\u0003\u0002\u0002\u0002\u0130\u012e\u0003\u0002\u0002\u0002\u0131\u0135\u00079\u0002\u0002\u0132\u0134\u0007P\u0002\u0002\u0133\u0132\u0003\u0002\u0002\u0002\u0134\u0137\u0003\u0002\u0002\u0002\u0135\u0133\u0003\u0002\u0002\u0002\u0135\u0136\u0003\u0002\u0002\u0002\u0136\u0138\u0003\u0002\u0002\u0002\u0137\u0135\u0003\u0002\u0002\u0002\u0138\u013c\u0005F$\u0002\u0139\u013b\u0007P\u0002\u0002\u013a\u0139\u0003\u0002\u0002\u0002\u013b\u013e\u0003\u0002\u0002\u0002\u013c\u013a\u0003\u0002\u0002\u0002\u013c\u013d\u0003\u0002\u0002\u0002\u013d\u0140\u0003\u0002\u0002\u0002\u013e\u013c\u0003\u0002\u0002\u0002\u013f\u0131\u0003\u0002\u0002\u0002\u0140\u0143\u0003\u0002\u0002\u0002\u0141\u013f\u0003\u0002\u0002\u0002\u0141\u0142\u0003\u0002\u0002\u0002\u0142\u0145\u0003\u0002\u0002\u0002\u0143\u0141\u0003\u0002\u0002\u0002\u0144\u012a\u0003\u0002\u0002\u0002\u0144\u0145\u0003\u0002\u0002\u0002\u0145\u0146\u0003\u0002\u0002\u0002\u0146\u0147\u0007@\u0002\u0002\u0147\u0148\u0005(\u0015\u0002\u0148\u0149\u0007A\u0002\u0002\u0149\u0011\u0003\u0002\u0002\u0002\u014a\u0155\u0005\u0014\u000b\u0002\u014b\u014f\u00079\u0002\u0002\u014c\u014e\u0007P\u0002\u0002\u014d\u014c\u0003\u0002\u0002\u0002\u014e\u0151\u0003\u0002\u0002\u0002\u014f\u014d\u0003\u0002\u0002\u0002\u014f\u0150\u0003\u0002\u0002\u0002\u0150\u0152\u0003\u0002\u0002\u0002\u0151\u014f\u0003\u0002\u0002\u0002\u0152\u0154\u0005\u0014\u000b\u0002\u0153\u014b\u0003\u0002\u0002\u0002\u0154\u0157\u0003\u0002\u0002\u0002\u0155\u0153\u0003\u0002\u0002\u0002\u0155\u0156\u0003\u0002\u0002\u0002\u0156\u0013\u0003\u0002\u0002\u0002\u0157\u0155\u0003\u0002\u0002\u0002\u0158\u015c\u0005\u0016\f\u0002\u0159\u015b\u0007P\u0002\u0002\u015a\u0159\u0003\u0002\u0002\u0002\u015b\u015e\u0003\u0002\u0002\u0002\u015c\u015a\u0003\u0002\u0002\u0002\u015c\u015d\u0003\u0002\u0002\u0002\u015d\u0160\u0003\u0002\u0002\u0002\u015e\u015c\u0003\u0002\u0002\u0002\u015f\u0158\u0003\u0002\u0002\u0002\u0160\u0161\u0003\u0002\u0002\u0002\u0161\u015f\u0003\u0002\u0002\u0002\u0161\u0162\u0003\u0002\u0002\u0002\u0162\u0015\u0003\u0002\u0002\u0002\u0163\u0166\u0007 \u0002\u0002\u0164\u0166\u0005\u0018\r\u0002\u0165\u0163\u0003\u0002\u0002\u0002\u0165\u0164\u0003\u0002\u0002\u0002\u0166\u0169\u0003\u0002\u0002\u0002\u0167\u0169\u0005V,\u0002\u0168\u0165\u0003\u0002\u0002\u0002\u0168\u0167\u0003\u0002\u0002\u0002\u0169\u0017\u0003\u0002\u0002\u0002\u016a\u016e\u0007D\u0002\u0002\u016b\u016d\u0007P\u0002\u0002\u016c\u016b\u0003\u0002\u0002\u0002\u016d\u0170\u0003\u0002\u0002\u0002\u016e\u016c\u0003\u0002\u0002\u0002\u016e\u016f\u0003\u0002\u0002\u0002\u016f\u0171\u0003\u0002\u0002\u0002\u0170\u016e\u0003\u0002\u0002\u0002\u0171\u0175\u0007 \u0002\u0002\u0172\u0174\u0007P\u0002\u0002\u0173\u0172\u0003\u0002\u0002\u0002\u0174\u0177\u0003\u0002\u0002\u0002\u0175\u0173\u0003\u0002\u0002\u0002\u0175\u0176\u0003\u0002\u0002\u0002\u0176\u0180\u0003\u0002\u0002\u0002\u0177\u0175\u0003\u0002\u0002\u0002\u0178\u017c\u00078\u0002\u0002\u0179\u017b\u0007P\u0002\u0002\u017a\u0179\u0003\u0002\u0002\u0002\u017b\u017e\u0003\u0002\u0002\u0002\u017c\u017a\u0003\u0002\u0002\u0002\u017c\u017d\u0003\u0002\u0002\u0002\u017d\u017f\u0003\u0002\u0002\u0002\u017e\u017c\u0003\u0002\u0002\u0002\u017f\u0181\u00050\u0019\u0002\u0180\u0178\u0003\u0002\u0002\u0002\u0180\u0181\u0003\u0002\u0002\u0002\u0181\u0182\u0003\u0002\u0002\u0002\u0182\u0183\u0007E\u0002\u0002\u0183\u0019\u0003\u0002\u0002\u0002\u0184\u0187\u0005&\u0014\u0002\u0185\u0187\u0005\b\u0005\u0002\u0186\u0184\u0003\u0002\u0002\u0002\u0186\u0185\u0003\u0002\u0002\u0002\u0187\u001b\u0003\u0002\u0002\u0002\u0188\u018b\u0007 \u0002\u0002\u0189\u018b\u0005H%\u0002\u018a\u0188\u0003\u0002\u0002\u0002\u018a\u0189\u0003\u0002\u0002\u0002\u018b\u001d\u0003\u0002\u0002\u0002\u018c\u0197\u0005 \u0011\u0002\u018d\u0191\u00079\u0002\u0002\u018e\u0190\u0007P\u0002\u0002\u018f\u018e\u0003\u0002\u0002\u0002\u0190\u0193\u0003\u0002\u0002\u0002\u0191\u018f\u0003\u0002\u0002\u0002\u0191\u0192\u0003\u0002\u0002\u0002\u0192\u0194\u0003\u0002\u0002\u0002\u0193\u0191\u0003\u0002\u0002\u0002\u0194\u0196\u0005 \u0011\u0002\u0195\u018d\u0003\u0002\u0002\u0002\u0196\u0199\u0003\u0002\u0002\u0002\u0197\u0195\u0003\u0002\u0002\u0002\u0197\u0198\u0003\u0002\u0002\u0002\u0198\u019a\u0003\u0002\u0002\u0002\u0199\u0197\u0003\u0002\u0002\u0002\u019a\u019e\u0007@\u0002\u0002\u019b\u019d\u0007P\u0002\u0002\u019c\u019b\u0003\u0002\u0002\u0002\u019d\u01a0\u0003\u0002\u0002\u0002\u019e\u019c\u0003\u0002\u0002\u0002\u019e\u019f\u0003\u0002\u0002\u0002\u019f\u01a1\u0003\u0002\u0002\u0002\u01a0\u019e\u0003\u0002\u0002\u0002\u01a1\u01a2\u0005(\u0015\u0002\u01a2\u01a3\u0007A\u0002\u0002\u01a3\u001f\u0003\u0002\u0002\u0002\u01a4\u01a8\u0007 \u0002\u0002\u01a5\u01a7\u0007P\u0002\u0002\u01a6\u01a5\u0003\u0002\u0002\u0002\u01a7\u01aa\u0003\u0002\u0002\u0002\u01a8\u01a6\u0003\u0002\u0002\u0002\u01a8\u01a9\u0003\u0002\u0002\u0002\u01a9\u01b3\u0003\u0002\u0002\u0002\u01aa\u01a8\u0003\u0002\u0002\u0002\u01ab\u01af\u00070\u0002\u0002\u01ac\u01ae\u0007P\u0002\u0002\u01ad\u01ac\u0003\u0002\u0002\u0002\u01ae\u01b1\u0003\u0002\u0002\u0002\u01af\u01ad\u0003\u0002\u0002\u0002\u01af\u01b0\u0003\u0002\u0002\u0002\u01b0\u01b3\u0003\u0002\u0002\u0002\u01b1\u01af\u0003\u0002\u0002\u0002\u01b2\u01a4\u0003\u0002\u0002\u0002\u01b2\u01ab\u0003\u0002\u0002\u0002\u01b3!\u0003\u0002\u0002\u0002\u01b4\u01b8\u0007)\u0002\u0002\u01b5\u01b7\u0007P\u0002\u0002\u01b6\u01b5\u0003\u0002\u0002\u0002\u01b7\u01ba\u0003\u0002\u0002\u0002\u01b8\u01b6\u0003\u0002\u0002\u0002\u01b8\u01b9\u0003\u0002\u0002\u0002\u01b9\u01be\u0003\u0002\u0002\u0002\u01ba\u01b8\u0003\u0002\u0002\u0002\u01bb\u01bd\u0005N(\u0002\u01bc\u01bb\u0003\u0002\u0002\u0002\u01bd\u01c0\u0003\u0002\u0002\u0002\u01be\u01bc\u0003\u0002\u0002\u0002\u01be\u01bf\u0003\u0002\u0002\u0002\u01bf\u01c1\u0003\u0002\u0002\u0002\u01c0\u01be\u0003\u0002\u0002\u0002\u01c1\u01d1\u0005$\u0013\u0002\u01c2\u01c6\u0007)\u0002\u0002\u01c3\u01c5\u0007P\u0002\u0002\u01c4\u01c3\u0003\u0002\u0002\u0002\u01c5\u01c8\u0003\u0002\u0002\u0002\u01c6\u01c4\u0003\u0002\u0002\u0002\u01c6\u01c7\u0003\u0002\u0002\u0002\u01c7\u01cc\u0003\u0002\u0002\u0002\u01c8\u01c6\u0003\u0002\u0002\u0002\u01c9\u01cb\u0005N(\u0002\u01ca\u01c9\u0003\u0002\u0002\u0002\u01cb\u01ce\u0003\u0002\u0002\u0002\u01cc\u01ca\u0003\u0002\u0002\u0002\u01cc\u01cd\u0003\u0002\u0002\u0002\u01cd\u01cf\u0003\u0002\u0002\u0002\u01ce\u01cc\u0003\u0002\u0002\u0002\u01cf\u01d1\u00077\u0002\u0002\u01d0\u01b4\u0003\u0002\u0002\u0002\u01d0\u01c2\u0003\u0002\u0002\u0002\u01d1#\u0003\u0002\u0002\u0002\u01d2\u01d6\u0007@\u0002\u0002\u01d3\u01d5\u0007P\u0002\u0002\u01d4\u01d3\u0003\u0002\u0002\u0002\u01d5\u01d8\u0003\u0002\u0002\u0002\u01d6\u01d4\u0003\u0002\u0002\u0002\u01d6\u01d7\u0003\u0002\u0002\u0002\u01d7\u01d9\u0003\u0002\u0002\u0002\u01d8\u01d6\u0003\u0002\u0002\u0002\u01d9\u01da\u0007A\u0002\u0002\u01da%\u0003\u0002\u0002\u0002\u01db\u01e6\u0005<\u001f\u0002\u01dc\u01e0\u00079\u0002\u0002\u01dd\u01df\u0007P\u0002\u0002\u01de\u01dd\u0003\u0002\u0002\u0002\u01df\u01e2\u0003\u0002\u0002\u0002\u01e0\u01de\u0003\u0002\u0002\u0002\u01e0\u01e1\u0003\u0002\u0002\u0002\u01e1\u01e3\u0003\u0002\u0002\u0002\u01e2\u01e0\u0003\u0002\u0002\u0002\u01e3\u01e5\u0005<\u001f\u0002\u01e4\u01dc\u0003\u0002\u0002\u0002\u01e5\u01e8\u0003\u0002\u0002\u0002\u01e6\u01e4\u0003\u0002\u0002\u0002\u01e6\u01e7\u0003\u0002\u0002\u0002\u01e7\u01ea\u0003\u0002\u0002\u0002\u01e8\u01e6\u0003\u0002\u0002\u0002\u01e9\u01db\u0003\u0002\u0002\u0002\u01e9\u01ea\u0003\u0002\u0002\u0002\u01ea\u01eb\u0003\u0002\u0002\u0002\u01eb\u01ef\u0007@\u0002\u0002\u01ec\u01ee\u0007P\u0002\u0002\u01ed\u01ec\u0003\u0002\u0002\u0002\u01ee\u01f1\u0003\u0002\u0002\u0002\u01ef\u01ed\u0003\u0002\u0002\u0002\u01ef\u01f0\u0003\u0002\u0002\u0002\u01f0\u01f2\u0003\u0002\u0002\u0002\u01f1\u01ef\u0003\u0002\u0002\u0002\u01f2\u01f3\u0005(\u0015\u0002\u01f3\u01f4\u0007A\u0002\u0002\u01f4\u01f9\u0003\u0002\u0002\u0002\u01f5\u01f6\u0005T+\u0002\u01f6\u01f7\b\u0014\u0001\u0002\u01f7\u01f9\u0003\u0002\u0002\u0002\u01f8\u01e9\u0003\u0002\u0002\u0002\u01f8\u01f5\u0003\u0002\u0002\u0002\u01f9'\u0003\u0002\u0002\u0002\u01fa\u01fc\u0005*\u0016\u0002\u01fb\u01fa\u0003\u0002\u0002\u0002\u01fb\u01fc\u0003\u0002\u0002\u0002\u01fc\u0209\u0003\u0002\u0002\u0002\u01fd\u0201\u00077\u0002\u0002\u01fe\u0200\u0007P\u0002\u0002\u01ff\u01fe\u0003\u0002\u0002\u0002\u0200\u0203\u0003\u0002\u0002\u0002\u0201\u01ff\u0003\u0002\u0002\u0002\u0201\u0202\u0003\u0002\u0002\u0002\u0202\u0205\u0003\u0002\u0002\u0002\u0203\u0201\u0003\u0002\u0002\u0002\u0204\u0206\u0005*\u0016\u0002\u0205\u0204\u0003\u0002\u0002\u0002\u0205\u0206\u0003\u0002\u0002\u0002\u0206\u0208\u0003\u0002\u0002\u0002\u0207\u01fd\u0003\u0002\u0002\u0002\u0208\u020b\u0003\u0002\u0002\u0002\u0209\u0207\u0003\u0002\u0002\u0002\u0209\u020a\u0003\u0002\u0002\u0002\u020a)\u0003\u0002\u0002\u0002\u020b\u0209\u0003\u0002\u0002\u0002\u020c\u020d\u0005.\u0018\u0002\u020d\u0211\u00078\u0002\u0002\u020e\u0210\u0007P\u0002\u0002\u020f\u020e\u0003\u0002\u0002\u0002\u0210\u0213\u0003\u0002\u0002\u0002\u0211\u020f\u0003\u0002\u0002\u0002\u0211\u0212\u0003\u0002\u0002\u0002\u0212\u0215\u0003\u0002\u0002\u0002\u0213\u0211\u0003\u0002\u0002\u0002\u0214\u0216\u00050\u0019\u0002\u0215\u0214\u0003\u0002\u0002\u0002\u0215\u0216\u0003\u0002\u0002\u0002\u0216\u0218\u0003\u0002\u0002\u0002\u0217\u0219\u0005,\u0017\u0002\u0218\u0217\u0003\u0002\u0002\u0002\u0218\u0219\u0003\u0002\u0002\u0002\u0219\u0222\u0003\u0002\u0002\u0002\u021a\u021e\u0005R*\u0002\u021b\u021d\u0005N(\u0002\u021c\u021b\u0003\u0002\u0002\u0002\u021d\u0220\u0003\u0002\u0002\u0002\u021e\u021c\u0003\u0002\u0002\u0002\u021e\u021f\u0003\u0002\u0002\u0002\u021f\u0222\u0003\u0002\u0002\u0002\u0220\u021e\u0003\u0002\u0002\u0002\u0221\u020c\u0003\u0002\u0002\u0002\u0221\u021a\u0003\u0002\u0002\u0002\u0222+\u0003\u0002\u0002\u0002\u0223\u0227\u0007H\u0002\u0002\u0224\u0226\u0007P\u0002\u0002\u0225\u0224\u0003\u0002\u0002\u0002\u0226\u0229\u0003\u0002\u0002\u0002\u0227\u0225\u0003\u0002\u0002\u0002\u0227\u0228\u0003\u0002\u0002\u0002\u0228\u022a\u0003\u0002\u0002\u0002\u0229\u0227\u0003\u0002\u0002\u0002\u022a\u022e\u0007\u001f\u0002\u0002\u022b\u022d\u0007P\u0002\u0002\u022c\u022b\u0003\u0002\u0002\u0002\u022d\u0230\u0003\u0002\u0002\u0002\u022e\u022c\u0003\u0002\u0002\u0002\u022e\u022f\u0003\u0002\u0002\u0002\u022f-\u0003\u0002\u0002\u0002\u0230\u022e\u0003\u0002\u0002\u0002\u0231\u0233\u0007J\u0002\u0002\u0232\u0231\u0003\u0002\u0002\u0002\u0232\u0233\u0003\u0002\u0002\u0002\u0233\u0234\u0003\u0002\u0002\u0002\u0234\u0238\u0007 \u0002\u0002\u0235\u0237\u0007P\u0002\u0002\u0236\u0235\u0003\u0002\u0002\u0002\u0237\u023a\u0003\u0002\u0002\u0002\u0238\u0236\u0003\u0002\u0002\u0002\u0238\u0239\u0003\u0002\u0002\u0002\u0239/\u0003\u0002\u0002\u0002\u023a\u0238\u0003\u0002\u0002\u0002\u023b\u023d\u00052\u001a\u0002\u023c\u023b\u0003\u0002\u0002\u0002\u023d\u023e\u0003\u0002\u0002\u0002\u023e\u023c\u0003\u0002\u0002\u0002\u023e\u023f\u0003\u0002\u0002\u0002\u023f1\u0003\u0002\u0002\u0002\u0240\u025e\u00056\u001c\u0002\u0241\u0245\u0007@\u0002\u0002\u0242\u0244\u0007P\u0002\u0002\u0243\u0242\u0003\u0002\u0002\u0002\u0244\u0247\u0003\u0002\u0002\u0002\u0245\u0243\u0003\u0002\u0002\u0002\u0245\u0246\u0003\u0002\u0002\u0002\u0246\u0252\u0003\u0002\u0002\u0002\u0247\u0245\u0003\u0002\u0002\u0002\u0248\u0251\u0005N(\u0002\u0249\u024d\u00077\u0002\u0002\u024a\u024c\u0007P\u0002\u0002\u024b\u024a\u0003\u0002\u0002\u0002\u024c\u024f\u0003\u0002\u0002\u0002\u024d\u024b\u0003\u0002\u0002\u0002\u024d\u024e\u0003\u0002\u0002\u0002\u024e\u0251\u0003\u0002\u0002\u0002\u024f\u024d\u0003\u0002\u0002\u0002\u0250\u0248\u0003\u0002\u0002\u0002\u0250\u0249\u0003\u0002\u0002\u0002\u0251\u0254\u0003\u0002\u0002\u0002\u0252\u0250\u0003\u0002\u0002\u0002\u0252\u0253\u0003\u0002\u0002\u0002\u0253\u0255\u0003\u0002\u0002\u0002\u0254\u0252\u0003\u0002\u0002\u0002\u0255\u025e\u0007A\u0002\u0002\u0256\u025a\u0007)\u0002\u0002\u0257\u0259\u0007P\u0002\u0002\u0258\u0257\u0003\u0002\u0002\u0002\u0259\u025c\u0003\u0002\u0002\u0002\u025a\u0258\u0003\u0002\u0002\u0002\u025a\u025b\u0003\u0002\u0002\u0002\u025b\u025e\u0003\u0002\u0002\u0002\u025c\u025a\u0003\u0002\u0002\u0002\u025d\u0240\u0003\u0002\u0002\u0002\u025d\u0241\u0003\u0002\u0002\u0002\u025d\u0256\u0003\u0002\u0002\u0002\u025e3\u0003\u0002\u0002\u0002\u025f\u0263\u0007S\u0002\u0002\u0260\u0262\u0007P\u0002\u0002\u0261\u0260\u0003\u0002\u0002\u0002\u0262\u0265\u0003\u0002\u0002\u0002\u0263\u0261\u0003\u0002\u0002\u0002\u0263\u0264\u0003\u0002\u0002\u0002\u0264\u0270\u0003\u0002\u0002\u0002\u0265\u0263\u0003\u0002\u0002\u0002\u0266\u026f\u0005N(\u0002\u0267\u026b\u00077\u0002\u0002\u0268\u026a\u0007P\u0002\u0002\u0269\u0268\u0003\u0002\u0002\u0002\u026a\u026d\u0003\u0002\u0002\u0002\u026b\u0269\u0003\u0002\u0002\u0002\u026b\u026c\u0003\u0002\u0002\u0002\u026c\u026f\u0003\u0002\u0002\u0002\u026d\u026b\u0003\u0002\u0002\u0002\u026e\u0266\u0003\u0002\u0002\u0002\u026e\u0267\u0003\u0002\u0002\u0002\u026f\u0272\u0003\u0002\u0002\u0002\u0270\u026e\u0003\u0002\u0002\u0002\u0270\u0271\u0003\u0002\u0002\u0002\u0271\u0273\u0003\u0002\u0002\u0002\u0272\u0270\u0003\u0002\u0002\u0002\u0273\u0280\u0007E\u0002\u0002\u0274\u0278\u0007T\u0002\u0002\u0275\u0277\u0007P\u0002\u0002\u0276\u0275\u0003\u0002\u0002\u0002\u0277\u027a\u0003\u0002\u0002\u0002\u0278\u0276\u0003\u0002\u0002\u0002\u0278\u0279\u0003\u0002\u0002\u0002\u0279\u027c\u0003\u0002\u0002\u0002\u027a\u0278\u0003\u0002\u0002\u0002\u027b\u027d\u00058\u001d\u0002\u027c\u027b\u0003\u0002\u0002\u0002\u027c\u027d\u0003\u0002\u0002\u0002\u027d\u027e\u0003\u0002\u0002\u0002\u027e\u0280\u0007E\u0002\u0002\u027f\u025f\u0003\u0002\u0002\u0002\u027f\u0274\u0003\u0002\u0002\u0002\u02805\u0003\u0002\u0002\u0002\u0281\u0283\u0007J\u0002\u0002\u0282\u0281\u0003\u0002\u0002\u0002\u0282\u0283\u0003\u0002\u0002\u0002\u0283\u0284\u0003\u0002\u0002\u0002\u0284\u02b0\u0007 \u0002\u0002\u0285\u0287\t\u0003\u0002\u0002\u0286\u0285\u0003\u0002\u0002\u0002\u0286\u0287\u0003\u0002\u0002\u0002\u0287\u0288\u0003\u0002\u0002\u0002\u0288\u02b0\u0007/\u0002\u0002\u0289\u028b\t\u0003\u0002\u0002\u028a\u0289\u0003\u0002\u0002\u0002\u028a\u028b\u0003\u0002\u0002\u0002\u028b\u028c\u0003\u0002\u0002\u0002\u028c\u02b0\u00070\u0002\u0002\u028d\u028f\t\u0003\u0002\u0002\u028e\u028d\u0003\u0002\u0002\u0002\u028e\u028f\u0003\u0002\u0002\u0002\u028f\u0290\u0003\u0002\u0002\u0002\u0290\u02b0\u00071\u0002\u0002\u0291\u02b0\u0005H%\u0002\u0292\u02b0\u00072\u0002\u0002\u0293\u02b0\u00073\u0002\u0002\u0294\u02b0\u0007-\u0002\u0002\u0295\u0297\t\u0003\u0002\u0002\u0296\u0295\u0003\u0002\u0002\u0002\u0296\u0297\u0003\u0002\u0002\u0002\u0297\u0298\u0003\u0002\u0002\u0002\u0298\u02b0\u00054\u001b\u0002\u0299\u02b0\u00079\u0002\u0002\u029a\u02b0\u0007=\u0002\u0002\u029b\u02b0\u0005J&\u0002\u029c\u02b0\u0007*\u0002\u0002\u029d\u02b0\u00074\u0002\u0002\u029e\u02b0\u0007U\u0002\u0002\u029f\u02b0\u00078\u0002\u0002\u02a0\u02b0\u0007>\u0002\u0002\u02a1\u02b0\u0007?\u0002\u0002\u02a2\u02b0\u0007:\u0002\u0002\u02a3\u02b0\u0007;\u0002\u0002\u02a4\u02b0\u0007<\u0002\u0002\u02a5\u02b0\u0007L\u0002\u0002\u02a6\u02b0\u0007V\u0002\u0002\u02a7\u02ab\u0007D\u0002\u0002\u02a8\u02aa\u00056\u001c\u0002\u02a9\u02a8\u0003\u0002\u0002\u0002\u02aa\u02ad\u0003\u0002\u0002\u0002\u02ab\u02a9\u0003\u0002\u0002\u0002\u02ab\u02ac\u0003\u0002\u0002\u0002\u02ac\u02ae\u0003\u0002\u0002\u0002\u02ad\u02ab\u0003\u0002\u0002\u0002\u02ae\u02b0\u0007E\u0002\u0002\u02af\u0282\u0003\u0002\u0002\u0002\u02af\u0286\u0003\u0002\u0002\u0002\u02af\u028a\u0003\u0002\u0002\u0002\u02af\u028e\u0003\u0002\u0002\u0002\u02af\u0291\u0003\u0002\u0002\u0002\u02af\u0292\u0003\u0002\u0002\u0002\u02af\u0293\u0003\u0002\u0002\u0002\u02af\u0294\u0003\u0002\u0002\u0002\u02af\u0296\u0003\u0002\u0002\u0002\u02af\u0299\u0003\u0002\u0002\u0002\u02af\u029a\u0003\u0002\u0002\u0002\u02af\u029b\u0003\u0002\u0002\u0002\u02af\u029c\u0003\u0002\u0002\u0002\u02af\u029d\u0003\u0002\u0002\u0002\u02af\u029e\u0003\u0002\u0002\u0002\u02af\u029f\u0003\u0002\u0002\u0002\u02af\u02a0\u0003\u0002\u0002\u0002\u02af\u02a1\u0003\u0002\u0002\u0002\u02af\u02a2\u0003\u0002\u0002\u0002\u02af\u02a3\u0003\u0002\u0002\u0002\u02af\u02a4\u0003\u0002\u0002\u0002\u02af\u02a5\u0003\u0002\u0002\u0002\u02af\u02a6\u0003\u0002\u0002\u0002\u02af\u02a7\u0003\u0002\u0002\u0002\u02b0\u02b4\u0003\u0002\u0002\u0002\u02b1\u02b3\u0007P\u0002\u0002\u02b2\u02b1\u0003\u0002\u0002\u0002\u02b3\u02b6\u0003\u0002\u0002\u0002\u02b4\u02b2\u0003\u0002\u0002\u0002\u02b4\u02b5\u0003\u0002\u0002\u0002\u02b57\u0003\u0002\u0002\u0002\u02b6\u02b4\u0003\u0002\u0002\u0002\u02b7\u02b9\u0005:\u001e\u0002\u02b8\u02b7\u0003\u0002\u0002\u0002\u02b9\u02ba\u0003\u0002\u0002\u0002\u02ba\u02b8\u0003\u0002\u0002\u0002\u02ba\u02bb\u0003\u0002\u0002\u0002\u02bb9\u0003\u0002\u0002\u0002\u02bc\u02d5\u0007 \u0002\u0002\u02bd\u02d5\u0007K\u0002\u0002\u02be\u02d5\u0007J\u0002\u0002\u02bf\u02d5\u0007L\u0002\u0002\u02c0\u02d5\u0007=\u0002\u0002\u02c1\u02d5\u0007D\u0002\u0002\u02c2\u02d5\u0007E\u0002\u0002\u02c3\u02d5\u0007/\u0002\u0002\u02c4\u02d5\u00070\u0002\u0002\u02c5\u02d5\u00071\u0002\u0002\u02c6\u02d5\u0007-\u0002\u0002\u02c7\u02d5\u0005H%\u0002\u02c8\u02d5\u00054\u001b\u0002\u02c9\u02d5\u00079\u0002\u0002\u02ca\u02d5\u0007*\u0002\u0002\u02cb\u02d5\u00074\u0002\u0002\u02cc\u02d5\u0007U\u0002\u0002\u02cd\u02d5\u00078\u0002\u0002\u02ce\u02d5\u0007>\u0002\u0002\u02cf\u02d5\u0007?\u0002\u0002\u02d0\u02d5\u0007:\u0002\u0002\u02d1\u02d5\u0007;\u0002\u0002\u02d2\u02d5\u0007<\u0002\u0002\u02d3\u02d5\u0007V\u0002\u0002\u02d4\u02bc\u0003\u0002\u0002\u0002\u02d4\u02bd\u0003\u0002\u0002\u0002\u02d4\u02be\u0003\u0002\u0002\u0002\u02d4\u02bf\u0003\u0002\u0002\u0002\u02d4\u02c0\u0003\u0002\u0002\u0002\u02d4\u02c1\u0003\u0002\u0002\u0002\u02d4\u02c2\u0003\u0002\u0002\u0002\u02d4\u02c3\u0003\u0002\u0002\u0002\u02d4\u02c4\u0003\u0002\u0002\u0002\u02d4\u02c5\u0003\u0002\u0002\u0002\u02d4\u02c6\u0003\u0002\u0002\u0002\u02d4\u02c7\u0003\u0002\u0002\u0002\u02d4\u02c8\u0003\u0002\u0002\u0002\u02d4\u02c9\u0003\u0002\u0002\u0002\u02d4\u02ca\u0003\u0002\u0002\u0002\u02d4\u02cb\u0003\u0002\u0002\u0002\u02d4\u02cc\u0003\u0002\u0002\u0002\u02d4\u02cd\u0003\u0002\u0002\u0002\u02d4\u02ce\u0003\u0002\u0002\u0002\u02d4\u02cf\u0003\u0002\u0002\u0002\u02d4\u02d0\u0003\u0002\u0002\u0002\u02d4\u02d1\u0003\u0002\u0002\u0002\u02d4\u02d2\u0003\u0002\u0002\u0002\u02d4\u02d3\u0003\u0002\u0002\u0002\u02d5\u02d9\u0003\u0002\u0002\u0002\u02d6\u02d8\u0007P\u0002\u0002\u02d7\u02d6\u0003\u0002\u0002\u0002\u02d8\u02db\u0003\u0002\u0002\u0002\u02d9\u02d7\u0003\u0002\u0002\u0002\u02d9\u02da\u0003\u0002\u0002\u0002\u02da;\u0003\u0002\u0002\u0002\u02db\u02d9\u0003\u0002\u0002\u0002\u02dc\u02e2\u0005@!\u0002\u02dd\u02de\u0005> \u0002\u02de\u02df\u0005@!\u0002\u02df\u02e1\u0003\u0002\u0002\u0002\u02e0\u02dd\u0003\u0002\u0002\u0002\u02e1\u02e4\u0003\u0002\u0002\u0002\u02e2\u02e0\u0003\u0002\u0002\u0002\u02e2\u02e3\u0003\u0002\u0002\u0002\u02e3=\u0003\u0002\u0002\u0002\u02e4\u02e2\u0003\u0002\u0002\u0002\u02e5\u02e9\u0007>\u0002\u0002\u02e6\u02e8\u0007P\u0002\u0002\u02e7\u02e6\u0003\u0002\u0002\u0002\u02e8\u02eb\u0003\u0002\u0002\u0002\u02e9\u02e7\u0003\u0002\u0002\u0002\u02e9\u02ea\u0003\u0002\u0002\u0002\u02ea\u02fc\u0003\u0002\u0002\u0002\u02eb\u02e9\u0003\u0002\u0002\u0002\u02ec\u02f0\u0007K\u0002\u0002\u02ed\u02ef\u0007P\u0002\u0002\u02ee\u02ed\u0003\u0002\u0002\u0002\u02ef\u02f2\u0003\u0002\u0002\u0002\u02f0\u02ee\u0003\u0002\u0002\u0002\u02f0\u02f1\u0003\u0002\u0002\u0002\u02f1\u02fc\u0003\u0002\u0002\u0002\u02f2\u02f0\u0003\u0002\u0002\u0002\u02f3\u02f7\u0007I\u0002\u0002\u02f4\u02f6\u0007P\u0002\u0002\u02f5\u02f4\u0003\u0002\u0002\u0002\u02f6\u02f9\u0003\u0002\u0002\u0002\u02f7\u02f5\u0003\u0002\u0002\u0002\u02f7\u02f8\u0003\u0002\u0002\u0002\u02f8\u02fc\u0003\u0002\u0002\u0002\u02f9\u02f7\u0003\u0002\u0002\u0002\u02fa\u02fc\u0007P\u0002\u0002\u02fb\u02e5\u0003\u0002\u0002\u0002\u02fb\u02ec\u0003\u0002\u0002\u0002\u02fb\u02f3\u0003\u0002\u0002\u0002\u02fb\u02fa\u0003\u0002\u0002\u0002\u02fc?\u0003\u0002\u0002\u0002\u02fd\u0301\t\u0004\u0002\u0002\u02fe\u0300\u0005B\"\u0002\u02ff\u02fe\u0003\u0002\u0002\u0002\u0300\u0303\u0003\u0002\u0002\u0002\u0301\u02ff\u0003\u0002\u0002\u0002\u0301\u0302\u0003\u0002\u0002\u0002\u0302\u0307\u0003\u0002\u0002\u0002\u0303\u0301\u0003\u0002\u0002\u0002\u0304\u0306\u0007P\u0002\u0002\u0305\u0304\u0003\u0002\u0002\u0002\u0306\u0309\u0003\u0002\u0002\u0002\u0307\u0305\u0003\u0002\u0002\u0002\u0307\u0308\u0003\u0002\u0002\u0002\u0308\u0316\u0003\u0002\u0002\u0002\u0309\u0307\u0003\u0002\u0002\u0002\u030a\u030c\u0005B\"\u0002\u030b\u030a\u0003\u0002\u0002\u0002\u030c\u030d\u0003\u0002\u0002\u0002\u030d\u030b\u0003\u0002\u0002\u0002\u030d\u030e\u0003\u0002\u0002\u0002\u030e\u0312\u0003\u0002\u0002\u0002\u030f\u0311\u0007P\u0002\u0002\u0310\u030f\u0003\u0002\u0002\u0002\u0311\u0314\u0003\u0002\u0002\u0002\u0312\u0310\u0003\u0002\u0002\u0002\u0312\u0313\u0003\u0002\u0002\u0002\u0313\u0316\u0003\u0002\u0002\u0002\u0314\u0312\u0003\u0002\u0002\u0002\u0315\u02fd\u0003\u0002\u0002\u0002\u0315\u030b\u0003\u0002\u0002\u0002\u0316A\u0003\u0002\u0002\u0002\u0317\u0326\u0007-\u0002\u0002\u0318\u0326\u0007*\u0002\u0002\u0319\u031d\u0007F\u0002\u0002\u031a\u031c\u0007P\u0002\u0002\u031b\u031a\u0003\u0002\u0002\u0002\u031c\u031f\u0003\u0002\u0002\u0002\u031d\u031b\u0003\u0002\u0002\u0002\u031d\u031e\u0003\u0002\u0002\u0002\u031e\u0320\u0003\u0002\u0002\u0002\u031f\u031d\u0003\u0002\u0002\u0002\u0320\u0321\u0005D#\u0002\u0321\u0322\u0007G\u0002\u0002\u0322\u0326\u0003\u0002\u0002\u0002\u0323\u0326\u0005F$\u0002\u0324\u0326\u0007\u0019\u0002\u0002\u0325\u0317\u0003\u0002\u0002\u0002\u0325\u0318\u0003\u0002\u0002\u0002\u0325\u0319\u0003\u0002\u0002\u0002\u0325\u0323\u0003\u0002\u0002\u0002\u0325\u0324\u0003\u0002\u0002\u0002\u0326C\u0003\u0002\u0002\u0002\u0327\u032b\u0007 \u0002\u0002\u0328\u032a\u0007P\u0002\u0002\u0329\u0328\u0003\u0002\u0002\u0002\u032a\u032d\u0003\u0002\u0002\u0002\u032b\u0329\u0003\u0002\u0002\u0002\u032b\u032c\u0003\u0002\u0002\u0002\u032c\u033f\u0003\u0002\u0002\u0002\u032d\u032b\u0003\u0002\u0002\u0002\u032e\u0332\t\u0005\u0002\u0002\u032f\u0331\u0007P\u0002\u0002\u0330\u032f\u0003\u0002\u0002\u0002\u0331\u0334\u0003\u0002\u0002\u0002\u0332\u0330\u0003\u0002\u0002\u0002\u0332\u0333\u0003\u0002\u0002\u0002\u0333\u0337\u0003\u0002\u0002\u0002\u0334\u0332\u0003\u0002\u0002\u0002\u0335\u0338\u0007 \u0002\u0002\u0336\u0338\u0005H%\u0002\u0337\u0335\u0003\u0002\u0002\u0002\u0337\u0336\u0003\u0002\u0002\u0002\u0338\u033c\u0003\u0002\u0002\u0002\u0339\u033b\u0007P\u0002\u0002\u033a\u0339\u0003\u0002\u0002\u0002\u033b\u033e\u0003\u0002\u0002\u0002\u033c\u033a\u0003\u0002\u0002\u0002\u033c\u033d\u0003\u0002\u0002\u0002\u033d\u0340\u0003\u0002\u0002\u0002\u033e\u033c\u0003\u0002\u0002\u0002\u033f\u032e\u0003\u0002\u0002\u0002\u033f\u0340\u0003\u0002\u0002\u0002\u0340E\u0003\u0002\u0002\u0002\u0341\u0343\u00078\u0002\u0002\u0342\u0344\u00078\u0002\u0002\u0343\u0342\u0003\u0002\u0002\u0002\u0343\u0344\u0003\u0002\u0002\u0002\u0344\u0366\u0003\u0002\u0002\u0002\u0345\u0347\u0007J\u0002\u0002\u0346\u0345\u0003\u0002\u0002\u0002\u0346\u0347\u0003\u0002\u0002\u0002\u0347\u0348\u0003\u0002\u0002\u0002\u0348\u0367\u0007 \u0002\u0002\u0349\u034d\u0007T\u0002\u0002\u034a\u034c\u0007P\u0002\u0002\u034b\u034a\u0003\u0002\u0002\u0002\u034c\u034f\u0003\u0002\u0002\u0002\u034d\u034b\u0003\u0002\u0002\u0002\u034d\u034e\u0003\u0002\u0002\u0002\u034e\u035d\u0003\u0002\u0002\u0002\u034f\u034d\u0003\u0002\u0002\u0002\u0350\u0352\u0007J\u0002\u0002\u0351\u0350\u0003\u0002\u0002\u0002\u0351\u0352\u0003\u0002\u0002\u0002\u0352\u0353\u0003\u0002\u0002\u0002\u0353\u035e\u0007 \u0002\u0002\u0354\u0356\u0007J\u0002\u0002\u0355\u0354\u0003\u0002\u0002\u0002\u0355\u0356\u0003\u0002\u0002\u0002\u0356\u0357\u0003\u0002\u0002\u0002\u0357\u035e\u0007/\u0002\u0002\u0358\u035a\u0007J\u0002\u0002\u0359\u0358\u0003\u0002\u0002\u0002\u0359\u035a\u0003\u0002\u0002\u0002\u035a\u035b\u0003\u0002\u0002\u0002\u035b\u035e\u0007.\u0002\u0002\u035c\u035e\u0005@!\u0002\u035d\u0351\u0003\u0002\u0002\u0002\u035d\u0355\u0003\u0002\u0002\u0002\u035d\u0359\u0003\u0002\u0002\u0002\u035d\u035c\u0003\u0002\u0002\u0002\u035e\u0362\u0003\u0002\u0002\u0002\u035f\u0361\u0007P\u0002\u0002\u0360\u035f\u0003\u0002\u0002\u0002\u0361\u0364\u0003\u0002\u0002\u0002\u0362\u0360\u0003\u0002\u0002\u0002\u0362\u0363\u0003\u0002\u0002\u0002\u0363\u0365\u0003\u0002\u0002\u0002\u0364\u0362\u0003\u0002\u0002\u0002\u0365\u0367\u0007E\u0002\u0002\u0366\u0346\u0003\u0002\u0002\u0002\u0366\u0349\u0003\u0002\u0002\u0002\u0367G\u0003\u0002\u0002\u0002\u0368\u0369\t\u0006\u0002\u0002\u0369I\u0003\u0002\u0002\u0002\u036a\u036e\u0007F\u0002\u0002\u036b\u036d\u0007P\u0002\u0002\u036c\u036b\u0003\u0002\u0002\u0002\u036d\u0370\u0003\u0002\u0002\u0002\u036e\u036c\u0003\u0002\u0002\u0002\u036e\u036f\u0003\u0002\u0002\u0002\u036f\u0374\u0003\u0002\u0002\u0002\u0370\u036e\u0003\u0002\u0002\u0002\u0371\u0373\u0005L'\u0002\u0372\u0371\u0003\u0002\u0002\u0002\u0373\u0376\u0003\u0002\u0002\u0002\u0374\u0372\u0003\u0002\u0002\u0002\u0374\u0375\u0003\u0002\u0002\u0002\u0375\u0377\u0003\u0002\u0002\u0002\u0376\u0374\u0003\u0002\u0002\u0002\u0377\u037a\u0007G\u0002\u0002\u0378\u037a\u0007\u001b\u0002\u0002\u0379\u036a\u0003\u0002\u0002\u0002\u0379\u0378\u0003\u0002\u0002\u0002\u037aK\u0003\u0002\u0002\u0002\u037b\u037d\u0007J\u0002\u0002\u037c\u037b\u0003\u0002\u0002\u0002\u037c\u037d\u0003\u0002\u0002\u0002\u037d\u037e\u0003\u0002\u0002\u0002\u037e\u0382\u0007 \u0002\u0002\u037f\u0381\u0007P\u0002\u0002\u0380\u037f\u0003\u0002\u0002\u0002\u0381\u0384\u0003\u0002\u0002\u0002\u0382\u0380\u0003\u0002\u0002\u0002\u0382\u0383\u0003\u0002\u0002\u0002\u0383\u0387\u0003\u0002\u0002\u0002\u0384\u0382\u0003\u0002\u0002\u0002\u0385\u0387\u0007\u001b\u0002\u0002\u0386\u037c\u0003\u0002\u0002\u0002\u0386\u0385\u0003\u0002\u0002\u0002\u0387M\u0003\u0002\u0002\u0002\u0388\u03bf\u0007 \u0002\u0002\u0389\u03bf\u0007*\u0002\u0002\u038a\u03bf\u0007/\u0002\u0002\u038b\u03bf\u00070\u0002\u0002\u038c\u03bf\u00071\u0002\u0002\u038d\u03bf\u0005H%\u0002\u038e\u03bf\u00072\u0002\u0002\u038f\u03bf\u00073\u0002\u0002\u0390\u03bf\u0007-\u0002\u0002\u0391\u03bf\u00074\u0002\u0002\u0392\u03bf\u0007U\u0002\u0002\u0393\u03bf\u00078\u0002\u0002\u0394\u03bf\u00079\u0002\u0002\u0395\u03bf\u0007>\u0002\u0002\u0396\u03bf\u0007?\u0002\u0002\u0397\u03bf\u0007:\u0002\u0002\u0398\u03bf\u0007;\u0002\u0002\u0399\u03bf\u0007<\u0002\u0002\u039a\u03bf\u0007=\u0002\u0002\u039b\u03bf\u0007H\u0002\u0002\u039c\u03bf\u0007J\u0002\u0002\u039d\u03bf\u0007K\u0002\u0002\u039e\u03bf\u0007L\u0002\u0002\u039f\u03a3\u0007T\u0002\u0002\u03a0\u03a2\u0007P\u0002\u0002\u03a1\u03a0\u0003\u0002\u0002\u0002\u03a2\u03a5\u0003\u0002\u0002\u0002\u03a3\u03a1\u0003\u0002\u0002\u0002\u03a3\u03a4\u0003\u0002\u0002\u0002\u03a4\u03a9\u0003\u0002\u0002\u0002\u03a5\u03a3\u0003\u0002\u0002\u0002\u03a6\u03a8\u0005N(\u0002\u03a7\u03a6\u0003\u0002\u0002\u0002\u03a8\u03ab\u0003\u0002\u0002\u0002\u03a9\u03a7\u0003\u0002\u0002\u0002\u03a9\u03aa\u0003\u0002\u0002\u0002\u03aa\u03ac\u0003\u0002\u0002\u0002\u03ab\u03a9\u0003\u0002\u0002\u0002\u03ac\u03bf\u0007E\u0002\u0002\u03ad\u03bf\u0007V\u0002\u0002\u03ae\u03b2\u0007D\u0002\u0002\u03af\u03b1\u0005N(\u0002\u03b0\u03af\u0003\u0002\u0002\u0002\u03b1\u03b4\u0003\u0002\u0002\u0002\u03b2\u03b0\u0003\u0002\u0002\u0002\u03b2\u03b3\u0003\u0002\u0002\u0002\u03b3\u03b5\u0003\u0002\u0002\u0002\u03b4\u03b2\u0003\u0002\u0002\u0002\u03b5\u03bf\u0007E\u0002\u0002\u03b6\u03ba\u0007F\u0002\u0002\u03b7\u03b9\u0005N(\u0002\u03b8\u03b7\u0003\u0002\u0002\u0002\u03b9\u03bc\u0003\u0002\u0002\u0002\u03ba\u03b8\u0003\u0002\u0002\u0002\u03ba\u03bb\u0003\u0002\u0002\u0002\u03bb\u03bd\u0003\u0002\u0002\u0002\u03bc\u03ba\u0003\u0002\u0002\u0002\u03bd\u03bf\u0007G\u0002\u0002\u03be\u0388\u0003\u0002\u0002\u0002\u03be\u0389\u0003\u0002\u0002\u0002\u03be\u038a\u0003\u0002\u0002\u0002\u03be\u038b\u0003\u0002\u0002\u0002\u03be\u038c\u0003\u0002\u0002\u0002\u03be\u038d\u0003\u0002\u0002\u0002\u03be\u038e\u0003\u0002\u0002\u0002\u03be\u038f\u0003\u0002\u0002\u0002\u03be\u0390\u0003\u0002\u0002\u0002\u03be\u0391\u0003\u0002\u0002\u0002\u03be\u0392\u0003\u0002\u0002\u0002\u03be\u0393\u0003\u0002\u0002\u0002\u03be\u0394\u0003\u0002\u0002\u0002\u03be\u0395\u0003\u0002\u0002\u0002\u03be\u0396\u0003\u0002\u0002\u0002\u03be\u0397\u0003\u0002\u0002\u0002\u03be\u0398\u0003\u0002\u0002\u0002\u03be\u0399\u0003\u0002\u0002\u0002\u03be\u039a\u0003\u0002\u0002\u0002\u03be\u039b\u0003\u0002\u0002\u0002\u03be\u039c\u0003\u0002\u0002\u0002\u03be\u039d\u0003\u0002\u0002\u0002\u03be\u039e\u0003\u0002\u0002\u0002\u03be\u039f\u0003\u0002\u0002\u0002\u03be\u03ad\u0003\u0002\u0002\u0002\u03be\u03ae\u0003\u0002\u0002\u0002\u03be\u03b6\u0003\u0002\u0002\u0002\u03bf\u03c3\u0003\u0002\u0002\u0002\u03c0\u03c2\u0007P\u0002\u0002\u03c1\u03c0\u0003\u0002\u0002\u0002\u03c2\u03c5\u0003\u0002\u0002\u0002\u03c3\u03c1\u0003\u0002\u0002\u0002\u03c3\u03c4\u0003\u0002\u0002\u0002\u03c4O\u0003\u0002\u0002\u0002\u03c5\u03c3\u0003\u0002\u0002\u0002\u03c6\u03c7\t\u0007\u0002\u0002\u03c7Q\u0003\u0002\u0002\u0002\u03c8\u03e1\u0007*\u0002\u0002\u03c9\u03e1\u0007/\u0002\u0002\u03ca\u03e1\u00070\u0002\u0002\u03cb\u03e1\u00071\u0002\u0002\u03cc\u03e1\u0005H%\u0002\u03cd\u03e1\u00079\u0002\u0002\u03ce\u03e1\u0007-\u0002\u0002\u03cf\u03e1\u00072\u0002\u0002\u03d0\u03e1\u00073\u0002\u0002\u03d1\u03e1\u0007>\u0002\u0002\u03d2\u03e1\u0007?\u0002\u0002\u03d3\u03e1\u0007:\u0002\u0002\u03d4\u03e1\u0007;\u0002\u0002\u03d5\u03e1\u0007<\u0002\u0002\u03d6\u03e1\u0007=\u0002\u0002\u03d7\u03e1\u0007H\u0002\u0002\u03d8\u03e1\u0007K\u0002\u0002\u03d9\u03e1\u0007L\u0002\u0002\u03da\u03e1\u0007V\u0002\u0002\u03db\u03e1\u0007U\u0002\u0002\u03dc\u03e1\u00078\u0002\u0002\u03dd\u03e1\u0007^\u0002\u0002\u03de\u03e1\u0007Z\u0002\u0002\u03df\u03e1\u0007[\u0002\u0002\u03e0\u03c8\u0003\u0002\u0002\u0002\u03e0\u03c9\u0003\u0002\u0002\u0002\u03e0\u03ca\u0003\u0002\u0002\u0002\u03e0\u03cb\u0003\u0002\u0002\u0002\u03e0\u03cc\u0003\u0002\u0002\u0002\u03e0\u03cd\u0003\u0002\u0002\u0002\u03e0\u03ce\u0003\u0002\u0002\u0002\u03e0\u03cf\u0003\u0002\u0002\u0002\u03e0\u03d0\u0003\u0002\u0002\u0002\u03e0\u03d1\u0003\u0002\u0002\u0002\u03e0\u03d2\u0003\u0002\u0002\u0002\u03e0\u03d3\u0003\u0002\u0002\u0002\u03e0\u03d4\u0003\u0002\u0002\u0002\u03e0\u03d5\u0003\u0002\u0002\u0002\u03e0\u03d6\u0003\u0002\u0002\u0002\u03e0\u03d7\u0003\u0002\u0002\u0002\u03e0\u03d8\u0003\u0002\u0002\u0002\u03e0\u03d9\u0003\u0002\u0002\u0002\u03e0\u03da\u0003\u0002\u0002\u0002\u03e0\u03db\u0003\u0002\u0002\u0002\u03e0\u03dc\u0003\u0002\u0002\u0002\u03e0\u03dd\u0003\u0002\u0002\u0002\u03e0\u03de\u0003\u0002\u0002\u0002\u03e0\u03df\u0003\u0002\u0002\u0002\u03e1\u03e5\u0003\u0002\u0002\u0002\u03e2\u03e4\u0007P\u0002\u0002\u03e3\u03e2\u0003\u0002\u0002\u0002\u03e4\u03e7\u0003\u0002\u0002\u0002\u03e5\u03e3\u0003\u0002\u0002\u0002\u03e5\u03e6\u0003\u0002\u0002\u0002\u03e6S\u0003\u0002\u0002\u0002\u03e7\u03e5\u0003\u0002\u0002\u0002\u03e8\u0402\u0007/\u0002\u0002\u03e9\u0402\u00070\u0002\u0002\u03ea\u0402\u00071\u0002\u0002\u03eb\u0402\u0005H%\u0002\u03ec\u0402\u00072\u0002\u0002\u03ed\u0402\u00073\u0002\u0002\u03ee\u0402\u00074\u0002\u0002\u03ef\u0402\u0007U\u0002\u0002\u03f0\u0402\u00079\u0002\u0002\u03f1\u0402\u0007>\u0002\u0002\u03f2\u0402\u0007?\u0002\u0002\u03f3\u0402\u0007:\u0002\u0002\u03f4\u0402\u0007;\u0002\u0002\u03f5\u0402\u0007<\u0002\u0002\u03f6\u0402\u0007=\u0002\u0002\u03f7\u0402\u0007H\u0002\u0002\u03f8\u0402\u0007J\u0002\u0002\u03f9\u0402\u0007K\u0002\u0002\u03fa\u0402\u0007V\u0002\u0002\u03fb\u0402\u0007E\u0002\u0002\u03fc\u0402\u0007Z\u0002\u0002\u03fd\u0402\u0007M\u0002\u0002\u03fe\u0402\u0007O\u0002\u0002\u03ff\u0402\u0007N\u0002\u0002\u0400\u0402\u0007[\u0002\u0002\u0401\u03e8\u0003\u0002\u0002\u0002\u0401\u03e9\u0003\u0002\u0002\u0002\u0401\u03ea\u0003\u0002\u0002\u0002\u0401\u03eb\u0003\u0002\u0002\u0002\u0401\u03ec\u0003\u0002\u0002\u0002\u0401\u03ed\u0003\u0002\u0002\u0002\u0401\u03ee\u0003\u0002\u0002\u0002\u0401\u03ef\u0003\u0002\u0002\u0002\u0401\u03f0\u0003\u0002\u0002\u0002\u0401\u03f1\u0003\u0002\u0002\u0002\u0401\u03f2\u0003\u0002\u0002\u0002\u0401\u03f3\u0003\u0002\u0002\u0002\u0401\u03f4\u0003\u0002\u0002\u0002\u0401\u03f5\u0003\u0002\u0002\u0002\u0401\u03f6\u0003\u0002\u0002\u0002\u0401\u03f7\u0003\u0002\u0002\u0002\u0401\u03f8\u0003\u0002\u0002\u0002\u0401\u03f9\u0003\u0002\u0002\u0002\u0401\u03fa\u0003\u0002\u0002\u0002\u0401\u03fb\u0003\u0002\u0002\u0002\u0401\u03fc\u0003\u0002\u0002\u0002\u0401\u03fd\u0003\u0002\u0002\u0002\u0401\u03fe\u0003\u0002\u0002\u0002\u0401\u03ff\u0003\u0002\u0002\u0002\u0401\u0400\u0003\u0002\u0002\u0002\u0402U\u0003\u0002\u0002\u0002\u0403\u041e\u0007/\u0002\u0002\u0404\u041e\u00070\u0002\u0002\u0405\u041e\u00071\u0002\u0002\u0406\u041e\u0005H%\u0002\u0407\u041e\u00072\u0002\u0002\u0408\u041e\u00073\u0002\u0002\u0409\u041e\u00074\u0002\u0002\u040a\u041e\u0007U\u0002\u0002\u040b\u041e\u0007>\u0002\u0002\u040c\u041e\u0007?\u0002\u0002\u040d\u041e\u0007:\u0002\u0002\u040e\u041e\u0007;\u0002\u0002\u040f\u041e\u0007<\u0002\u0002\u0410\u041e\u0007=\u0002\u0002\u0411\u041e\u0007H\u0002\u0002\u0412\u041e\u0007J\u0002\u0002\u0413\u041e\u0007K\u0002\u0002\u0414\u041e\u0007V\u0002\u0002\u0415\u041e\u0007E\u0002\u0002\u0416\u041e\u0007Z\u0002\u0002\u0417\u041e\u00078\u0002\u0002\u0418\u041e\u0007L\u0002\u0002\u0419\u041e\u0007T\u0002\u0002\u041a\u041e\u0007M\u0002\u0002\u041b\u041e\u0007O\u0002\u0002\u041c\u041e\u0007N\u0002\u0002\u041d\u0403\u0003\u0002\u0002\u0002\u041d\u0404\u0003\u0002\u0002\u0002\u041d\u0405\u0003\u0002\u0002\u0002\u041d\u0406\u0003\u0002\u0002\u0002\u041d\u0407\u0003\u0002\u0002\u0002\u041d\u0408\u0003\u0002\u0002\u0002\u041d\u0409\u0003\u0002\u0002\u0002\u041d\u040a\u0003\u0002\u0002\u0002\u041d\u040b\u0003\u0002\u0002\u0002\u041d\u040c\u0003\u0002\u0002\u0002\u041d\u040d\u0003\u0002\u0002\u0002\u041d\u040e\u0003\u0002\u0002\u0002\u041d\u040f\u0003\u0002\u0002\u0002\u041d\u0410\u0003\u0002\u0002\u0002\u041d\u0411\u0003\u0002\u0002\u0002\u041d\u0412\u0003\u0002\u0002\u0002\u041d\u0413\u0003\u0002\u0002\u0002\u041d\u0414\u0003\u0002\u0002\u0002\u041d\u0415\u0003\u0002\u0002\u0002\u041d\u0416\u0003\u0002\u0002\u0002\u041d\u0417\u0003\u0002\u0002\u0002\u041d\u0418\u0003\u0002\u0002\u0002\u041d\u0419\u0003\u0002\u0002\u0002\u041d\u041a\u0003\u0002\u0002\u0002\u041d\u041b\u0003\u0002\u0002\u0002\u041d\u041c\u0003\u0002\u0002\u0002\u041eW\u0003\u0002\u0002\u0002\u0095[bdkmry\u0080\u0084\u008d\u0094\u009e\u00a5\u00af\u00b3\u00b9\u00c0\u00c5\u00cd\u00d4\u00db\u00e2\u00e7\u00ed\u00f5\u00f9\u00fc\u0101\u0108\u010f\u0118\u011f\u0127\u012e\u0135\u013c\u0141\u0144\u014f\u0155\u015c\u0161\u0165\u0168\u016e\u0175\u017c\u0180\u0186\u018a\u0191\u0197\u019e\u01a8\u01af\u01b2\u01b8\u01be\u01c6\u01cc\u01d0\u01d6\u01e0\u01e6\u01e9\u01ef\u01f8\u01fb\u0201\u0205\u0209\u0211\u0215\u0218\u021e\u0221\u0227\u022e\u0232\u0238\u023e\u0245\u024d\u0250\u0252\u025a\u025d\u0263\u026b\u026e\u0270\u0278\u027c\u027f\u0282\u0286\u028a\u028e\u0296\u02ab\u02af\u02b4\u02ba\u02d4\u02d9\u02e2\u02e9\u02f0\u02f7\u02fb\u0301\u0307\u030d\u0312\u0315\u031d\u0325\u032b\u0332\u0337\u033c\u033f\u0343\u0346\u034d\u0351\u0355\u0359\u035d\u0362\u0366\u036e\u0374\u0379\u037c\u0382\u0386\u03a3\u03a9\u03b2\u03ba\u03be\u03c3\u03e0\u03e5\u0401\u041d";
    public static final ATN _ATN;

    @Deprecated
    public String[] getTokenNames() {
        return tokenNames;
    }

    public Vocabulary getVocabulary() {
        return VOCABULARY;
    }

    public String getGrammarFileName() {
        return "CSSParser.g4";
    }

    public String[] getRuleNames() {
        return ruleNames;
    }

    public String getSerializedATN() {
        return _serializedATN;
    }

    public ATN getATN() {
        return _ATN;
    }

    private CSSLexerState getCurrentLexerState(Token t) {
        if (t instanceof CSSToken) {
            return ((CSSToken)t).getLexerState();
        }
        return null;
    }

    private CSSErrorStrategy getCSSErrorHandler() {
        if (this._errHandler instanceof CSSErrorStrategy) {
            return (CSSErrorStrategy)this._errHandler;
        }
        this.log.error("ERROR STRATEGY IS NOT OF TYPE CSSErrorStrategy");
        return null;
    }

    public CSSParser(TokenStream input) {
        super(input);
        this._interp = new ParserATNSimulator((Parser)this, _ATN, _decisionToDFA, _sharedContextCache);
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final InlinestyleContext inlinestyle() throws RecognitionException {
        InlinestyleContext _localctx = new InlinestyleContext(this._ctx, this.getState());
        this.enterRule(_localctx, 0, 0);
        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(89);
            this._errHandler.sync((Parser)this);
            int _la = this._input.LA(1);
            while (_la == 78) {
                this.setState(86);
                this.match(78);
                this.setState(91);
                this._errHandler.sync((Parser)this);
                _la = this._input.LA(1);
            }
            this.setState(98);
            this._errHandler.sync((Parser)this);
            switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 2, this._ctx)) {
                case 1: {
                    this.setState(92);
                    this.declarations();
                    return _localctx;
                }
                case 2: {
                    this.setState(94);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                    do {
                        this.setState(93);
                        this.inlineset();
                        this.setState(96);
                        this._errHandler.sync((Parser)this);
                    } while ((_la = this._input.LA(1)) == 54 || _la == 62);
                    return _localctx;
                }
            }
            return _localctx;
        }
        catch (RecognitionException re) {
            this.log.error("Recognition exception | inlinestyle | should be EMPTY");
            return _localctx;
        }
        finally {
            this.exitRule();
        }
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     */
    public final StylesheetContext stylesheet() throws RecognitionException {
        StylesheetContext _localctx = new StylesheetContext(this._ctx, this.getState());
        this.enterRule(_localctx, 2, 1);
        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(107);
            this._errHandler.sync((Parser)this);
            int _la = this._input.LA(1);
            while ((_la & 0xFFFFFFC0) == 0 && (1L << _la & 0xFFFFEFEFC0A00000L) != 0L || (_la - 64 & 0xFFFFFFC0) == 0 && (1L << _la - 64 & 0x3187F5BL) != 0L) {
                this.setState(105);
                switch (this._input.LA(1)) {
                    case 51: {
                        this.setState(100);
                        this.match(51);
                        break;
                    }
                    case 52: {
                        this.setState(101);
                        this.match(52);
                        break;
                    }
                    case 78: {
                        this.setState(102);
                        this.match(78);
                        break;
                    }
                    case 53: 
                    case 63: 
                    case 64: 
                    case 65: {
                        this.setState(103);
                        this.nostatement();
                        break;
                    }
                    case 21: 
                    case 23: 
                    case 30: 
                    case 31: 
                    case 32: 
                    case 33: 
                    case 34: 
                    case 35: 
                    case 37: 
                    case 38: 
                    case 39: 
                    case 40: 
                    case 41: 
                    case 42: 
                    case 43: 
                    case 45: 
                    case 46: 
                    case 47: 
                    case 48: 
                    case 49: 
                    case 50: 
                    case 54: 
                    case 55: 
                    case 56: 
                    case 57: 
                    case 58: 
                    case 59: 
                    case 60: 
                    case 61: 
                    case 62: 
                    case 67: 
                    case 68: 
                    case 70: 
                    case 72: 
                    case 73: 
                    case 74: 
                    case 75: 
                    case 76: 
                    case 77: 
                    case 83: 
                    case 84: 
                    case 88: 
                    case 89: {
                        this.setState(104);
                        this.statement();
                        break;
                    }
                    default: {
                        throw new NoViableAltException((Parser)this);
                    }
                }
                this.setState(109);
                this._errHandler.sync((Parser)this);
                _la = this._input.LA(1);
            }
        }
        catch (RecognitionException re) {
            this.log.error("Recognition exception | stylesheet | should be EMPTY");
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public final StatementContext statement() throws RecognitionException {
        StatementContext _localctx = new StatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 4, 2);
        try {
            this.setState(112);
            switch (this._input.LA(1)) {
                case 21: 
                case 23: 
                case 30: 
                case 40: 
                case 41: 
                case 42: 
                case 43: 
                case 45: 
                case 46: 
                case 47: 
                case 48: 
                case 49: 
                case 50: 
                case 54: 
                case 55: 
                case 56: 
                case 57: 
                case 58: 
                case 59: 
                case 60: 
                case 61: 
                case 62: 
                case 67: 
                case 68: 
                case 70: 
                case 72: 
                case 73: 
                case 74: 
                case 75: 
                case 76: 
                case 77: 
                case 83: 
                case 84: 
                case 88: 
                case 89: {
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(110);
                    this.ruleset();
                    return _localctx;
                }
                case 31: 
                case 32: 
                case 33: 
                case 34: 
                case 35: 
                case 37: 
                case 38: 
                case 39: {
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(111);
                    this.atstatement();
                    return _localctx;
                }
                default: {
                    throw new NoViableAltException((Parser)this);
                }
            }
        }
        catch (RecognitionException re) {
            this.log.error("Recognition exception | statement | should be EMPTY");
            return _localctx;
        }
        finally {
            this.exitRule();
        }
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public final AtstatementContext atstatement() throws RecognitionException {
        AtstatementContext _localctx = new AtstatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 6, 3);
        try {
            this.setState(235);
            switch (this._input.LA(1)) {
                case 31: {
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(114);
                    this.match(31);
                    return _localctx;
                }
                case 32: {
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(115);
                    this.match(32);
                    this.setState(119);
                    this._errHandler.sync((Parser)this);
                    int _la = this._input.LA(1);
                    while (_la == 78) {
                        this.setState(116);
                        this.match(78);
                        this.setState(121);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(122);
                    this.import_uri();
                    this.setState(126);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                    while (_la == 78) {
                        this.setState(123);
                        this.match(78);
                        this.setState(128);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(130);
                    _la = this._input.LA(1);
                    if ((_la & 0xFFFFFFC0) == 0 && (1L << _la & 0x3F47E60040200000L) != 0L || (_la - 66 & 0xFFFFFFC0) == 0 && (1L << _la - 66 & 0x470FD3L) != 0L) {
                        this.setState(129);
                        this.media();
                    }
                    this.setState(132);
                    this.match(53);
                    return _localctx;
                }
                case 35: {
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(134);
                    this.page();
                    return _localctx;
                }
                case 37: {
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(135);
                    this.match(37);
                    this.setState(139);
                    this._errHandler.sync((Parser)this);
                    int _la = this._input.LA(1);
                    while (_la == 78) {
                        this.setState(136);
                        this.match(78);
                        this.setState(141);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(142);
                    this.match(62);
                    this.setState(146);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                    while (_la == 78) {
                        this.setState(143);
                        this.match(78);
                        this.setState(148);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(149);
                    this.declarations();
                    this.setState(150);
                    this.match(63);
                    return _localctx;
                }
                case 38: {
                    this.enterOuterAlt(_localctx, 5);
                    this.setState(152);
                    this.match(38);
                    this.setState(156);
                    this._errHandler.sync((Parser)this);
                    int _la = this._input.LA(1);
                    while (_la == 78) {
                        this.setState(153);
                        this.match(78);
                        this.setState(158);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(159);
                    this.match(62);
                    this.setState(163);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                    while (_la == 78) {
                        this.setState(160);
                        this.match(78);
                        this.setState(165);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(166);
                    this.declarations();
                    this.setState(167);
                    this.match(63);
                    return _localctx;
                }
                case 34: {
                    this.enterOuterAlt(_localctx, 6);
                    this.setState(169);
                    this.match(34);
                    this.setState(173);
                    this._errHandler.sync((Parser)this);
                    int _la = this._input.LA(1);
                    while (_la == 78) {
                        this.setState(170);
                        this.match(78);
                        this.setState(175);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(177);
                    _la = this._input.LA(1);
                    if ((_la & 0xFFFFFFC0) == 0 && (1L << _la & 0x3F47E60040200000L) != 0L || (_la - 66 & 0xFFFFFFC0) == 0 && (1L << _la - 66 & 0x470FD3L) != 0L) {
                        this.setState(176);
                        this.media();
                    }
                    this.setState(179);
                    this.match(62);
                    this.setState(183);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                    while (_la == 78) {
                        this.setState(180);
                        this.match(78);
                        this.setState(185);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(195);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                    while ((_la & 0xFFFFFFC0) == 0 && (1L << _la & 0x7FC7EFEFC0A00000L) != 0L || (_la - 67 & 0xFFFFFFC0) == 0 && (1L << _la - 67 & 0x6307EBL) != 0L) {
                        this.setState(186);
                        this.media_rule();
                        this.setState(190);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                        while (_la == 78) {
                            this.setState(187);
                            this.match(78);
                            this.setState(192);
                            this._errHandler.sync((Parser)this);
                            _la = this._input.LA(1);
                        }
                        this.setState(197);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(198);
                    this.match(63);
                    return _localctx;
                }
                case 33: {
                    this.enterOuterAlt(_localctx, 7);
                    this.setState(199);
                    this.match(33);
                    this.setState(203);
                    this._errHandler.sync((Parser)this);
                    int _la = this._input.LA(1);
                    while (_la == 78) {
                        this.setState(200);
                        this.match(78);
                        this.setState(205);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(206);
                    this.keyframes_name();
                    this.setState(210);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                    while (_la == 78) {
                        this.setState(207);
                        this.match(78);
                        this.setState(212);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(213);
                    this.match(62);
                    this.setState(217);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                    while (_la == 78) {
                        this.setState(214);
                        this.match(78);
                        this.setState(219);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(229);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                    while (_la == 30 || _la == 46) {
                        this.setState(220);
                        this.keyframe_block();
                        this.setState(224);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                        while (_la == 78) {
                            this.setState(221);
                            this.match(78);
                            this.setState(226);
                            this._errHandler.sync((Parser)this);
                            _la = this._input.LA(1);
                        }
                        this.setState(231);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(232);
                    this.match(63);
                    return _localctx;
                }
                case 39: {
                    this.enterOuterAlt(_localctx, 8);
                    this.setState(234);
                    this.unknown_atrule();
                    return _localctx;
                }
                default: {
                    throw new NoViableAltException((Parser)this);
                }
            }
        }
        catch (RecognitionException re) {
            this.log.error("Recognition exception | atstatement consume until RCURLY | SEMICOLON");
            IntervalSet intervalSet = new IntervalSet(new int[]{63, 53});
            this.getCSSErrorHandler().consumeUntilGreedy(this, intervalSet);
            _localctx.addErrorNode(this.getTokenFactory().create(26, "INVALID_ATSTATEMENT"));
            return _localctx;
        }
        finally {
            this.exitRule();
        }
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     */
    public final Import_uriContext import_uri() throws RecognitionException {
        Import_uriContext _localctx = new Import_uriContext(this._ctx, this.getState());
        this.enterRule(_localctx, 8, 4);
        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(237);
            int _la = this._input.LA(1);
            if ((_la & 0xFFFFFFC0) != 0 || (1L << _la & 0x3060000000000L) == 0L) {
                this._errHandler.recoverInline((Parser)this);
            } else {
                this.consume();
            }
        }
        catch (RecognitionException re) {
            this.log.error("Recognition exception | import_uri | should be empty");
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     */
    public final PageContext page() throws RecognitionException {
        PageContext _localctx = new PageContext(this._ctx, this.getState());
        this.enterRule(_localctx, 10, 5);
        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(239);
            this.match(35);
            this.setState(243);
            this._errHandler.sync((Parser)this);
            int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 24, this._ctx);
            while (_alt != 2 && _alt != 0) {
                if (_alt == 1) {
                    this.setState(240);
                    this.match(78);
                }
                this.setState(245);
                this._errHandler.sync((Parser)this);
                _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 24, this._ctx);
            }
            this.setState(247);
            int _la = this._input.LA(1);
            if (_la == 30) {
                this.setState(246);
                this.match(30);
            }
            this.setState(250);
            _la = this._input.LA(1);
            if (_la == 54) {
                this.setState(249);
                this.pseudo();
            }
            this.setState(255);
            this._errHandler.sync((Parser)this);
            _la = this._input.LA(1);
            while (_la == 78) {
                this.setState(252);
                this.match(78);
                this.setState(257);
                this._errHandler.sync((Parser)this);
                _la = this._input.LA(1);
            }
            this.setState(258);
            this.match(62);
            this.setState(262);
            this._errHandler.sync((Parser)this);
            _la = this._input.LA(1);
            while (_la == 78) {
                this.setState(259);
                this.match(78);
                this.setState(264);
                this._errHandler.sync((Parser)this);
                _la = this._input.LA(1);
            }
            this.setState(265);
            this.declarations();
            this.setState(269);
            this._errHandler.sync((Parser)this);
            _la = this._input.LA(1);
            while (_la == 36) {
                this.setState(266);
                this.margin_rule();
                this.setState(271);
                this._errHandler.sync((Parser)this);
                _la = this._input.LA(1);
            }
            this.setState(272);
            this.match(63);
        }
        catch (RecognitionException re) {
            this.log.error("Recognition exception | page | should be empty");
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     */
    public final Margin_ruleContext margin_rule() throws RecognitionException {
        Margin_ruleContext _localctx = new Margin_ruleContext(this._ctx, this.getState());
        this.enterRule(_localctx, 12, 6);
        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(274);
            this.match(36);
            this.setState(278);
            this._errHandler.sync((Parser)this);
            int _la = this._input.LA(1);
            while (_la == 78) {
                this.setState(275);
                this.match(78);
                this.setState(280);
                this._errHandler.sync((Parser)this);
                _la = this._input.LA(1);
            }
            this.setState(281);
            this.match(62);
            this.setState(285);
            this._errHandler.sync((Parser)this);
            _la = this._input.LA(1);
            while (_la == 78) {
                this.setState(282);
                this.match(78);
                this.setState(287);
                this._errHandler.sync((Parser)this);
                _la = this._input.LA(1);
            }
            this.setState(288);
            this.declarations();
            this.setState(289);
            this.match(63);
            this.setState(293);
            this._errHandler.sync((Parser)this);
            _la = this._input.LA(1);
            while (_la == 78) {
                this.setState(290);
                this.match(78);
                this.setState(295);
                this._errHandler.sync((Parser)this);
                _la = this._input.LA(1);
            }
        }
        catch (RecognitionException re) {
            this.log.error("Recognition exception | margin_rule | should be empty");
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     */
    public final InlinesetContext inlineset() throws RecognitionException {
        InlinesetContext _localctx = new InlinesetContext(this._ctx, this.getState());
        this.enterRule(_localctx, 14, 7);
        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(322);
            int _la = this._input.LA(1);
            if (_la == 54) {
                this.setState(296);
                this.pseudo();
                this.setState(300);
                this._errHandler.sync((Parser)this);
                _la = this._input.LA(1);
                while (_la == 78) {
                    this.setState(297);
                    this.match(78);
                    this.setState(302);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                }
                this.setState(319);
                this._errHandler.sync((Parser)this);
                _la = this._input.LA(1);
                while (_la == 55) {
                    this.setState(303);
                    this.match(55);
                    this.setState(307);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                    while (_la == 78) {
                        this.setState(304);
                        this.match(78);
                        this.setState(309);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(310);
                    this.pseudo();
                    this.setState(314);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                    while (_la == 78) {
                        this.setState(311);
                        this.match(78);
                        this.setState(316);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(321);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                }
            }
            this.setState(324);
            this.match(62);
            this.setState(325);
            this.declarations();
            this.setState(326);
            this.match(63);
        }
        catch (RecognitionException re) {
            this.log.error("Recognition exception | inlineset | should be empty");
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     */
    public final MediaContext media() throws RecognitionException {
        MediaContext _localctx = new MediaContext(this._ctx, this.getState());
        this.enterRule(_localctx, 16, 8);
        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(328);
            this.media_query();
            this.setState(339);
            this._errHandler.sync((Parser)this);
            int _la = this._input.LA(1);
            while (_la == 55) {
                this.setState(329);
                this.match(55);
                this.setState(333);
                this._errHandler.sync((Parser)this);
                _la = this._input.LA(1);
                while (_la == 78) {
                    this.setState(330);
                    this.match(78);
                    this.setState(335);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                }
                this.setState(336);
                this.media_query();
                this.setState(341);
                this._errHandler.sync((Parser)this);
                _la = this._input.LA(1);
            }
        }
        catch (RecognitionException re) {
            this.log.error("PARSING MEDIA ERROR | consume until COMMA, LCURLY, SEMICOLON");
            IntervalSet intervalSet = new IntervalSet(new int[]{55, 62, 53});
            this.getCSSErrorHandler().consumeUntil(this, intervalSet, CSSLexerState.RecoveryMode.BALANCED, null);
            _localctx.addErrorNode(this.getTokenFactory().create(25, "INVALID_STATEMENT"));
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     */
    public final Media_queryContext media_query() throws RecognitionException {
        Media_queryContext _localctx = new Media_queryContext(this._ctx, this.getState());
        this.enterRule(_localctx, 18, 9);
        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(349);
            this._errHandler.sync((Parser)this);
            int _la = this._input.LA(1);
            do {
                this.setState(342);
                this.media_term();
                this.setState(346);
                this._errHandler.sync((Parser)this);
                _la = this._input.LA(1);
                while (_la == 78) {
                    this.setState(343);
                    this.match(78);
                    this.setState(348);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                }
                this.setState(351);
                this._errHandler.sync((Parser)this);
            } while (((_la = this._input.LA(1)) & 0xFFFFFFC0) == 0 && (1L << _la & 0x3F47E60040200000L) != 0L || (_la - 66 & 0xFFFFFFC0) == 0 && (1L << _la - 66 & 0x470FD3L) != 0L);
        }
        catch (RecognitionException re) {
            this.log.error("Recognition exception | media_query | should be empty");
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public final Media_termContext media_term() throws RecognitionException {
        Media_termContext _localctx = new Media_termContext(this._ctx, this.getState());
        this.enterRule(_localctx, 20, 10);
        try {
            this.setState(358);
            switch (this._input.LA(1)) {
                case 30: 
                case 66: {
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(355);
                    switch (this._input.LA(1)) {
                        case 30: {
                            this.setState(353);
                            this.match(30);
                            return _localctx;
                        }
                        case 66: {
                            this.setState(354);
                            this.media_expression();
                            return _localctx;
                        }
                    }
                    throw new NoViableAltException((Parser)this);
                }
                case 21: 
                case 41: 
                case 42: 
                case 45: 
                case 46: 
                case 47: 
                case 48: 
                case 49: 
                case 50: 
                case 54: 
                case 56: 
                case 57: 
                case 58: 
                case 59: 
                case 60: 
                case 61: 
                case 67: 
                case 70: 
                case 72: 
                case 73: 
                case 74: 
                case 75: 
                case 76: 
                case 77: 
                case 82: 
                case 83: 
                case 84: 
                case 88: {
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(357);
                    this.nomediaquery();
                    return _localctx;
                }
                default: {
                    throw new NoViableAltException((Parser)this);
                }
            }
        }
        catch (RecognitionException re) {
            this.log.error("PARSING MEDIATERM ERROR | consume until COMMA, LCURLY, SEMICOLON");
            IntervalSet intervalSet = new IntervalSet(new int[]{55, 62, 53});
            this.getCSSErrorHandler().consumeUntil(this, intervalSet, CSSLexerState.RecoveryMode.RULE, null);
            _localctx.addErrorNode(this.getTokenFactory().create(25, "INVALID_STATEMENT"));
            return _localctx;
        }
        finally {
            this.exitRule();
        }
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     */
    public final Media_expressionContext media_expression() throws RecognitionException {
        Media_expressionContext _localctx = new Media_expressionContext(this._ctx, this.getState());
        this.enterRule(_localctx, 22, 11);
        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(360);
            this.match(66);
            this.setState(364);
            this._errHandler.sync((Parser)this);
            int _la = this._input.LA(1);
            while (_la == 78) {
                this.setState(361);
                this.match(78);
                this.setState(366);
                this._errHandler.sync((Parser)this);
                _la = this._input.LA(1);
            }
            this.setState(367);
            this.match(30);
            this.setState(371);
            this._errHandler.sync((Parser)this);
            _la = this._input.LA(1);
            while (_la == 78) {
                this.setState(368);
                this.match(78);
                this.setState(373);
                this._errHandler.sync((Parser)this);
                _la = this._input.LA(1);
            }
            this.setState(382);
            _la = this._input.LA(1);
            if (_la == 54) {
                this.setState(374);
                this.match(54);
                this.setState(378);
                this._errHandler.sync((Parser)this);
                _la = this._input.LA(1);
                while (_la == 78) {
                    this.setState(375);
                    this.match(78);
                    this.setState(380);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                }
                this.setState(381);
                this.terms();
            }
            this.setState(384);
            this.match(67);
        }
        catch (RecognitionException re) {
            this.log.error("PARSING media_expression ERROR | consume until RPAREN, SEMICOLON");
            IntervalSet intervalSet = new IntervalSet(new int[]{67, 53});
            this.getCSSErrorHandler().consumeUntilGreedy(this, intervalSet);
            _localctx.addErrorNode(this.getTokenFactory().create(25, "INVALID_STATEMENT"));
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public final Media_ruleContext media_rule() throws RecognitionException {
        Media_ruleContext _localctx = new Media_ruleContext(this._ctx, this.getState());
        this.enterRule(_localctx, 24, 12);
        try {
            this.setState(388);
            switch (this._input.LA(1)) {
                case 21: 
                case 23: 
                case 30: 
                case 40: 
                case 41: 
                case 42: 
                case 43: 
                case 45: 
                case 46: 
                case 47: 
                case 48: 
                case 49: 
                case 50: 
                case 54: 
                case 55: 
                case 56: 
                case 57: 
                case 58: 
                case 59: 
                case 60: 
                case 61: 
                case 62: 
                case 67: 
                case 68: 
                case 70: 
                case 72: 
                case 73: 
                case 74: 
                case 75: 
                case 76: 
                case 77: 
                case 83: 
                case 84: 
                case 88: 
                case 89: {
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(386);
                    this.ruleset();
                    return _localctx;
                }
                case 31: 
                case 32: 
                case 33: 
                case 34: 
                case 35: 
                case 37: 
                case 38: 
                case 39: {
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(387);
                    this.atstatement();
                    return _localctx;
                }
                default: {
                    throw new NoViableAltException((Parser)this);
                }
            }
        }
        catch (RecognitionException re) {
            this.log.error("Recognition exception | media_rule | should be empty");
            return _localctx;
        }
        finally {
            this.exitRule();
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public final Keyframes_nameContext keyframes_name() throws RecognitionException {
        Keyframes_nameContext _localctx = new Keyframes_nameContext(this._ctx, this.getState());
        this.enterRule(_localctx, 26, 13);
        try {
            this.setState(392);
            switch (this._input.LA(1)) {
                case 30: {
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(390);
                    this.match(30);
                    return _localctx;
                }
                case 21: 
                case 41: 
                case 42: {
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(391);
                    this.string();
                    return _localctx;
                }
                default: {
                    throw new NoViableAltException((Parser)this);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            this._errHandler.reportError((Parser)this, re);
            this._errHandler.recover((Parser)this, re);
            return _localctx;
        }
        finally {
            this.exitRule();
        }
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     */
    public final Keyframe_blockContext keyframe_block() throws RecognitionException {
        Keyframe_blockContext _localctx = new Keyframe_blockContext(this._ctx, this.getState());
        this.enterRule(_localctx, 28, 14);
        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(394);
            this.keyframe_selector();
            this.setState(405);
            this._errHandler.sync((Parser)this);
            int _la = this._input.LA(1);
            while (_la == 55) {
                this.setState(395);
                this.match(55);
                this.setState(399);
                this._errHandler.sync((Parser)this);
                _la = this._input.LA(1);
                while (_la == 78) {
                    this.setState(396);
                    this.match(78);
                    this.setState(401);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                }
                this.setState(402);
                this.keyframe_selector();
                this.setState(407);
                this._errHandler.sync((Parser)this);
                _la = this._input.LA(1);
            }
            this.setState(408);
            this.match(62);
            this.setState(412);
            this._errHandler.sync((Parser)this);
            _la = this._input.LA(1);
            while (_la == 78) {
                this.setState(409);
                this.match(78);
                this.setState(414);
                this._errHandler.sync((Parser)this);
                _la = this._input.LA(1);
            }
            this.setState(415);
            this.declarations();
            this.setState(416);
            this.match(63);
        }
        catch (RecognitionException re) {
            this.log.debug("PARSING keyframe_selector ERROR | consume until RCURLY and add INVALID_STATEMENT");
            IntervalSet intervalSet = new IntervalSet(new int[]{63});
            this.getCSSErrorHandler().consumeUntilGreedy(this, intervalSet);
            _localctx.addErrorNode(this.getTokenFactory().create(25, "INVALID_STATEMENT"));
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     */
    public final Keyframe_selectorContext keyframe_selector() throws RecognitionException {
        Keyframe_selectorContext _localctx = new Keyframe_selectorContext(this._ctx, this.getState());
        this.enterRule(_localctx, 30, 15);
        try {
            this.setState(432);
            switch (this._input.LA(1)) {
                case 30: {
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(418);
                    this.match(30);
                    this.setState(422);
                    this._errHandler.sync((Parser)this);
                    int _la = this._input.LA(1);
                    while (_la == 78) {
                        this.setState(419);
                        this.match(78);
                        this.setState(424);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    break;
                }
                case 46: {
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(425);
                    this.match(46);
                    this.setState(429);
                    this._errHandler.sync((Parser)this);
                    int _la = this._input.LA(1);
                    while (_la == 78) {
                        this.setState(426);
                        this.match(78);
                        this.setState(431);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    break;
                }
                default: {
                    throw new NoViableAltException((Parser)this);
                }
            }
        }
        catch (RecognitionException re) {
            this.log.error("Recognition exception | keyframes_selector | should be empty");
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final Unknown_atruleContext unknown_atrule() throws RecognitionException {
        Unknown_atruleContext _localctx = new Unknown_atruleContext(this._ctx, this.getState());
        this.enterRule(_localctx, 32, 16);
        try {
            this.setState(462);
            this._errHandler.sync((Parser)this);
            switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 60, this._ctx)) {
                case 1: {
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(434);
                    this.match(39);
                    this.setState(438);
                    this._errHandler.sync((Parser)this);
                    int _la = this._input.LA(1);
                    while (_la == 78) {
                        this.setState(435);
                        this.match(78);
                        this.setState(440);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(444);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                    while ((_la - 21 & 0xFFFFFFC0) == 0 && (1L << _la - 21 & 0xE03AA1FE3F780201L) != 0L) {
                        this.setState(441);
                        this.any();
                        this.setState(446);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(447);
                    this.unknown_atrule_body();
                    return _localctx;
                }
                case 2: {
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(448);
                    this.match(39);
                    this.setState(452);
                    this._errHandler.sync((Parser)this);
                    int _la = this._input.LA(1);
                    while (_la == 78) {
                        this.setState(449);
                        this.match(78);
                        this.setState(454);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(458);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                    while ((_la - 21 & 0xFFFFFFC0) == 0 && (1L << _la - 21 & 0xE03AA1FE3F780201L) != 0L) {
                        this.setState(455);
                        this.any();
                        this.setState(460);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(461);
                    this.match(53);
                    return _localctx;
                }
            }
            return _localctx;
        }
        catch (RecognitionException re) {
            this.log.error("PARSING unknown_atrule ERROR - consume until RCURLY");
            IntervalSet intervalSet = new IntervalSet(new int[]{63, 53});
            this.getCSSErrorHandler().consumeUntilGreedy(this, intervalSet, CSSLexerState.RecoveryMode.BALANCED);
            _localctx.addErrorNode(this.getTokenFactory().create(26, "INVALID_ATSTATEMENT"));
            return _localctx;
        }
        finally {
            this.exitRule();
        }
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     */
    public final Unknown_atrule_bodyContext unknown_atrule_body() throws RecognitionException {
        Unknown_atrule_bodyContext _localctx = new Unknown_atrule_bodyContext(this._ctx, this.getState());
        this.enterRule(_localctx, 34, 17);
        CSSLexerState begin = this.getCurrentLexerState(_localctx.getStart());
        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(464);
            this.match(62);
            this.setState(468);
            this._errHandler.sync((Parser)this);
            int _la = this._input.LA(1);
            while (_la == 78) {
                this.setState(465);
                this.match(78);
                this.setState(470);
                this._errHandler.sync((Parser)this);
                _la = this._input.LA(1);
            }
            this.setState(471);
            this.match(63);
        }
        catch (RecognitionException re) {
            this.log.error("PARSING unknown_atrule_body has some content | consume until RCURLY");
            IntervalSet follow = new IntervalSet(new int[]{63});
            this.getCSSErrorHandler().consumeUntilGreedy(this, follow, CSSLexerState.RecoveryMode.DECL, begin);
            _localctx.addErrorNode(this.getTokenFactory().create(67, "}"));
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public final RulesetContext ruleset() throws RecognitionException {
        RulesetContext _localctx = new RulesetContext(this._ctx, this.getState());
        this.enterRule(_localctx, 36, 18);
        try {
            this.setState(502);
            switch (this._input.LA(1)) {
                case 23: 
                case 30: 
                case 40: 
                case 43: 
                case 54: 
                case 62: 
                case 68: 
                case 74: {
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(487);
                    int _la = this._input.LA(1);
                    if ((_la - 23 & 0xFFFFFFC0) == 0 && (1L << _la - 23 & 0x8200080120081L) != 0L) {
                        this.setState(473);
                        this.combined_selector();
                        this.setState(484);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                        while (_la == 55) {
                            this.setState(474);
                            this.match(55);
                            this.setState(478);
                            this._errHandler.sync((Parser)this);
                            _la = this._input.LA(1);
                            while (_la == 78) {
                                this.setState(475);
                                this.match(78);
                                this.setState(480);
                                this._errHandler.sync((Parser)this);
                                _la = this._input.LA(1);
                            }
                            this.setState(481);
                            this.combined_selector();
                            this.setState(486);
                            this._errHandler.sync((Parser)this);
                            _la = this._input.LA(1);
                        }
                    }
                    this.setState(489);
                    this.match(62);
                    this.setState(493);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                    while (_la == 78) {
                        this.setState(490);
                        this.match(78);
                        this.setState(495);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(496);
                    this.declarations();
                    this.setState(497);
                    this.match(63);
                    return _localctx;
                }
                case 21: 
                case 41: 
                case 42: 
                case 45: 
                case 46: 
                case 47: 
                case 48: 
                case 49: 
                case 50: 
                case 55: 
                case 56: 
                case 57: 
                case 58: 
                case 59: 
                case 60: 
                case 61: 
                case 67: 
                case 70: 
                case 72: 
                case 73: 
                case 75: 
                case 76: 
                case 77: 
                case 83: 
                case 84: 
                case 88: 
                case 89: {
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(499);
                    this.norule();
                    this.log.debug("PARSING ruleset: norule encountered | consume until RCURLY and add INVALID_STATEMENT");
                    IntervalSet intervalSet = new IntervalSet(new int[]{63});
                    this.getCSSErrorHandler().consumeUntilGreedy(this, intervalSet);
                    _localctx.addErrorNode(this.getTokenFactory().create(25, "INVALID_STATEMENT"));
                    return _localctx;
                }
                default: {
                    throw new NoViableAltException((Parser)this);
                }
            }
        }
        catch (RecognitionException re) {
            this.log.debug("PARSING ruleset ERROR | consume until RCURLY and add INVALID_STATEMENT");
            IntervalSet intervalSet = new IntervalSet(new int[]{63});
            this.getCSSErrorHandler().consumeUntilGreedy(this, intervalSet);
            _localctx.addErrorNode(this.getTokenFactory().create(25, "INVALID_STATEMENT"));
            return _localctx;
        }
        finally {
            this.exitRule();
        }
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     */
    public final DeclarationsContext declarations() throws RecognitionException {
        DeclarationsContext _localctx = new DeclarationsContext(this._ctx, this.getState());
        this.enterRule(_localctx, 38, 19);
        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(505);
            int _la = this._input.LA(1);
            if ((_la & 0xFFFFFFC0) == 0 && (1L << _la & 0x3FC3EF0040200000L) != 0L || (_la - 70 & 0xFFFFFFC0) == 0 && (1L << _la - 70 & 0x4C601DL) != 0L) {
                this.setState(504);
                this.declaration();
            }
            this.setState(519);
            this._errHandler.sync((Parser)this);
            _la = this._input.LA(1);
            while (_la == 53) {
                this.setState(507);
                this.match(53);
                this.setState(511);
                this._errHandler.sync((Parser)this);
                _la = this._input.LA(1);
                while (_la == 78) {
                    this.setState(508);
                    this.match(78);
                    this.setState(513);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                }
                this.setState(515);
                _la = this._input.LA(1);
                if ((_la & 0xFFFFFFC0) == 0 && (1L << _la & 0x3FC3EF0040200000L) != 0L || (_la - 70 & 0xFFFFFFC0) == 0 && (1L << _la - 70 & 0x4C601DL) != 0L) {
                    this.setState(514);
                    this.declaration();
                }
                this.setState(521);
                this._errHandler.sync((Parser)this);
                _la = this._input.LA(1);
            }
        }
        catch (RecognitionException re) {
            this.log.error("Recognition exception | declarations | should be empty");
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public final DeclarationContext declaration() throws RecognitionException {
        DeclarationContext _localctx = new DeclarationContext(this._ctx, this.getState());
        this.enterRule(_localctx, 40, 20);
        CSSLexerState begin = this.getCurrentLexerState(_localctx.getStart());
        this.log.debug("Decl begin: " + begin);
        try {
            this.setState(543);
            switch (this._input.LA(1)) {
                case 30: 
                case 72: {
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(522);
                    this.property();
                    this.setState(523);
                    this.match(54);
                    this.setState(527);
                    this._errHandler.sync((Parser)this);
                    int _la = this._input.LA(1);
                    while (_la == 78) {
                        this.setState(524);
                        this.match(78);
                        this.setState(529);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(531);
                    _la = this._input.LA(1);
                    if ((_la - 21 & 0xFFFFFFC0) == 0 && (1L << _la - 21 & 0xF038A3FE3F7C0211L) != 0L) {
                        this.setState(530);
                        this.terms();
                    }
                    this.setState(534);
                    _la = this._input.LA(1);
                    if (_la != 70) return _localctx;
                    this.setState(533);
                    this.important();
                    return _localctx;
                }
                case 21: 
                case 40: 
                case 41: 
                case 42: 
                case 43: 
                case 45: 
                case 46: 
                case 47: 
                case 48: 
                case 49: 
                case 54: 
                case 55: 
                case 56: 
                case 57: 
                case 58: 
                case 59: 
                case 60: 
                case 61: 
                case 70: 
                case 73: 
                case 74: 
                case 83: 
                case 84: 
                case 88: 
                case 89: 
                case 92: {
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(536);
                    this.noprop();
                    this.setState(540);
                    this._errHandler.sync((Parser)this);
                    int _la = this._input.LA(1);
                    while ((_la - 21 & 0xFFFFFFC0) == 0 && (1L << _la - 21 & 0xE03AA1FE3F780201L) != 0L) {
                        this.setState(537);
                        this.any();
                        this.setState(542);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    return _localctx;
                }
                default: {
                    throw new NoViableAltException((Parser)this);
                }
            }
        }
        catch (RecognitionException re) {
            this.log.error("PARSING declaration ERROR | consume until SEMICOLON, RCURLY");
            IntervalSet follow = new IntervalSet(new int[]{53, 63});
            this.getCSSErrorHandler().consumeUntil(this, follow, CSSLexerState.RecoveryMode.DECL, begin);
            _localctx.addErrorNode(this.getTokenFactory().create(24, "INVALID_DECLARATION"));
            return _localctx;
        }
        finally {
            this.exitRule();
        }
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     */
    public final ImportantContext important() throws RecognitionException {
        ImportantContext _localctx = new ImportantContext(this._ctx, this.getState());
        this.enterRule(_localctx, 42, 21);
        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(545);
            this.match(70);
            this.setState(549);
            this._errHandler.sync((Parser)this);
            int _la = this._input.LA(1);
            while (_la == 78) {
                this.setState(546);
                this.match(78);
                this.setState(551);
                this._errHandler.sync((Parser)this);
                _la = this._input.LA(1);
            }
            this.setState(552);
            this.match(29);
            this.setState(556);
            this._errHandler.sync((Parser)this);
            _la = this._input.LA(1);
            while (_la == 78) {
                this.setState(553);
                this.match(78);
                this.setState(558);
                this._errHandler.sync((Parser)this);
                _la = this._input.LA(1);
            }
        }
        catch (RecognitionException re) {
            this.log.error("PARSING IMPORTANT error");
            IntervalSet intervalSet = new IntervalSet(new int[]{63, 53});
            this.getCSSErrorHandler().consumeUntil(this, intervalSet, CSSLexerState.RecoveryMode.RULE, null);
            _localctx.addErrorNode(this.getTokenFactory().create(28, "INVALID_DIRECTIVE"));
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     */
    public final PropertyContext property() throws RecognitionException {
        PropertyContext _localctx = new PropertyContext(this._ctx, this.getState());
        this.enterRule(_localctx, 44, 22);
        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(560);
            int _la = this._input.LA(1);
            if (_la == 72) {
                this.setState(559);
                this.match(72);
            }
            this.setState(562);
            this.match(30);
            this.setState(566);
            this._errHandler.sync((Parser)this);
            _la = this._input.LA(1);
            while (_la == 78) {
                this.setState(563);
                this.match(78);
                this.setState(568);
                this._errHandler.sync((Parser)this);
                _la = this._input.LA(1);
            }
        }
        catch (RecognitionException re) {
            this.log.error("PARSING property ERROR | should be empty");
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     */
    public final TermsContext terms() throws RecognitionException {
        TermsContext _localctx = new TermsContext(this._ctx, this.getState());
        this.enterRule(_localctx, 46, 23);
        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(570);
            this._errHandler.sync((Parser)this);
            int _la = this._input.LA(1);
            do {
                this.setState(569);
                this.term();
                this.setState(572);
                this._errHandler.sync((Parser)this);
            } while (((_la = this._input.LA(1)) - 21 & 0xFFFFFFC0) == 0 && (1L << _la - 21 & 0xF038A3FE3F7C0211L) != 0L);
        }
        catch (RecognitionException re) {
            this.log.error("PARSING terms ERROR functLevel = {}", (Object)this.functLevel);
            if (this.functLevel == 0) {
                IntervalSet intervalSet = new IntervalSet(new int[]{63, 53});
                this.getCSSErrorHandler().consumeUntilGreedy(this, intervalSet);
                _localctx.addErrorNode(this.getTokenFactory().create(25, "INVALID_STATEMENT"));
            } else {
                IntervalSet intervalSet = new IntervalSet(new int[]{67, 63, 53});
                this.getCSSErrorHandler().consumeUntilGreedy(this, intervalSet, CSSLexerState.RecoveryMode.FUNCTION);
                _localctx.addErrorNode(this.getTokenFactory().create(25, "INVALID_STATEMENT"));
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public final TermContext term() throws RecognitionException {
        TermContext _localctx = new TermContext(this._ctx, this.getState());
        this.enterRule(_localctx, 48, 24);
        try {
            this.setState(603);
            switch (this._input.LA(1)) {
                case 21: 
                case 25: 
                case 30: 
                case 40: 
                case 41: 
                case 42: 
                case 43: 
                case 45: 
                case 46: 
                case 47: 
                case 48: 
                case 49: 
                case 50: 
                case 54: 
                case 55: 
                case 56: 
                case 57: 
                case 58: 
                case 59: 
                case 60: 
                case 61: 
                case 66: 
                case 68: 
                case 72: 
                case 73: 
                case 74: 
                case 81: 
                case 82: 
                case 83: 
                case 84: {
                    _localctx = new TermValuePartContext(_localctx);
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(574);
                    this.valuepart();
                    return _localctx;
                }
                case 62: {
                    _localctx = new TermInvalidContext(_localctx);
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(575);
                    this.match(62);
                    this.setState(579);
                    this._errHandler.sync((Parser)this);
                    int _la = this._input.LA(1);
                    while (_la == 78) {
                        this.setState(576);
                        this.match(78);
                        this.setState(581);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(592);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                    while ((_la - 21 & 0xFFFFFFC0) == 0 && (1L << _la - 21 & 0xE03AA1FF3F780201L) != 0L) {
                        this.setState(590);
                        switch (this._input.LA(1)) {
                            case 21: 
                            case 30: 
                            case 40: 
                            case 41: 
                            case 42: 
                            case 43: 
                            case 45: 
                            case 46: 
                            case 47: 
                            case 48: 
                            case 49: 
                            case 50: 
                            case 54: 
                            case 55: 
                            case 56: 
                            case 57: 
                            case 58: 
                            case 59: 
                            case 60: 
                            case 61: 
                            case 66: 
                            case 68: 
                            case 70: 
                            case 72: 
                            case 73: 
                            case 74: 
                            case 82: 
                            case 83: 
                            case 84: {
                                this.setState(582);
                                this.any();
                                break;
                            }
                            case 53: {
                                this.setState(583);
                                this.match(53);
                                this.setState(587);
                                this._errHandler.sync((Parser)this);
                                _la = this._input.LA(1);
                                while (_la == 78) {
                                    this.setState(584);
                                    this.match(78);
                                    this.setState(589);
                                    this._errHandler.sync((Parser)this);
                                    _la = this._input.LA(1);
                                }
                                break;
                            }
                            default: {
                                throw new NoViableAltException((Parser)this);
                            }
                        }
                        this.setState(594);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(595);
                    this.match(63);
                    return _localctx;
                }
                case 39: {
                    _localctx = new TermInvalidContext(_localctx);
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(596);
                    this.match(39);
                    this.setState(600);
                    this._errHandler.sync((Parser)this);
                    int _la = this._input.LA(1);
                    while (_la == 78) {
                        this.setState(597);
                        this.match(78);
                        this.setState(602);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    return _localctx;
                }
                default: {
                    throw new NoViableAltException((Parser)this);
                }
            }
        }
        catch (RecognitionException re) {
            this.log.error("PARSING term ERROR | should be empty");
            return _localctx;
        }
        finally {
            this.exitRule();
        }
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     */
    public final FunctContext funct() throws RecognitionException {
        FunctContext _localctx = new FunctContext(this._ctx, this.getState());
        this.enterRule(_localctx, 50, 25);
        ++this.functLevel;
        try {
            this.setState(637);
            switch (this._input.LA(1)) {
                case 81: {
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(605);
                    this.match(81);
                    this.setState(609);
                    this._errHandler.sync((Parser)this);
                    int _la = this._input.LA(1);
                    while (_la == 78) {
                        this.setState(606);
                        this.match(78);
                        this.setState(611);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(622);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                    while ((_la - 21 & 0xFFFFFFC0) == 0 && (1L << _la - 21 & 0xE03AA1FF3F780201L) != 0L) {
                        this.setState(620);
                        switch (this._input.LA(1)) {
                            case 21: 
                            case 30: 
                            case 40: 
                            case 41: 
                            case 42: 
                            case 43: 
                            case 45: 
                            case 46: 
                            case 47: 
                            case 48: 
                            case 49: 
                            case 50: 
                            case 54: 
                            case 55: 
                            case 56: 
                            case 57: 
                            case 58: 
                            case 59: 
                            case 60: 
                            case 61: 
                            case 66: 
                            case 68: 
                            case 70: 
                            case 72: 
                            case 73: 
                            case 74: 
                            case 82: 
                            case 83: 
                            case 84: {
                                this.setState(612);
                                this.any();
                                break;
                            }
                            case 53: {
                                this.setState(613);
                                this.match(53);
                                this.setState(617);
                                this._errHandler.sync((Parser)this);
                                _la = this._input.LA(1);
                                while (_la == 78) {
                                    this.setState(614);
                                    this.match(78);
                                    this.setState(619);
                                    this._errHandler.sync((Parser)this);
                                    _la = this._input.LA(1);
                                }
                                break;
                            }
                            default: {
                                throw new NoViableAltException((Parser)this);
                            }
                        }
                        this.setState(624);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(625);
                    this.match(67);
                    break;
                }
                case 82: {
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(626);
                    this.match(82);
                    this.setState(630);
                    this._errHandler.sync((Parser)this);
                    int _la = this._input.LA(1);
                    while (_la == 78) {
                        this.setState(627);
                        this.match(78);
                        this.setState(632);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(634);
                    this._errHandler.sync((Parser)this);
                    switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 92, this._ctx)) {
                        case 1: {
                            this.setState(633);
                            this.funct_args();
                        }
                    }
                    this.setState(636);
                    this.match(67);
                    break;
                }
                default: {
                    throw new NoViableAltException((Parser)this);
                }
            }
            this._ctx.stop = this._input.LT(-1);
            --this.functLevel;
        }
        catch (RecognitionException re) {
            this.log.error("Recognition exception | funct | should be empty");
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     */
    public final ValuepartContext valuepart() throws RecognitionException {
        ValuepartContext _localctx = new ValuepartContext(this._ctx, this.getState());
        this.enterRule(_localctx, 52, 26);
        try {
            int _la;
            this.enterOuterAlt(_localctx, 1);
            this.setState(685);
            this._errHandler.sync((Parser)this);
            switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 100, this._ctx)) {
                case 1: {
                    this.setState(640);
                    _la = this._input.LA(1);
                    if (_la == 72) {
                        this.setState(639);
                        this.match(72);
                    }
                    this.setState(642);
                    this.match(30);
                    break;
                }
                case 2: {
                    this.setState(644);
                    _la = this._input.LA(1);
                    if (_la == 72 || _la == 73) {
                        this.setState(643);
                        _la = this._input.LA(1);
                        if (_la != 72 && _la != 73) {
                            this._errHandler.recoverInline((Parser)this);
                        } else {
                            this.consume();
                        }
                    }
                    this.setState(646);
                    this.match(45);
                    break;
                }
                case 3: {
                    this.setState(648);
                    _la = this._input.LA(1);
                    if (_la == 72 || _la == 73) {
                        this.setState(647);
                        _la = this._input.LA(1);
                        if (_la != 72 && _la != 73) {
                            this._errHandler.recoverInline((Parser)this);
                        } else {
                            this.consume();
                        }
                    }
                    this.setState(650);
                    this.match(46);
                    break;
                }
                case 4: {
                    this.setState(652);
                    _la = this._input.LA(1);
                    if (_la == 72 || _la == 73) {
                        this.setState(651);
                        _la = this._input.LA(1);
                        if (_la != 72 && _la != 73) {
                            this._errHandler.recoverInline((Parser)this);
                        } else {
                            this.consume();
                        }
                    }
                    this.setState(654);
                    this.match(47);
                    break;
                }
                case 5: {
                    this.setState(655);
                    this.string();
                    break;
                }
                case 6: {
                    this.setState(656);
                    this.match(48);
                    break;
                }
                case 7: {
                    this.setState(657);
                    this.match(49);
                    break;
                }
                case 8: {
                    this.setState(658);
                    this.match(43);
                    break;
                }
                case 9: {
                    this.setState(660);
                    _la = this._input.LA(1);
                    if (_la == 72 || _la == 73) {
                        this.setState(659);
                        _la = this._input.LA(1);
                        if (_la != 72 && _la != 73) {
                            this._errHandler.recoverInline((Parser)this);
                        } else {
                            this.consume();
                        }
                    }
                    this.setState(662);
                    this.funct();
                    break;
                }
                case 10: {
                    this.setState(663);
                    this.match(55);
                    break;
                }
                case 11: {
                    this.setState(664);
                    this.match(59);
                    break;
                }
                case 12: {
                    this.setState(665);
                    this.bracketed_idents();
                    break;
                }
                case 13: {
                    this.setState(666);
                    this.match(40);
                    break;
                }
                case 14: {
                    this.setState(667);
                    this.match(50);
                    break;
                }
                case 15: {
                    this.setState(668);
                    this.match(83);
                    break;
                }
                case 16: {
                    this.setState(669);
                    this.match(54);
                    break;
                }
                case 17: {
                    this.setState(670);
                    this.match(60);
                    break;
                }
                case 18: {
                    this.setState(671);
                    this.match(61);
                    break;
                }
                case 19: {
                    this.setState(672);
                    this.match(56);
                    break;
                }
                case 20: {
                    this.setState(673);
                    this.match(57);
                    break;
                }
                case 21: {
                    this.setState(674);
                    this.match(58);
                    break;
                }
                case 22: {
                    this.setState(675);
                    this.match(74);
                    break;
                }
                case 23: {
                    this.setState(676);
                    this.match(84);
                    break;
                }
                case 24: {
                    this.setState(677);
                    this.match(66);
                    this.setState(681);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                    while ((_la - 21 & 0xFFFFFFC0) == 0 && (1L << _la - 21 & 0xF038A1FE3F780211L) != 0L) {
                        this.setState(678);
                        this.valuepart();
                        this.setState(683);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(684);
                    this.match(67);
                }
            }
            this.setState(690);
            this._errHandler.sync((Parser)this);
            _la = this._input.LA(1);
            while (_la == 78) {
                this.setState(687);
                this.match(78);
                this.setState(692);
                this._errHandler.sync((Parser)this);
                _la = this._input.LA(1);
            }
        }
        catch (RecognitionException re) {
            this.log.error("Recognition exception | valuepart");
            IntervalSet intervalSet = new IntervalSet(new int[]{63, 53});
            this.getCSSErrorHandler().consumeUntil(this, intervalSet, CSSLexerState.RecoveryMode.NOBALANCE, null);
            _localctx.addErrorNode(this.getTokenFactory().create(25, ""));
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     */
    public final Funct_argsContext funct_args() throws RecognitionException {
        Funct_argsContext _localctx = new Funct_argsContext(this._ctx, this.getState());
        this.enterRule(_localctx, 54, 27);
        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(694);
            this._errHandler.sync((Parser)this);
            int _alt = 1;
            do {
                switch (_alt) {
                    case 1: {
                        this.setState(693);
                        this.funct_argument();
                        break;
                    }
                    default: {
                        throw new NoViableAltException((Parser)this);
                    }
                }
                this.setState(696);
                this._errHandler.sync((Parser)this);
            } while ((_alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 102, this._ctx)) != 2 && _alt != 0);
        }
        catch (RecognitionException re) {
            this.log.error("PARSING funct_args ERROR functLevel = {}", (Object)this.functLevel);
            IntervalSet intervalSet = new IntervalSet(new int[]{67, 63, 53});
            this.getCSSErrorHandler().consumeUntilGreedy(this, intervalSet, CSSLexerState.RecoveryMode.FUNCTION);
            _localctx.addErrorNode(this.getTokenFactory().create(25, "INVALID_STATEMENT"));
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     */
    public final Funct_argumentContext funct_argument() throws RecognitionException {
        Funct_argumentContext _localctx = new Funct_argumentContext(this._ctx, this.getState());
        this.enterRule(_localctx, 56, 28);
        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(722);
            switch (this._input.LA(1)) {
                case 30: {
                    this.setState(698);
                    this.match(30);
                    break;
                }
                case 73: {
                    this.setState(699);
                    this.match(73);
                    break;
                }
                case 72: {
                    this.setState(700);
                    this.match(72);
                    break;
                }
                case 74: {
                    this.setState(701);
                    this.match(74);
                    break;
                }
                case 59: {
                    this.setState(702);
                    this.match(59);
                    break;
                }
                case 66: {
                    this.setState(703);
                    this.match(66);
                    break;
                }
                case 67: {
                    this.setState(704);
                    this.match(67);
                    break;
                }
                case 45: {
                    this.setState(705);
                    this.match(45);
                    break;
                }
                case 46: {
                    this.setState(706);
                    this.match(46);
                    break;
                }
                case 47: {
                    this.setState(707);
                    this.match(47);
                    break;
                }
                case 43: {
                    this.setState(708);
                    this.match(43);
                    break;
                }
                case 21: 
                case 41: 
                case 42: {
                    this.setState(709);
                    this.string();
                    break;
                }
                case 81: 
                case 82: {
                    this.setState(710);
                    this.funct();
                    break;
                }
                case 55: {
                    this.setState(711);
                    this.match(55);
                    break;
                }
                case 40: {
                    this.setState(712);
                    this.match(40);
                    break;
                }
                case 50: {
                    this.setState(713);
                    this.match(50);
                    break;
                }
                case 83: {
                    this.setState(714);
                    this.match(83);
                    break;
                }
                case 54: {
                    this.setState(715);
                    this.match(54);
                    break;
                }
                case 60: {
                    this.setState(716);
                    this.match(60);
                    break;
                }
                case 61: {
                    this.setState(717);
                    this.match(61);
                    break;
                }
                case 56: {
                    this.setState(718);
                    this.match(56);
                    break;
                }
                case 57: {
                    this.setState(719);
                    this.match(57);
                    break;
                }
                case 58: {
                    this.setState(720);
                    this.match(58);
                    break;
                }
                case 84: {
                    this.setState(721);
                    this.match(84);
                    break;
                }
                default: {
                    throw new NoViableAltException((Parser)this);
                }
            }
            this.setState(727);
            this._errHandler.sync((Parser)this);
            int _la = this._input.LA(1);
            while (_la == 78) {
                this.setState(724);
                this.match(78);
                this.setState(729);
                this._errHandler.sync((Parser)this);
                _la = this._input.LA(1);
            }
        }
        catch (RecognitionException re) {
            this.log.error("Recognition exception | funct_argument");
            IntervalSet intervalSet = new IntervalSet(new int[]{63, 53});
            this.getCSSErrorHandler().consumeUntil(this, intervalSet, CSSLexerState.RecoveryMode.BALANCED, null);
            _localctx.addErrorNode(this.getTokenFactory().create(25, ""));
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     */
    public final Combined_selectorContext combined_selector() throws RecognitionException {
        Combined_selectorContext _localctx = new Combined_selectorContext(this._ctx, this.getState());
        this.enterRule(_localctx, 58, 29);
        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(730);
            this.selector();
            this.setState(736);
            this._errHandler.sync((Parser)this);
            int _la = this._input.LA(1);
            while ((_la - 60 & 0xFFFFFFC0) == 0 && (1L << _la - 60 & 0x42801L) != 0L) {
                this.setState(731);
                this.combinator();
                this.setState(732);
                this.selector();
                this.setState(738);
                this._errHandler.sync((Parser)this);
                _la = this._input.LA(1);
            }
        }
        catch (RecognitionException re) {
            this.log.error("Recognition exception | combined_selector | should be empty");
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public final CombinatorContext combinator() throws RecognitionException {
        CombinatorContext _localctx = new CombinatorContext(this._ctx, this.getState());
        this.enterRule(_localctx, 60, 30);
        try {
            this.setState(761);
            switch (this._input.LA(1)) {
                case 60: {
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(739);
                    this.match(60);
                    this.setState(743);
                    this._errHandler.sync((Parser)this);
                    int _la = this._input.LA(1);
                    while (_la == 78) {
                        this.setState(740);
                        this.match(78);
                        this.setState(745);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    return _localctx;
                }
                case 73: {
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(746);
                    this.match(73);
                    this.setState(750);
                    this._errHandler.sync((Parser)this);
                    int _la = this._input.LA(1);
                    while (_la == 78) {
                        this.setState(747);
                        this.match(78);
                        this.setState(752);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    return _localctx;
                }
                case 71: {
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(753);
                    this.match(71);
                    this.setState(757);
                    this._errHandler.sync((Parser)this);
                    int _la = this._input.LA(1);
                    while (_la == 78) {
                        this.setState(754);
                        this.match(78);
                        this.setState(759);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    return _localctx;
                }
                case 78: {
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(760);
                    this.match(78);
                    return _localctx;
                }
                default: {
                    throw new NoViableAltException((Parser)this);
                }
            }
        }
        catch (RecognitionException re) {
            this.log.error("Recognition exception | combinator| should be empty");
            return _localctx;
        }
        finally {
            this.exitRule();
        }
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     */
    public final SelectorContext selector() throws RecognitionException {
        SelectorContext _localctx = new SelectorContext(this._ctx, this.getState());
        this.enterRule(_localctx, 62, 31);
        try {
            this.setState(787);
            switch (this._input.LA(1)) {
                case 30: 
                case 74: {
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(763);
                    int _la = this._input.LA(1);
                    if (_la != 30 && _la != 74) {
                        this._errHandler.recoverInline((Parser)this);
                    } else {
                        this.consume();
                    }
                    this.setState(767);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                    while ((_la - 23 & 0xFFFFFFC0) == 0 && (1L << _la - 23 & 0x200080120001L) != 0L) {
                        this.setState(764);
                        this.selpart();
                        this.setState(769);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(773);
                    this._errHandler.sync((Parser)this);
                    int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 111, this._ctx);
                    while (_alt != 2 && _alt != 0) {
                        if (_alt == 1) {
                            this.setState(770);
                            this.match(78);
                        }
                        this.setState(775);
                        this._errHandler.sync((Parser)this);
                        _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 111, this._ctx);
                    }
                    break;
                }
                case 23: 
                case 40: 
                case 43: 
                case 54: 
                case 68: {
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(777);
                    this._errHandler.sync((Parser)this);
                    int _la = this._input.LA(1);
                    do {
                        this.setState(776);
                        this.selpart();
                        this.setState(779);
                        this._errHandler.sync((Parser)this);
                    } while (((_la = this._input.LA(1)) - 23 & 0xFFFFFFC0) == 0 && (1L << _la - 23 & 0x200080120001L) != 0L);
                    this.setState(784);
                    this._errHandler.sync((Parser)this);
                    int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 113, this._ctx);
                    while (_alt != 2 && _alt != 0) {
                        if (_alt == 1) {
                            this.setState(781);
                            this.match(78);
                        }
                        this.setState(786);
                        this._errHandler.sync((Parser)this);
                        _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 113, this._ctx);
                    }
                    break;
                }
                default: {
                    throw new NoViableAltException((Parser)this);
                }
            }
        }
        catch (RecognitionException re) {
            this.log.error("PARSING selector ERROR | inserting INVALID_SELECTOR");
            _localctx.addErrorNode(this.getTokenFactory().create(22, "INVALID_SELECTOR"));
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public final SelpartContext selpart() throws RecognitionException {
        SelpartContext _localctx = new SelpartContext(this._ctx, this.getState());
        this.enterRule(_localctx, 64, 32);
        try {
            this.setState(803);
            switch (this._input.LA(1)) {
                case 43: {
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(789);
                    this.match(43);
                    return _localctx;
                }
                case 40: {
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(790);
                    this.match(40);
                    return _localctx;
                }
                case 68: {
                    this.enterOuterAlt(_localctx, 3);
                    this.setState(791);
                    this.match(68);
                    this.setState(795);
                    this._errHandler.sync((Parser)this);
                    int _la = this._input.LA(1);
                    while (_la == 78) {
                        this.setState(792);
                        this.match(78);
                        this.setState(797);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(798);
                    this.attribute();
                    this.setState(799);
                    this.match(69);
                    return _localctx;
                }
                case 54: {
                    this.enterOuterAlt(_localctx, 4);
                    this.setState(801);
                    this.pseudo();
                    return _localctx;
                }
                case 23: {
                    this.enterOuterAlt(_localctx, 5);
                    this.setState(802);
                    this.match(23);
                    return _localctx;
                }
                default: {
                    throw new NoViableAltException((Parser)this);
                }
            }
        }
        catch (RecognitionException re) {
            this.log.error("PARSING SELPART ERROR");
            _localctx.addErrorNode(this.getTokenFactory().create(23, "INVALID_SELPART"));
            return _localctx;
        }
        finally {
            this.exitRule();
        }
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     */
    public final AttributeContext attribute() throws RecognitionException {
        AttributeContext _localctx = new AttributeContext(this._ctx, this.getState());
        this.enterRule(_localctx, 66, 33);
        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(805);
            this.match(30);
            this.setState(809);
            this._errHandler.sync((Parser)this);
            int _la = this._input.LA(1);
            while (_la == 78) {
                this.setState(806);
                this.match(78);
                this.setState(811);
                this._errHandler.sync((Parser)this);
                _la = this._input.LA(1);
            }
            this.setState(829);
            _la = this._input.LA(1);
            if ((_la - 58 & 0xFFFFFFC0) == 0 && (1L << _la - 58 & 0x3E000001L) != 0L) {
                this.setState(812);
                _la = this._input.LA(1);
                if ((_la - 58 & 0xFFFFFFC0) != 0 || (1L << _la - 58 & 0x3E000001L) == 0L) {
                    this._errHandler.recoverInline((Parser)this);
                } else {
                    this.consume();
                }
                this.setState(816);
                this._errHandler.sync((Parser)this);
                _la = this._input.LA(1);
                while (_la == 78) {
                    this.setState(813);
                    this.match(78);
                    this.setState(818);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                }
                this.setState(821);
                switch (this._input.LA(1)) {
                    case 30: {
                        this.setState(819);
                        this.match(30);
                        break;
                    }
                    case 21: 
                    case 41: 
                    case 42: {
                        this.setState(820);
                        this.string();
                        break;
                    }
                    default: {
                        throw new NoViableAltException((Parser)this);
                    }
                }
                this.setState(826);
                this._errHandler.sync((Parser)this);
                _la = this._input.LA(1);
                while (_la == 78) {
                    this.setState(823);
                    this.match(78);
                    this.setState(828);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (RecognitionException re) {
            this.log.error("Recognition exception | attribute | should be empty");
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public final PseudoContext pseudo() throws RecognitionException {
        PseudoContext _localctx = new PseudoContext(this._ctx, this.getState());
        this.enterRule(_localctx, 68, 34);
        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(831);
            this.match(54);
            this.setState(833);
            int _la = this._input.LA(1);
            if (_la == 54) {
                this.setState(832);
                this.match(54);
            }
            this.setState(868);
            switch (this._input.LA(1)) {
                case 30: 
                case 72: {
                    this.setState(836);
                    _la = this._input.LA(1);
                    if (_la == 72) {
                        this.setState(835);
                        this.match(72);
                    }
                    this.setState(838);
                    this.match(30);
                    return _localctx;
                }
                case 82: {
                    this.setState(839);
                    this.match(82);
                    this.setState(843);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                    while (_la == 78) {
                        this.setState(840);
                        this.match(78);
                        this.setState(845);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(859);
                    this._errHandler.sync((Parser)this);
                    switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 128, this._ctx)) {
                        case 1: {
                            this.setState(847);
                            _la = this._input.LA(1);
                            if (_la == 72) {
                                this.setState(846);
                                this.match(72);
                            }
                            this.setState(849);
                            this.match(30);
                            break;
                        }
                        case 2: {
                            this.setState(851);
                            _la = this._input.LA(1);
                            if (_la == 72) {
                                this.setState(850);
                                this.match(72);
                            }
                            this.setState(853);
                            this.match(45);
                            break;
                        }
                        case 3: {
                            this.setState(855);
                            _la = this._input.LA(1);
                            if (_la == 72) {
                                this.setState(854);
                                this.match(72);
                            }
                            this.setState(857);
                            this.match(44);
                            break;
                        }
                        case 4: {
                            this.setState(858);
                            this.selector();
                        }
                    }
                    this.setState(864);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                    while (_la == 78) {
                        this.setState(861);
                        this.match(78);
                        this.setState(866);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(867);
                    this.match(67);
                    return _localctx;
                }
                default: {
                    throw new NoViableAltException((Parser)this);
                }
            }
        }
        catch (RecognitionException re) {
            this.log.error("PARSING pseudo ERROR | inserting INVALID_SELPART");
            _localctx.addErrorNode(this.getTokenFactory().create(23, "INVALID_SELPART"));
            return _localctx;
        }
        finally {
            this.exitRule();
        }
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     */
    public final StringContext string() throws RecognitionException {
        StringContext _localctx = new StringContext(this._ctx, this.getState());
        this.enterRule(_localctx, 70, 35);
        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(870);
            int _la = this._input.LA(1);
            if ((_la & 0xFFFFFFC0) != 0 || (1L << _la & 0x60000200000L) == 0L) {
                this._errHandler.recoverInline((Parser)this);
            } else {
                this.consume();
            }
        }
        catch (RecognitionException re) {
            this.log.error("PARSING string ERROR | should be empty");
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public final Bracketed_identsContext bracketed_idents() throws RecognitionException {
        Bracketed_identsContext _localctx = new Bracketed_identsContext(this._ctx, this.getState());
        this.enterRule(_localctx, 72, 36);
        try {
            this.setState(887);
            switch (this._input.LA(1)) {
                case 68: {
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(872);
                    this.match(68);
                    this.setState(876);
                    this._errHandler.sync((Parser)this);
                    int _la = this._input.LA(1);
                    while (_la == 78) {
                        this.setState(873);
                        this.match(78);
                        this.setState(878);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(882);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                    while ((_la - 25 & 0xFFFFFFC0) == 0 && (1L << _la - 25 & 0x800000000021L) != 0L) {
                        this.setState(879);
                        this.ident_list_item();
                        this.setState(884);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(885);
                    this.match(69);
                    return _localctx;
                }
                case 25: {
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(886);
                    this.match(25);
                    return _localctx;
                }
                default: {
                    throw new NoViableAltException((Parser)this);
                }
            }
        }
        catch (RecognitionException re) {
            this.log.error("Recognition exception | bracketed_idents | empty");
            _localctx.addErrorNode(this.getTokenFactory().create(25, ""));
            return _localctx;
        }
        finally {
            this.exitRule();
        }
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public final Ident_list_itemContext ident_list_item() throws RecognitionException {
        Ident_list_itemContext _localctx = new Ident_list_itemContext(this._ctx, this.getState());
        this.enterRule(_localctx, 74, 37);
        try {
            this.setState(900);
            switch (this._input.LA(1)) {
                case 30: 
                case 72: {
                    this.enterOuterAlt(_localctx, 1);
                    this.setState(890);
                    int _la = this._input.LA(1);
                    if (_la == 72) {
                        this.setState(889);
                        this.match(72);
                    }
                    this.setState(892);
                    this.match(30);
                    this.setState(896);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                    while (_la == 78) {
                        this.setState(893);
                        this.match(78);
                        this.setState(898);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    return _localctx;
                }
                case 25: {
                    this.enterOuterAlt(_localctx, 2);
                    this.setState(899);
                    this.match(25);
                    return _localctx;
                }
                default: {
                    throw new NoViableAltException((Parser)this);
                }
            }
        }
        catch (RecognitionException re) {
            this.log.error("Recognition exception | ident_list_item | empty");
            _localctx.addErrorNode(this.getTokenFactory().create(25, ""));
            return _localctx;
        }
        finally {
            this.exitRule();
        }
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     */
    public final AnyContext any() throws RecognitionException {
        AnyContext _localctx = new AnyContext(this._ctx, this.getState());
        this.enterRule(_localctx, 76, 38);
        try {
            int _la;
            this.enterOuterAlt(_localctx, 1);
            this.setState(956);
            switch (this._input.LA(1)) {
                case 30: {
                    this.setState(902);
                    this.match(30);
                    break;
                }
                case 40: {
                    this.setState(903);
                    this.match(40);
                    break;
                }
                case 45: {
                    this.setState(904);
                    this.match(45);
                    break;
                }
                case 46: {
                    this.setState(905);
                    this.match(46);
                    break;
                }
                case 47: {
                    this.setState(906);
                    this.match(47);
                    break;
                }
                case 21: 
                case 41: 
                case 42: {
                    this.setState(907);
                    this.string();
                    break;
                }
                case 48: {
                    this.setState(908);
                    this.match(48);
                    break;
                }
                case 49: {
                    this.setState(909);
                    this.match(49);
                    break;
                }
                case 43: {
                    this.setState(910);
                    this.match(43);
                    break;
                }
                case 50: {
                    this.setState(911);
                    this.match(50);
                    break;
                }
                case 83: {
                    this.setState(912);
                    this.match(83);
                    break;
                }
                case 54: {
                    this.setState(913);
                    this.match(54);
                    break;
                }
                case 55: {
                    this.setState(914);
                    this.match(55);
                    break;
                }
                case 60: {
                    this.setState(915);
                    this.match(60);
                    break;
                }
                case 61: {
                    this.setState(916);
                    this.match(61);
                    break;
                }
                case 56: {
                    this.setState(917);
                    this.match(56);
                    break;
                }
                case 57: {
                    this.setState(918);
                    this.match(57);
                    break;
                }
                case 58: {
                    this.setState(919);
                    this.match(58);
                    break;
                }
                case 59: {
                    this.setState(920);
                    this.match(59);
                    break;
                }
                case 70: {
                    this.setState(921);
                    this.match(70);
                    break;
                }
                case 72: {
                    this.setState(922);
                    this.match(72);
                    break;
                }
                case 73: {
                    this.setState(923);
                    this.match(73);
                    break;
                }
                case 74: {
                    this.setState(924);
                    this.match(74);
                    break;
                }
                case 82: {
                    this.setState(925);
                    this.match(82);
                    this.setState(929);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                    while (_la == 78) {
                        this.setState(926);
                        this.match(78);
                        this.setState(931);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(935);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                    while ((_la - 21 & 0xFFFFFFC0) == 0 && (1L << _la - 21 & 0xE03AA1FE3F780201L) != 0L) {
                        this.setState(932);
                        this.any();
                        this.setState(937);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(938);
                    this.match(67);
                    break;
                }
                case 84: {
                    this.setState(939);
                    this.match(84);
                    break;
                }
                case 66: {
                    this.setState(940);
                    this.match(66);
                    this.setState(944);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                    while ((_la - 21 & 0xFFFFFFC0) == 0 && (1L << _la - 21 & 0xE03AA1FE3F780201L) != 0L) {
                        this.setState(941);
                        this.any();
                        this.setState(946);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(947);
                    this.match(67);
                    break;
                }
                case 68: {
                    this.setState(948);
                    this.match(68);
                    this.setState(952);
                    this._errHandler.sync((Parser)this);
                    _la = this._input.LA(1);
                    while ((_la - 21 & 0xFFFFFFC0) == 0 && (1L << _la - 21 & 0xE03AA1FE3F780201L) != 0L) {
                        this.setState(949);
                        this.any();
                        this.setState(954);
                        this._errHandler.sync((Parser)this);
                        _la = this._input.LA(1);
                    }
                    this.setState(955);
                    this.match(69);
                    break;
                }
                default: {
                    throw new NoViableAltException((Parser)this);
                }
            }
            this.setState(961);
            this._errHandler.sync((Parser)this);
            _la = this._input.LA(1);
            while (_la == 78) {
                this.setState(958);
                this.match(78);
                this.setState(963);
                this._errHandler.sync((Parser)this);
                _la = this._input.LA(1);
            }
        }
        catch (RecognitionException re) {
            this.log.error("PARSING any ERROR | should be empty");
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     */
    public final NostatementContext nostatement() throws RecognitionException {
        NostatementContext _localctx = new NostatementContext(this._ctx, this.getState());
        this.enterRule(_localctx, 78, 39);
        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(964);
            int _la = this._input.LA(1);
            if ((_la - 53 & 0xFFFFFFC0) != 0 || (1L << _la - 53 & 0x1C01L) == 0L) {
                this._errHandler.recoverInline((Parser)this);
            } else {
                this.consume();
            }
        }
        catch (RecognitionException re) {
            this.log.error("PARSING nostatement ERROR | should be empty");
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     */
    public final NopropContext noprop() throws RecognitionException {
        NopropContext _localctx = new NopropContext(this._ctx, this.getState());
        this.enterRule(_localctx, 80, 40);
        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(990);
            switch (this._input.LA(1)) {
                case 40: {
                    this.setState(966);
                    this.match(40);
                    break;
                }
                case 45: {
                    this.setState(967);
                    this.match(45);
                    break;
                }
                case 46: {
                    this.setState(968);
                    this.match(46);
                    break;
                }
                case 47: {
                    this.setState(969);
                    this.match(47);
                    break;
                }
                case 21: 
                case 41: 
                case 42: {
                    this.setState(970);
                    this.string();
                    break;
                }
                case 55: {
                    this.setState(971);
                    this.match(55);
                    break;
                }
                case 43: {
                    this.setState(972);
                    this.match(43);
                    break;
                }
                case 48: {
                    this.setState(973);
                    this.match(48);
                    break;
                }
                case 49: {
                    this.setState(974);
                    this.match(49);
                    break;
                }
                case 60: {
                    this.setState(975);
                    this.match(60);
                    break;
                }
                case 61: {
                    this.setState(976);
                    this.match(61);
                    break;
                }
                case 56: {
                    this.setState(977);
                    this.match(56);
                    break;
                }
                case 57: {
                    this.setState(978);
                    this.match(57);
                    break;
                }
                case 58: {
                    this.setState(979);
                    this.match(58);
                    break;
                }
                case 59: {
                    this.setState(980);
                    this.match(59);
                    break;
                }
                case 70: {
                    this.setState(981);
                    this.match(70);
                    break;
                }
                case 73: {
                    this.setState(982);
                    this.match(73);
                    break;
                }
                case 74: {
                    this.setState(983);
                    this.match(74);
                    break;
                }
                case 84: {
                    this.setState(984);
                    this.match(84);
                    break;
                }
                case 83: {
                    this.setState(985);
                    this.match(83);
                    break;
                }
                case 54: {
                    this.setState(986);
                    this.match(54);
                    break;
                }
                case 92: {
                    this.setState(987);
                    this.match(92);
                    break;
                }
                case 88: {
                    this.setState(988);
                    this.match(88);
                    break;
                }
                case 89: {
                    this.setState(989);
                    this.match(89);
                    break;
                }
                default: {
                    throw new NoViableAltException((Parser)this);
                }
            }
            this.setState(995);
            this._errHandler.sync((Parser)this);
            int _la = this._input.LA(1);
            while (_la == 78) {
                this.setState(992);
                this.match(78);
                this.setState(997);
                this._errHandler.sync((Parser)this);
                _la = this._input.LA(1);
            }
        }
        catch (RecognitionException re) {
            this.log.error("PARSING noprop ERROR | should be empty");
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public final NoruleContext norule() throws RecognitionException {
        NoruleContext _localctx = new NoruleContext(this._ctx, this.getState());
        this.enterRule(_localctx, 82, 41);
        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(1023);
            switch (this._input.LA(1)) {
                case 45: {
                    this.setState(998);
                    this.match(45);
                    return _localctx;
                }
                case 46: {
                    this.setState(999);
                    this.match(46);
                    return _localctx;
                }
                case 47: {
                    this.setState(1000);
                    this.match(47);
                    return _localctx;
                }
                case 21: 
                case 41: 
                case 42: {
                    this.setState(1001);
                    this.string();
                    return _localctx;
                }
                case 48: {
                    this.setState(1002);
                    this.match(48);
                    return _localctx;
                }
                case 49: {
                    this.setState(1003);
                    this.match(49);
                    return _localctx;
                }
                case 50: {
                    this.setState(1004);
                    this.match(50);
                    return _localctx;
                }
                case 83: {
                    this.setState(1005);
                    this.match(83);
                    return _localctx;
                }
                case 55: {
                    this.setState(1006);
                    this.match(55);
                    return _localctx;
                }
                case 60: {
                    this.setState(1007);
                    this.match(60);
                    return _localctx;
                }
                case 61: {
                    this.setState(1008);
                    this.match(61);
                    return _localctx;
                }
                case 56: {
                    this.setState(1009);
                    this.match(56);
                    return _localctx;
                }
                case 57: {
                    this.setState(1010);
                    this.match(57);
                    return _localctx;
                }
                case 58: {
                    this.setState(1011);
                    this.match(58);
                    return _localctx;
                }
                case 59: {
                    this.setState(1012);
                    this.match(59);
                    return _localctx;
                }
                case 70: {
                    this.setState(1013);
                    this.match(70);
                    return _localctx;
                }
                case 72: {
                    this.setState(1014);
                    this.match(72);
                    return _localctx;
                }
                case 73: {
                    this.setState(1015);
                    this.match(73);
                    return _localctx;
                }
                case 84: {
                    this.setState(1016);
                    this.match(84);
                    return _localctx;
                }
                case 67: {
                    this.setState(1017);
                    this.match(67);
                    return _localctx;
                }
                case 88: {
                    this.setState(1018);
                    this.match(88);
                    return _localctx;
                }
                case 75: {
                    this.setState(1019);
                    this.match(75);
                    return _localctx;
                }
                case 77: {
                    this.setState(1020);
                    this.match(77);
                    return _localctx;
                }
                case 76: {
                    this.setState(1021);
                    this.match(76);
                    return _localctx;
                }
                case 89: {
                    this.setState(1022);
                    this.match(89);
                    return _localctx;
                }
                default: {
                    throw new NoViableAltException((Parser)this);
                }
            }
        }
        catch (RecognitionException re) {
            this.log.error("PARSING norule ERROR | should be empty");
            return _localctx;
        }
        finally {
            this.exitRule();
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public final NomediaqueryContext nomediaquery() throws RecognitionException {
        NomediaqueryContext _localctx = new NomediaqueryContext(this._ctx, this.getState());
        this.enterRule(_localctx, 84, 42);
        try {
            this.enterOuterAlt(_localctx, 1);
            this.setState(1051);
            switch (this._input.LA(1)) {
                case 45: {
                    this.setState(1025);
                    this.match(45);
                    return _localctx;
                }
                case 46: {
                    this.setState(1026);
                    this.match(46);
                    return _localctx;
                }
                case 47: {
                    this.setState(1027);
                    this.match(47);
                    return _localctx;
                }
                case 21: 
                case 41: 
                case 42: {
                    this.setState(1028);
                    this.string();
                    return _localctx;
                }
                case 48: {
                    this.setState(1029);
                    this.match(48);
                    return _localctx;
                }
                case 49: {
                    this.setState(1030);
                    this.match(49);
                    return _localctx;
                }
                case 50: {
                    this.setState(1031);
                    this.match(50);
                    return _localctx;
                }
                case 83: {
                    this.setState(1032);
                    this.match(83);
                    return _localctx;
                }
                case 60: {
                    this.setState(1033);
                    this.match(60);
                    return _localctx;
                }
                case 61: {
                    this.setState(1034);
                    this.match(61);
                    return _localctx;
                }
                case 56: {
                    this.setState(1035);
                    this.match(56);
                    return _localctx;
                }
                case 57: {
                    this.setState(1036);
                    this.match(57);
                    return _localctx;
                }
                case 58: {
                    this.setState(1037);
                    this.match(58);
                    return _localctx;
                }
                case 59: {
                    this.setState(1038);
                    this.match(59);
                    return _localctx;
                }
                case 70: {
                    this.setState(1039);
                    this.match(70);
                    return _localctx;
                }
                case 72: {
                    this.setState(1040);
                    this.match(72);
                    return _localctx;
                }
                case 73: {
                    this.setState(1041);
                    this.match(73);
                    return _localctx;
                }
                case 84: {
                    this.setState(1042);
                    this.match(84);
                    return _localctx;
                }
                case 67: {
                    this.setState(1043);
                    this.match(67);
                    return _localctx;
                }
                case 88: {
                    this.setState(1044);
                    this.match(88);
                    return _localctx;
                }
                case 54: {
                    this.setState(1045);
                    this.match(54);
                    return _localctx;
                }
                case 74: {
                    this.setState(1046);
                    this.match(74);
                    return _localctx;
                }
                case 82: {
                    this.setState(1047);
                    this.match(82);
                    return _localctx;
                }
                case 75: {
                    this.setState(1048);
                    this.match(75);
                    return _localctx;
                }
                case 77: {
                    this.setState(1049);
                    this.match(77);
                    return _localctx;
                }
                case 76: {
                    this.setState(1050);
                    this.match(76);
                    return _localctx;
                }
                default: {
                    throw new NoViableAltException((Parser)this);
                }
            }
        }
        catch (RecognitionException re) {
            this.log.error("PARSING nomediaquery ERROR | should be empty");
            return _localctx;
        }
        finally {
            this.exitRule();
        }
    }

    static {
        int i;
        RuntimeMetaData.checkVersion((String)"4.5.3", (String)"4.5.3");
        _sharedContextCache = new PredictionContextCache();
        ruleNames = new String[]{"inlinestyle", "stylesheet", "statement", "atstatement", "import_uri", "page", "margin_rule", "inlineset", "media", "media_query", "media_term", "media_expression", "media_rule", "keyframes_name", "keyframe_block", "keyframe_selector", "unknown_atrule", "unknown_atrule_body", "ruleset", "declarations", "declaration", "important", "property", "terms", "term", "funct", "valuepart", "funct_args", "funct_argument", "combined_selector", "combinator", "selector", "selpart", "attribute", "pseudo", "string", "bracketed_idents", "ident_list_item", "any", "nostatement", "noprop", "norule", "nomediaquery"};
        _LITERAL_NAMES = new String[]{null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "'important'", null, null, "'@import'", "'@keyframes'", "'@media'", "'@page'", null, "'@viewport'", "'@font-face'", null, null, null, null, null, null, null, null, null, null, null, null, "'<!--'", "'-->'", "';'", "':'", "','", "'?'", "'%'", "'='", "'/'", "'>'", "'<'", "'{'", "'}'", "'''", "'\"'", "'('", "')'", "'['", "']'", "'!'", "'~'", "'-'", "'+'", "'*'", "'#'", "'&'", "'^'", null, null, null, "'expression('", null, "'~='", "'|='", "'^='", "'$='", "'*='"};
        _SYMBOLIC_NAMES = new String[]{null, "STYLESHEET", "INLINESTYLE", "ATBLOCK", "CURLYBLOCK", "PARENBLOCK", "BRACKETBLOCK", "RULE", "SELECTOR", "ELEMENT", "PSEUDOCLASS", "PSEUDOELEM", "ADJACENT", "PRECEDING", "CHILD", "DESCENDANT", "ATTRIBUTE", "SET", "DECLARATION", "VALUE", "MEDIA_QUERY", "INVALID_STRING", "INVALID_SELECTOR", "INVALID_SELPART", "INVALID_DECLARATION", "INVALID_STATEMENT", "INVALID_ATSTATEMENT", "INVALID_IMPORT", "INVALID_DIRECTIVE", "IMPORTANT", "IDENT", "CHARSET", "IMPORT", "KEYFRAMES", "MEDIA", "PAGE", "MARGIN_AREA", "VIEWPORT", "FONTFACE", "ATKEYWORD", "CLASSKEYWORD", "STRING", "UNCLOSED_STRING", "HASH", "INDEX", "NUMBER", "PERCENTAGE", "DIMENSION", "URI", "UNCLOSED_URI", "UNIRANGE", "CDO", "CDC", "SEMICOLON", "COLON", "COMMA", "QUESTION", "PERCENT", "EQUALS", "SLASH", "GREATER", "LESS", "LCURLY", "RCURLY", "APOS", "QUOT", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "EXCLAMATION", "TILDE", "MINUS", "PLUS", "ASTERISK", "POUND", "AMPERSAND", "HAT", "S", "COMMENT", "SL_COMMENT", "EXPRESSION", "FUNCTION", "INCLUDES", "DASHMATCH", "STARTSWITH", "ENDSWITH", "CONTAINS", "CTRL", "INVALID_TOKEN", "STRING_MACR", "UNCLOSED_STRING_MACR", "STRING_CHAR"};
        VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);
        tokenNames = new String[_SYMBOLIC_NAMES.length];
        for (i = 0; i < tokenNames.length; ++i) {
            CSSParser.tokenNames[i] = VOCABULARY.getLiteralName(i);
            if (tokenNames[i] == null) {
                CSSParser.tokenNames[i] = VOCABULARY.getSymbolicName(i);
            }
            if (tokenNames[i] != null) continue;
            CSSParser.tokenNames[i] = "<INVALID>";
        }
        _ATN = new ATNDeserializer().deserialize(_serializedATN.toCharArray());
        _decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
        for (i = 0; i < _ATN.getNumberOfDecisions(); ++i) {
            CSSParser._decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
        }
    }

    public static class NomediaqueryContext
    extends ParserRuleContext {
        public TerminalNode NUMBER() {
            return this.getToken(45, 0);
        }

        public TerminalNode PERCENTAGE() {
            return this.getToken(46, 0);
        }

        public TerminalNode DIMENSION() {
            return this.getToken(47, 0);
        }

        public StringContext string() {
            return (StringContext)this.getRuleContext(StringContext.class, 0);
        }

        public TerminalNode URI() {
            return this.getToken(48, 0);
        }

        public TerminalNode UNCLOSED_URI() {
            return this.getToken(49, 0);
        }

        public TerminalNode UNIRANGE() {
            return this.getToken(50, 0);
        }

        public TerminalNode INCLUDES() {
            return this.getToken(83, 0);
        }

        public TerminalNode GREATER() {
            return this.getToken(60, 0);
        }

        public TerminalNode LESS() {
            return this.getToken(61, 0);
        }

        public TerminalNode QUESTION() {
            return this.getToken(56, 0);
        }

        public TerminalNode PERCENT() {
            return this.getToken(57, 0);
        }

        public TerminalNode EQUALS() {
            return this.getToken(58, 0);
        }

        public TerminalNode SLASH() {
            return this.getToken(59, 0);
        }

        public TerminalNode EXCLAMATION() {
            return this.getToken(70, 0);
        }

        public TerminalNode MINUS() {
            return this.getToken(72, 0);
        }

        public TerminalNode PLUS() {
            return this.getToken(73, 0);
        }

        public TerminalNode DASHMATCH() {
            return this.getToken(84, 0);
        }

        public TerminalNode RPAREN() {
            return this.getToken(67, 0);
        }

        public TerminalNode CTRL() {
            return this.getToken(88, 0);
        }

        public TerminalNode COLON() {
            return this.getToken(54, 0);
        }

        public TerminalNode ASTERISK() {
            return this.getToken(74, 0);
        }

        public TerminalNode FUNCTION() {
            return this.getToken(82, 0);
        }

        public TerminalNode POUND() {
            return this.getToken(75, 0);
        }

        public TerminalNode HAT() {
            return this.getToken(77, 0);
        }

        public TerminalNode AMPERSAND() {
            return this.getToken(76, 0);
        }

        public NomediaqueryContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 42;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterNomediaquery(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitNomediaquery(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitNomediaquery(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class NoruleContext
    extends ParserRuleContext {
        public TerminalNode NUMBER() {
            return this.getToken(45, 0);
        }

        public TerminalNode PERCENTAGE() {
            return this.getToken(46, 0);
        }

        public TerminalNode DIMENSION() {
            return this.getToken(47, 0);
        }

        public StringContext string() {
            return (StringContext)this.getRuleContext(StringContext.class, 0);
        }

        public TerminalNode URI() {
            return this.getToken(48, 0);
        }

        public TerminalNode UNCLOSED_URI() {
            return this.getToken(49, 0);
        }

        public TerminalNode UNIRANGE() {
            return this.getToken(50, 0);
        }

        public TerminalNode INCLUDES() {
            return this.getToken(83, 0);
        }

        public TerminalNode COMMA() {
            return this.getToken(55, 0);
        }

        public TerminalNode GREATER() {
            return this.getToken(60, 0);
        }

        public TerminalNode LESS() {
            return this.getToken(61, 0);
        }

        public TerminalNode QUESTION() {
            return this.getToken(56, 0);
        }

        public TerminalNode PERCENT() {
            return this.getToken(57, 0);
        }

        public TerminalNode EQUALS() {
            return this.getToken(58, 0);
        }

        public TerminalNode SLASH() {
            return this.getToken(59, 0);
        }

        public TerminalNode EXCLAMATION() {
            return this.getToken(70, 0);
        }

        public TerminalNode MINUS() {
            return this.getToken(72, 0);
        }

        public TerminalNode PLUS() {
            return this.getToken(73, 0);
        }

        public TerminalNode DASHMATCH() {
            return this.getToken(84, 0);
        }

        public TerminalNode RPAREN() {
            return this.getToken(67, 0);
        }

        public TerminalNode CTRL() {
            return this.getToken(88, 0);
        }

        public TerminalNode POUND() {
            return this.getToken(75, 0);
        }

        public TerminalNode HAT() {
            return this.getToken(77, 0);
        }

        public TerminalNode AMPERSAND() {
            return this.getToken(76, 0);
        }

        public TerminalNode INVALID_TOKEN() {
            return this.getToken(89, 0);
        }

        public NoruleContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 41;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterNorule(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitNorule(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitNorule(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class NopropContext
    extends ParserRuleContext {
        public TerminalNode CLASSKEYWORD() {
            return this.getToken(40, 0);
        }

        public TerminalNode NUMBER() {
            return this.getToken(45, 0);
        }

        public TerminalNode PERCENTAGE() {
            return this.getToken(46, 0);
        }

        public TerminalNode DIMENSION() {
            return this.getToken(47, 0);
        }

        public StringContext string() {
            return (StringContext)this.getRuleContext(StringContext.class, 0);
        }

        public TerminalNode COMMA() {
            return this.getToken(55, 0);
        }

        public TerminalNode HASH() {
            return this.getToken(43, 0);
        }

        public TerminalNode URI() {
            return this.getToken(48, 0);
        }

        public TerminalNode UNCLOSED_URI() {
            return this.getToken(49, 0);
        }

        public TerminalNode GREATER() {
            return this.getToken(60, 0);
        }

        public TerminalNode LESS() {
            return this.getToken(61, 0);
        }

        public TerminalNode QUESTION() {
            return this.getToken(56, 0);
        }

        public TerminalNode PERCENT() {
            return this.getToken(57, 0);
        }

        public TerminalNode EQUALS() {
            return this.getToken(58, 0);
        }

        public TerminalNode SLASH() {
            return this.getToken(59, 0);
        }

        public TerminalNode EXCLAMATION() {
            return this.getToken(70, 0);
        }

        public TerminalNode PLUS() {
            return this.getToken(73, 0);
        }

        public TerminalNode ASTERISK() {
            return this.getToken(74, 0);
        }

        public TerminalNode DASHMATCH() {
            return this.getToken(84, 0);
        }

        public TerminalNode INCLUDES() {
            return this.getToken(83, 0);
        }

        public TerminalNode COLON() {
            return this.getToken(54, 0);
        }

        public TerminalNode STRING_CHAR() {
            return this.getToken(92, 0);
        }

        public TerminalNode CTRL() {
            return this.getToken(88, 0);
        }

        public TerminalNode INVALID_TOKEN() {
            return this.getToken(89, 0);
        }

        public List<TerminalNode> S() {
            return this.getTokens(78);
        }

        public TerminalNode S(int i) {
            return this.getToken(78, i);
        }

        public NopropContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 40;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterNoprop(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitNoprop(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitNoprop(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class NostatementContext
    extends ParserRuleContext {
        public TerminalNode RCURLY() {
            return this.getToken(63, 0);
        }

        public TerminalNode SEMICOLON() {
            return this.getToken(53, 0);
        }

        public TerminalNode QUOT() {
            return this.getToken(65, 0);
        }

        public TerminalNode APOS() {
            return this.getToken(64, 0);
        }

        public NostatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 39;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterNostatement(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitNostatement(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitNostatement(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class AnyContext
    extends ParserRuleContext {
        public TerminalNode IDENT() {
            return this.getToken(30, 0);
        }

        public TerminalNode CLASSKEYWORD() {
            return this.getToken(40, 0);
        }

        public TerminalNode NUMBER() {
            return this.getToken(45, 0);
        }

        public TerminalNode PERCENTAGE() {
            return this.getToken(46, 0);
        }

        public TerminalNode DIMENSION() {
            return this.getToken(47, 0);
        }

        public StringContext string() {
            return (StringContext)this.getRuleContext(StringContext.class, 0);
        }

        public TerminalNode URI() {
            return this.getToken(48, 0);
        }

        public TerminalNode UNCLOSED_URI() {
            return this.getToken(49, 0);
        }

        public TerminalNode HASH() {
            return this.getToken(43, 0);
        }

        public TerminalNode UNIRANGE() {
            return this.getToken(50, 0);
        }

        public TerminalNode INCLUDES() {
            return this.getToken(83, 0);
        }

        public TerminalNode COLON() {
            return this.getToken(54, 0);
        }

        public TerminalNode COMMA() {
            return this.getToken(55, 0);
        }

        public TerminalNode GREATER() {
            return this.getToken(60, 0);
        }

        public TerminalNode LESS() {
            return this.getToken(61, 0);
        }

        public TerminalNode QUESTION() {
            return this.getToken(56, 0);
        }

        public TerminalNode PERCENT() {
            return this.getToken(57, 0);
        }

        public TerminalNode EQUALS() {
            return this.getToken(58, 0);
        }

        public TerminalNode SLASH() {
            return this.getToken(59, 0);
        }

        public TerminalNode EXCLAMATION() {
            return this.getToken(70, 0);
        }

        public TerminalNode MINUS() {
            return this.getToken(72, 0);
        }

        public TerminalNode PLUS() {
            return this.getToken(73, 0);
        }

        public TerminalNode ASTERISK() {
            return this.getToken(74, 0);
        }

        public TerminalNode FUNCTION() {
            return this.getToken(82, 0);
        }

        public TerminalNode RPAREN() {
            return this.getToken(67, 0);
        }

        public TerminalNode DASHMATCH() {
            return this.getToken(84, 0);
        }

        public TerminalNode LPAREN() {
            return this.getToken(66, 0);
        }

        public TerminalNode LBRACKET() {
            return this.getToken(68, 0);
        }

        public TerminalNode RBRACKET() {
            return this.getToken(69, 0);
        }

        public List<TerminalNode> S() {
            return this.getTokens(78);
        }

        public TerminalNode S(int i) {
            return this.getToken(78, i);
        }

        public List<AnyContext> any() {
            return this.getRuleContexts(AnyContext.class);
        }

        public AnyContext any(int i) {
            return (AnyContext)this.getRuleContext(AnyContext.class, i);
        }

        public AnyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 38;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterAny(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitAny(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitAny(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class Ident_list_itemContext
    extends ParserRuleContext {
        public TerminalNode IDENT() {
            return this.getToken(30, 0);
        }

        public TerminalNode MINUS() {
            return this.getToken(72, 0);
        }

        public List<TerminalNode> S() {
            return this.getTokens(78);
        }

        public TerminalNode S(int i) {
            return this.getToken(78, i);
        }

        public TerminalNode INVALID_STATEMENT() {
            return this.getToken(25, 0);
        }

        public Ident_list_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 37;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterIdent_list_item(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitIdent_list_item(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitIdent_list_item(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class Bracketed_identsContext
    extends ParserRuleContext {
        public TerminalNode LBRACKET() {
            return this.getToken(68, 0);
        }

        public TerminalNode RBRACKET() {
            return this.getToken(69, 0);
        }

        public List<TerminalNode> S() {
            return this.getTokens(78);
        }

        public TerminalNode S(int i) {
            return this.getToken(78, i);
        }

        public List<Ident_list_itemContext> ident_list_item() {
            return this.getRuleContexts(Ident_list_itemContext.class);
        }

        public Ident_list_itemContext ident_list_item(int i) {
            return (Ident_list_itemContext)this.getRuleContext(Ident_list_itemContext.class, i);
        }

        public TerminalNode INVALID_STATEMENT() {
            return this.getToken(25, 0);
        }

        public Bracketed_identsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 36;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterBracketed_idents(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitBracketed_idents(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitBracketed_idents(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class StringContext
    extends ParserRuleContext {
        public TerminalNode STRING() {
            return this.getToken(41, 0);
        }

        public TerminalNode UNCLOSED_STRING() {
            return this.getToken(42, 0);
        }

        public TerminalNode INVALID_STRING() {
            return this.getToken(21, 0);
        }

        public StringContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 35;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterString(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitString(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitString(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class PseudoContext
    extends ParserRuleContext {
        public List<TerminalNode> COLON() {
            return this.getTokens(54);
        }

        public TerminalNode COLON(int i) {
            return this.getToken(54, i);
        }

        public TerminalNode IDENT() {
            return this.getToken(30, 0);
        }

        public TerminalNode FUNCTION() {
            return this.getToken(82, 0);
        }

        public TerminalNode RPAREN() {
            return this.getToken(67, 0);
        }

        public TerminalNode NUMBER() {
            return this.getToken(45, 0);
        }

        public TerminalNode INDEX() {
            return this.getToken(44, 0);
        }

        public SelectorContext selector() {
            return (SelectorContext)this.getRuleContext(SelectorContext.class, 0);
        }

        public TerminalNode MINUS() {
            return this.getToken(72, 0);
        }

        public List<TerminalNode> S() {
            return this.getTokens(78);
        }

        public TerminalNode S(int i) {
            return this.getToken(78, i);
        }

        public PseudoContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 34;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterPseudo(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitPseudo(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitPseudo(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class AttributeContext
    extends ParserRuleContext {
        public List<TerminalNode> IDENT() {
            return this.getTokens(30);
        }

        public TerminalNode IDENT(int i) {
            return this.getToken(30, i);
        }

        public List<TerminalNode> S() {
            return this.getTokens(78);
        }

        public TerminalNode S(int i) {
            return this.getToken(78, i);
        }

        public TerminalNode EQUALS() {
            return this.getToken(58, 0);
        }

        public TerminalNode INCLUDES() {
            return this.getToken(83, 0);
        }

        public TerminalNode DASHMATCH() {
            return this.getToken(84, 0);
        }

        public TerminalNode STARTSWITH() {
            return this.getToken(85, 0);
        }

        public TerminalNode ENDSWITH() {
            return this.getToken(86, 0);
        }

        public TerminalNode CONTAINS() {
            return this.getToken(87, 0);
        }

        public StringContext string() {
            return (StringContext)this.getRuleContext(StringContext.class, 0);
        }

        public AttributeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 33;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterAttribute(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitAttribute(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitAttribute(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class SelpartContext
    extends ParserRuleContext {
        public TerminalNode HASH() {
            return this.getToken(43, 0);
        }

        public TerminalNode CLASSKEYWORD() {
            return this.getToken(40, 0);
        }

        public TerminalNode LBRACKET() {
            return this.getToken(68, 0);
        }

        public AttributeContext attribute() {
            return (AttributeContext)this.getRuleContext(AttributeContext.class, 0);
        }

        public TerminalNode RBRACKET() {
            return this.getToken(69, 0);
        }

        public List<TerminalNode> S() {
            return this.getTokens(78);
        }

        public TerminalNode S(int i) {
            return this.getToken(78, i);
        }

        public PseudoContext pseudo() {
            return (PseudoContext)this.getRuleContext(PseudoContext.class, 0);
        }

        public TerminalNode INVALID_SELPART() {
            return this.getToken(23, 0);
        }

        public SelpartContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 32;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterSelpart(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitSelpart(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitSelpart(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class SelectorContext
    extends ParserRuleContext {
        public TerminalNode IDENT() {
            return this.getToken(30, 0);
        }

        public TerminalNode ASTERISK() {
            return this.getToken(74, 0);
        }

        public List<SelpartContext> selpart() {
            return this.getRuleContexts(SelpartContext.class);
        }

        public SelpartContext selpart(int i) {
            return (SelpartContext)this.getRuleContext(SelpartContext.class, i);
        }

        public List<TerminalNode> S() {
            return this.getTokens(78);
        }

        public TerminalNode S(int i) {
            return this.getToken(78, i);
        }

        public SelectorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 31;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterSelector(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitSelector(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitSelector(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class CombinatorContext
    extends ParserRuleContext {
        public TerminalNode GREATER() {
            return this.getToken(60, 0);
        }

        public List<TerminalNode> S() {
            return this.getTokens(78);
        }

        public TerminalNode S(int i) {
            return this.getToken(78, i);
        }

        public TerminalNode PLUS() {
            return this.getToken(73, 0);
        }

        public TerminalNode TILDE() {
            return this.getToken(71, 0);
        }

        public CombinatorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 30;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterCombinator(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitCombinator(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitCombinator(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class Combined_selectorContext
    extends ParserRuleContext {
        public List<SelectorContext> selector() {
            return this.getRuleContexts(SelectorContext.class);
        }

        public SelectorContext selector(int i) {
            return (SelectorContext)this.getRuleContext(SelectorContext.class, i);
        }

        public List<CombinatorContext> combinator() {
            return this.getRuleContexts(CombinatorContext.class);
        }

        public CombinatorContext combinator(int i) {
            return (CombinatorContext)this.getRuleContext(CombinatorContext.class, i);
        }

        public Combined_selectorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 29;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterCombined_selector(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitCombined_selector(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitCombined_selector(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class Funct_argumentContext
    extends ParserRuleContext {
        public TerminalNode IDENT() {
            return this.getToken(30, 0);
        }

        public TerminalNode PLUS() {
            return this.getToken(73, 0);
        }

        public TerminalNode MINUS() {
            return this.getToken(72, 0);
        }

        public TerminalNode ASTERISK() {
            return this.getToken(74, 0);
        }

        public TerminalNode SLASH() {
            return this.getToken(59, 0);
        }

        public TerminalNode LPAREN() {
            return this.getToken(66, 0);
        }

        public TerminalNode RPAREN() {
            return this.getToken(67, 0);
        }

        public TerminalNode NUMBER() {
            return this.getToken(45, 0);
        }

        public TerminalNode PERCENTAGE() {
            return this.getToken(46, 0);
        }

        public TerminalNode DIMENSION() {
            return this.getToken(47, 0);
        }

        public TerminalNode HASH() {
            return this.getToken(43, 0);
        }

        public StringContext string() {
            return (StringContext)this.getRuleContext(StringContext.class, 0);
        }

        public FunctContext funct() {
            return (FunctContext)this.getRuleContext(FunctContext.class, 0);
        }

        public TerminalNode COMMA() {
            return this.getToken(55, 0);
        }

        public TerminalNode CLASSKEYWORD() {
            return this.getToken(40, 0);
        }

        public TerminalNode UNIRANGE() {
            return this.getToken(50, 0);
        }

        public TerminalNode INCLUDES() {
            return this.getToken(83, 0);
        }

        public TerminalNode COLON() {
            return this.getToken(54, 0);
        }

        public TerminalNode GREATER() {
            return this.getToken(60, 0);
        }

        public TerminalNode LESS() {
            return this.getToken(61, 0);
        }

        public TerminalNode QUESTION() {
            return this.getToken(56, 0);
        }

        public TerminalNode PERCENT() {
            return this.getToken(57, 0);
        }

        public TerminalNode EQUALS() {
            return this.getToken(58, 0);
        }

        public TerminalNode DASHMATCH() {
            return this.getToken(84, 0);
        }

        public List<TerminalNode> S() {
            return this.getTokens(78);
        }

        public TerminalNode S(int i) {
            return this.getToken(78, i);
        }

        public Funct_argumentContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 28;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterFunct_argument(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitFunct_argument(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitFunct_argument(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class Funct_argsContext
    extends ParserRuleContext {
        public List<Funct_argumentContext> funct_argument() {
            return this.getRuleContexts(Funct_argumentContext.class);
        }

        public Funct_argumentContext funct_argument(int i) {
            return (Funct_argumentContext)this.getRuleContext(Funct_argumentContext.class, i);
        }

        public Funct_argsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 27;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterFunct_args(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitFunct_args(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitFunct_args(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class ValuepartContext
    extends ParserRuleContext {
        public TerminalNode IDENT() {
            return this.getToken(30, 0);
        }

        public TerminalNode NUMBER() {
            return this.getToken(45, 0);
        }

        public TerminalNode PERCENTAGE() {
            return this.getToken(46, 0);
        }

        public TerminalNode DIMENSION() {
            return this.getToken(47, 0);
        }

        public StringContext string() {
            return (StringContext)this.getRuleContext(StringContext.class, 0);
        }

        public TerminalNode URI() {
            return this.getToken(48, 0);
        }

        public TerminalNode UNCLOSED_URI() {
            return this.getToken(49, 0);
        }

        public TerminalNode HASH() {
            return this.getToken(43, 0);
        }

        public FunctContext funct() {
            return (FunctContext)this.getRuleContext(FunctContext.class, 0);
        }

        public TerminalNode COMMA() {
            return this.getToken(55, 0);
        }

        public TerminalNode SLASH() {
            return this.getToken(59, 0);
        }

        public Bracketed_identsContext bracketed_idents() {
            return (Bracketed_identsContext)this.getRuleContext(Bracketed_identsContext.class, 0);
        }

        public TerminalNode CLASSKEYWORD() {
            return this.getToken(40, 0);
        }

        public TerminalNode UNIRANGE() {
            return this.getToken(50, 0);
        }

        public TerminalNode INCLUDES() {
            return this.getToken(83, 0);
        }

        public TerminalNode COLON() {
            return this.getToken(54, 0);
        }

        public TerminalNode GREATER() {
            return this.getToken(60, 0);
        }

        public TerminalNode LESS() {
            return this.getToken(61, 0);
        }

        public TerminalNode QUESTION() {
            return this.getToken(56, 0);
        }

        public TerminalNode PERCENT() {
            return this.getToken(57, 0);
        }

        public TerminalNode EQUALS() {
            return this.getToken(58, 0);
        }

        public TerminalNode ASTERISK() {
            return this.getToken(74, 0);
        }

        public TerminalNode DASHMATCH() {
            return this.getToken(84, 0);
        }

        public TerminalNode LPAREN() {
            return this.getToken(66, 0);
        }

        public TerminalNode RPAREN() {
            return this.getToken(67, 0);
        }

        public List<TerminalNode> S() {
            return this.getTokens(78);
        }

        public TerminalNode S(int i) {
            return this.getToken(78, i);
        }

        public TerminalNode MINUS() {
            return this.getToken(72, 0);
        }

        public List<ValuepartContext> valuepart() {
            return this.getRuleContexts(ValuepartContext.class);
        }

        public ValuepartContext valuepart(int i) {
            return (ValuepartContext)this.getRuleContext(ValuepartContext.class, i);
        }

        public TerminalNode PLUS() {
            return this.getToken(73, 0);
        }

        public ValuepartContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 26;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterValuepart(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitValuepart(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitValuepart(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class FunctContext
    extends ParserRuleContext {
        public TerminalNode EXPRESSION() {
            return this.getToken(81, 0);
        }

        public TerminalNode RPAREN() {
            return this.getToken(67, 0);
        }

        public List<TerminalNode> S() {
            return this.getTokens(78);
        }

        public TerminalNode S(int i) {
            return this.getToken(78, i);
        }

        public List<AnyContext> any() {
            return this.getRuleContexts(AnyContext.class);
        }

        public AnyContext any(int i) {
            return (AnyContext)this.getRuleContext(AnyContext.class, i);
        }

        public List<TerminalNode> SEMICOLON() {
            return this.getTokens(53);
        }

        public TerminalNode SEMICOLON(int i) {
            return this.getToken(53, i);
        }

        public TerminalNode FUNCTION() {
            return this.getToken(82, 0);
        }

        public Funct_argsContext funct_args() {
            return (Funct_argsContext)this.getRuleContext(Funct_argsContext.class, 0);
        }

        public FunctContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 25;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterFunct(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitFunct(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitFunct(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class TermInvalidContext
    extends TermContext {
        public TerminalNode LCURLY() {
            return this.getToken(62, 0);
        }

        public TerminalNode RCURLY() {
            return this.getToken(63, 0);
        }

        public List<TerminalNode> S() {
            return this.getTokens(78);
        }

        public TerminalNode S(int i) {
            return this.getToken(78, i);
        }

        public List<AnyContext> any() {
            return this.getRuleContexts(AnyContext.class);
        }

        public AnyContext any(int i) {
            return (AnyContext)this.getRuleContext(AnyContext.class, i);
        }

        public List<TerminalNode> SEMICOLON() {
            return this.getTokens(53);
        }

        public TerminalNode SEMICOLON(int i) {
            return this.getToken(53, i);
        }

        public TerminalNode ATKEYWORD() {
            return this.getToken(39, 0);
        }

        public TermInvalidContext(TermContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterTermInvalid(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitTermInvalid(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitTermInvalid(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class TermValuePartContext
    extends TermContext {
        public ValuepartContext valuepart() {
            return (ValuepartContext)this.getRuleContext(ValuepartContext.class, 0);
        }

        public TermValuePartContext(TermContext ctx) {
            this.copyFrom(ctx);
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterTermValuePart(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitTermValuePart(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitTermValuePart(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class TermContext
    extends ParserRuleContext {
        public TermContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 24;
        }

        public TermContext() {
        }

        public void copyFrom(TermContext ctx) {
            super.copyFrom((ParserRuleContext)ctx);
        }
    }

    public static class TermsContext
    extends ParserRuleContext {
        public List<TermContext> term() {
            return this.getRuleContexts(TermContext.class);
        }

        public TermContext term(int i) {
            return (TermContext)this.getRuleContext(TermContext.class, i);
        }

        public TermsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 23;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterTerms(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitTerms(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitTerms(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class PropertyContext
    extends ParserRuleContext {
        public TerminalNode IDENT() {
            return this.getToken(30, 0);
        }

        public TerminalNode MINUS() {
            return this.getToken(72, 0);
        }

        public List<TerminalNode> S() {
            return this.getTokens(78);
        }

        public TerminalNode S(int i) {
            return this.getToken(78, i);
        }

        public PropertyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 22;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterProperty(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitProperty(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitProperty(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class ImportantContext
    extends ParserRuleContext {
        public TerminalNode EXCLAMATION() {
            return this.getToken(70, 0);
        }

        public TerminalNode IMPORTANT() {
            return this.getToken(29, 0);
        }

        public List<TerminalNode> S() {
            return this.getTokens(78);
        }

        public TerminalNode S(int i) {
            return this.getToken(78, i);
        }

        public ImportantContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 21;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterImportant(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitImportant(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitImportant(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class DeclarationContext
    extends ParserRuleContext {
        public PropertyContext property() {
            return (PropertyContext)this.getRuleContext(PropertyContext.class, 0);
        }

        public TerminalNode COLON() {
            return this.getToken(54, 0);
        }

        public List<TerminalNode> S() {
            return this.getTokens(78);
        }

        public TerminalNode S(int i) {
            return this.getToken(78, i);
        }

        public TermsContext terms() {
            return (TermsContext)this.getRuleContext(TermsContext.class, 0);
        }

        public ImportantContext important() {
            return (ImportantContext)this.getRuleContext(ImportantContext.class, 0);
        }

        public NopropContext noprop() {
            return (NopropContext)this.getRuleContext(NopropContext.class, 0);
        }

        public List<AnyContext> any() {
            return this.getRuleContexts(AnyContext.class);
        }

        public AnyContext any(int i) {
            return (AnyContext)this.getRuleContext(AnyContext.class, i);
        }

        public DeclarationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 20;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterDeclaration(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitDeclaration(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitDeclaration(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class DeclarationsContext
    extends ParserRuleContext {
        public List<DeclarationContext> declaration() {
            return this.getRuleContexts(DeclarationContext.class);
        }

        public DeclarationContext declaration(int i) {
            return (DeclarationContext)this.getRuleContext(DeclarationContext.class, i);
        }

        public List<TerminalNode> SEMICOLON() {
            return this.getTokens(53);
        }

        public TerminalNode SEMICOLON(int i) {
            return this.getToken(53, i);
        }

        public List<TerminalNode> S() {
            return this.getTokens(78);
        }

        public TerminalNode S(int i) {
            return this.getToken(78, i);
        }

        public DeclarationsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 19;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterDeclarations(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitDeclarations(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitDeclarations(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class RulesetContext
    extends ParserRuleContext {
        public TerminalNode LCURLY() {
            return this.getToken(62, 0);
        }

        public DeclarationsContext declarations() {
            return (DeclarationsContext)this.getRuleContext(DeclarationsContext.class, 0);
        }

        public TerminalNode RCURLY() {
            return this.getToken(63, 0);
        }

        public List<Combined_selectorContext> combined_selector() {
            return this.getRuleContexts(Combined_selectorContext.class);
        }

        public Combined_selectorContext combined_selector(int i) {
            return (Combined_selectorContext)this.getRuleContext(Combined_selectorContext.class, i);
        }

        public List<TerminalNode> S() {
            return this.getTokens(78);
        }

        public TerminalNode S(int i) {
            return this.getToken(78, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(55);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(55, i);
        }

        public NoruleContext norule() {
            return (NoruleContext)this.getRuleContext(NoruleContext.class, 0);
        }

        public RulesetContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 18;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterRuleset(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitRuleset(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitRuleset(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class Unknown_atrule_bodyContext
    extends ParserRuleContext {
        public TerminalNode LCURLY() {
            return this.getToken(62, 0);
        }

        public TerminalNode RCURLY() {
            return this.getToken(63, 0);
        }

        public List<TerminalNode> S() {
            return this.getTokens(78);
        }

        public TerminalNode S(int i) {
            return this.getToken(78, i);
        }

        public Unknown_atrule_bodyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 17;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterUnknown_atrule_body(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitUnknown_atrule_body(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitUnknown_atrule_body(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class Unknown_atruleContext
    extends ParserRuleContext {
        public TerminalNode ATKEYWORD() {
            return this.getToken(39, 0);
        }

        public Unknown_atrule_bodyContext unknown_atrule_body() {
            return (Unknown_atrule_bodyContext)this.getRuleContext(Unknown_atrule_bodyContext.class, 0);
        }

        public List<TerminalNode> S() {
            return this.getTokens(78);
        }

        public TerminalNode S(int i) {
            return this.getToken(78, i);
        }

        public List<AnyContext> any() {
            return this.getRuleContexts(AnyContext.class);
        }

        public AnyContext any(int i) {
            return (AnyContext)this.getRuleContext(AnyContext.class, i);
        }

        public TerminalNode SEMICOLON() {
            return this.getToken(53, 0);
        }

        public Unknown_atruleContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 16;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterUnknown_atrule(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitUnknown_atrule(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitUnknown_atrule(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class Keyframe_selectorContext
    extends ParserRuleContext {
        public TerminalNode IDENT() {
            return this.getToken(30, 0);
        }

        public List<TerminalNode> S() {
            return this.getTokens(78);
        }

        public TerminalNode S(int i) {
            return this.getToken(78, i);
        }

        public TerminalNode PERCENTAGE() {
            return this.getToken(46, 0);
        }

        public Keyframe_selectorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 15;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterKeyframe_selector(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitKeyframe_selector(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitKeyframe_selector(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class Keyframe_blockContext
    extends ParserRuleContext {
        public List<Keyframe_selectorContext> keyframe_selector() {
            return this.getRuleContexts(Keyframe_selectorContext.class);
        }

        public Keyframe_selectorContext keyframe_selector(int i) {
            return (Keyframe_selectorContext)this.getRuleContext(Keyframe_selectorContext.class, i);
        }

        public TerminalNode LCURLY() {
            return this.getToken(62, 0);
        }

        public DeclarationsContext declarations() {
            return (DeclarationsContext)this.getRuleContext(DeclarationsContext.class, 0);
        }

        public TerminalNode RCURLY() {
            return this.getToken(63, 0);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(55);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(55, i);
        }

        public List<TerminalNode> S() {
            return this.getTokens(78);
        }

        public TerminalNode S(int i) {
            return this.getToken(78, i);
        }

        public Keyframe_blockContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 14;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterKeyframe_block(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitKeyframe_block(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitKeyframe_block(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class Keyframes_nameContext
    extends ParserRuleContext {
        public TerminalNode IDENT() {
            return this.getToken(30, 0);
        }

        public StringContext string() {
            return (StringContext)this.getRuleContext(StringContext.class, 0);
        }

        public Keyframes_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 13;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterKeyframes_name(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitKeyframes_name(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitKeyframes_name(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class Media_ruleContext
    extends ParserRuleContext {
        public RulesetContext ruleset() {
            return (RulesetContext)this.getRuleContext(RulesetContext.class, 0);
        }

        public AtstatementContext atstatement() {
            return (AtstatementContext)this.getRuleContext(AtstatementContext.class, 0);
        }

        public Media_ruleContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 12;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterMedia_rule(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitMedia_rule(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitMedia_rule(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class Media_expressionContext
    extends ParserRuleContext {
        public TerminalNode LPAREN() {
            return this.getToken(66, 0);
        }

        public TerminalNode IDENT() {
            return this.getToken(30, 0);
        }

        public TerminalNode RPAREN() {
            return this.getToken(67, 0);
        }

        public List<TerminalNode> S() {
            return this.getTokens(78);
        }

        public TerminalNode S(int i) {
            return this.getToken(78, i);
        }

        public TerminalNode COLON() {
            return this.getToken(54, 0);
        }

        public TermsContext terms() {
            return (TermsContext)this.getRuleContext(TermsContext.class, 0);
        }

        public Media_expressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 11;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterMedia_expression(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitMedia_expression(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitMedia_expression(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class Media_termContext
    extends ParserRuleContext {
        public TerminalNode IDENT() {
            return this.getToken(30, 0);
        }

        public Media_expressionContext media_expression() {
            return (Media_expressionContext)this.getRuleContext(Media_expressionContext.class, 0);
        }

        public NomediaqueryContext nomediaquery() {
            return (NomediaqueryContext)this.getRuleContext(NomediaqueryContext.class, 0);
        }

        public Media_termContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 10;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterMedia_term(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitMedia_term(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitMedia_term(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class Media_queryContext
    extends ParserRuleContext {
        public List<Media_termContext> media_term() {
            return this.getRuleContexts(Media_termContext.class);
        }

        public Media_termContext media_term(int i) {
            return (Media_termContext)this.getRuleContext(Media_termContext.class, i);
        }

        public List<TerminalNode> S() {
            return this.getTokens(78);
        }

        public TerminalNode S(int i) {
            return this.getToken(78, i);
        }

        public Media_queryContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 9;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterMedia_query(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitMedia_query(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitMedia_query(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class MediaContext
    extends ParserRuleContext {
        public List<Media_queryContext> media_query() {
            return this.getRuleContexts(Media_queryContext.class);
        }

        public Media_queryContext media_query(int i) {
            return (Media_queryContext)this.getRuleContext(Media_queryContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(55);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(55, i);
        }

        public List<TerminalNode> S() {
            return this.getTokens(78);
        }

        public TerminalNode S(int i) {
            return this.getToken(78, i);
        }

        public MediaContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 8;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterMedia(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitMedia(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitMedia(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class InlinesetContext
    extends ParserRuleContext {
        public TerminalNode LCURLY() {
            return this.getToken(62, 0);
        }

        public DeclarationsContext declarations() {
            return (DeclarationsContext)this.getRuleContext(DeclarationsContext.class, 0);
        }

        public TerminalNode RCURLY() {
            return this.getToken(63, 0);
        }

        public List<PseudoContext> pseudo() {
            return this.getRuleContexts(PseudoContext.class);
        }

        public PseudoContext pseudo(int i) {
            return (PseudoContext)this.getRuleContext(PseudoContext.class, i);
        }

        public List<TerminalNode> S() {
            return this.getTokens(78);
        }

        public TerminalNode S(int i) {
            return this.getToken(78, i);
        }

        public List<TerminalNode> COMMA() {
            return this.getTokens(55);
        }

        public TerminalNode COMMA(int i) {
            return this.getToken(55, i);
        }

        public InlinesetContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 7;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterInlineset(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitInlineset(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitInlineset(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class Margin_ruleContext
    extends ParserRuleContext {
        public TerminalNode MARGIN_AREA() {
            return this.getToken(36, 0);
        }

        public TerminalNode LCURLY() {
            return this.getToken(62, 0);
        }

        public DeclarationsContext declarations() {
            return (DeclarationsContext)this.getRuleContext(DeclarationsContext.class, 0);
        }

        public TerminalNode RCURLY() {
            return this.getToken(63, 0);
        }

        public List<TerminalNode> S() {
            return this.getTokens(78);
        }

        public TerminalNode S(int i) {
            return this.getToken(78, i);
        }

        public Margin_ruleContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 6;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterMargin_rule(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitMargin_rule(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitMargin_rule(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class PageContext
    extends ParserRuleContext {
        public TerminalNode PAGE() {
            return this.getToken(35, 0);
        }

        public TerminalNode LCURLY() {
            return this.getToken(62, 0);
        }

        public DeclarationsContext declarations() {
            return (DeclarationsContext)this.getRuleContext(DeclarationsContext.class, 0);
        }

        public TerminalNode RCURLY() {
            return this.getToken(63, 0);
        }

        public List<TerminalNode> S() {
            return this.getTokens(78);
        }

        public TerminalNode S(int i) {
            return this.getToken(78, i);
        }

        public TerminalNode IDENT() {
            return this.getToken(30, 0);
        }

        public PseudoContext pseudo() {
            return (PseudoContext)this.getRuleContext(PseudoContext.class, 0);
        }

        public List<Margin_ruleContext> margin_rule() {
            return this.getRuleContexts(Margin_ruleContext.class);
        }

        public Margin_ruleContext margin_rule(int i) {
            return (Margin_ruleContext)this.getRuleContext(Margin_ruleContext.class, i);
        }

        public PageContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 5;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterPage(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitPage(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitPage(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class Import_uriContext
    extends ParserRuleContext {
        public TerminalNode STRING() {
            return this.getToken(41, 0);
        }

        public TerminalNode URI() {
            return this.getToken(48, 0);
        }

        public TerminalNode UNCLOSED_STRING() {
            return this.getToken(42, 0);
        }

        public TerminalNode UNCLOSED_URI() {
            return this.getToken(49, 0);
        }

        public Import_uriContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 4;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterImport_uri(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitImport_uri(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitImport_uri(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class AtstatementContext
    extends ParserRuleContext {
        public TerminalNode CHARSET() {
            return this.getToken(31, 0);
        }

        public TerminalNode IMPORT() {
            return this.getToken(32, 0);
        }

        public Import_uriContext import_uri() {
            return (Import_uriContext)this.getRuleContext(Import_uriContext.class, 0);
        }

        public TerminalNode SEMICOLON() {
            return this.getToken(53, 0);
        }

        public List<TerminalNode> S() {
            return this.getTokens(78);
        }

        public TerminalNode S(int i) {
            return this.getToken(78, i);
        }

        public MediaContext media() {
            return (MediaContext)this.getRuleContext(MediaContext.class, 0);
        }

        public PageContext page() {
            return (PageContext)this.getRuleContext(PageContext.class, 0);
        }

        public TerminalNode VIEWPORT() {
            return this.getToken(37, 0);
        }

        public TerminalNode LCURLY() {
            return this.getToken(62, 0);
        }

        public DeclarationsContext declarations() {
            return (DeclarationsContext)this.getRuleContext(DeclarationsContext.class, 0);
        }

        public TerminalNode RCURLY() {
            return this.getToken(63, 0);
        }

        public TerminalNode FONTFACE() {
            return this.getToken(38, 0);
        }

        public TerminalNode MEDIA() {
            return this.getToken(34, 0);
        }

        public List<Media_ruleContext> media_rule() {
            return this.getRuleContexts(Media_ruleContext.class);
        }

        public Media_ruleContext media_rule(int i) {
            return (Media_ruleContext)this.getRuleContext(Media_ruleContext.class, i);
        }

        public TerminalNode KEYFRAMES() {
            return this.getToken(33, 0);
        }

        public Keyframes_nameContext keyframes_name() {
            return (Keyframes_nameContext)this.getRuleContext(Keyframes_nameContext.class, 0);
        }

        public List<Keyframe_blockContext> keyframe_block() {
            return this.getRuleContexts(Keyframe_blockContext.class);
        }

        public Keyframe_blockContext keyframe_block(int i) {
            return (Keyframe_blockContext)this.getRuleContext(Keyframe_blockContext.class, i);
        }

        public Unknown_atruleContext unknown_atrule() {
            return (Unknown_atruleContext)this.getRuleContext(Unknown_atruleContext.class, 0);
        }

        public AtstatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 3;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterAtstatement(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitAtstatement(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitAtstatement(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class StatementContext
    extends ParserRuleContext {
        public RulesetContext ruleset() {
            return (RulesetContext)this.getRuleContext(RulesetContext.class, 0);
        }

        public AtstatementContext atstatement() {
            return (AtstatementContext)this.getRuleContext(AtstatementContext.class, 0);
        }

        public StatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 2;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterStatement(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitStatement(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitStatement(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class StylesheetContext
    extends ParserRuleContext {
        public List<TerminalNode> CDO() {
            return this.getTokens(51);
        }

        public TerminalNode CDO(int i) {
            return this.getToken(51, i);
        }

        public List<TerminalNode> CDC() {
            return this.getTokens(52);
        }

        public TerminalNode CDC(int i) {
            return this.getToken(52, i);
        }

        public List<TerminalNode> S() {
            return this.getTokens(78);
        }

        public TerminalNode S(int i) {
            return this.getToken(78, i);
        }

        public List<NostatementContext> nostatement() {
            return this.getRuleContexts(NostatementContext.class);
        }

        public NostatementContext nostatement(int i) {
            return (NostatementContext)this.getRuleContext(NostatementContext.class, i);
        }

        public List<StatementContext> statement() {
            return this.getRuleContexts(StatementContext.class);
        }

        public StatementContext statement(int i) {
            return (StatementContext)this.getRuleContext(StatementContext.class, i);
        }

        public StylesheetContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 1;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterStylesheet(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitStylesheet(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitStylesheet(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }

    public static class InlinestyleContext
    extends ParserRuleContext {
        public DeclarationsContext declarations() {
            return (DeclarationsContext)this.getRuleContext(DeclarationsContext.class, 0);
        }

        public List<TerminalNode> S() {
            return this.getTokens(78);
        }

        public TerminalNode S(int i) {
            return this.getToken(78, i);
        }

        public List<InlinesetContext> inlineset() {
            return this.getRuleContexts(InlinesetContext.class);
        }

        public InlinesetContext inlineset(int i) {
            return (InlinesetContext)this.getRuleContext(InlinesetContext.class, i);
        }

        public InlinestyleContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public int getRuleIndex() {
            return 0;
        }

        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).enterInlinestyle(this);
            }
        }

        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CSSParserListener) {
                ((CSSParserListener)listener).exitInlinestyle(this);
            }
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof CSSParserVisitor) {
                return ((CSSParserVisitor)visitor).visitInlinestyle(this);
            }
            return (T)visitor.visitChildren((RuleNode)this);
        }
    }
}

