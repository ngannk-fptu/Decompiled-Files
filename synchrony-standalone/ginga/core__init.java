/*
 * Decompiled with CFR 0.152.
 */
package ginga;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.PersistentVector;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import ginga.core$add_watch_once;
import ginga.core$alist__GT_map;
import ginga.core$as__GT__PERCENT_;
import ginga.core$assoc_pnil;
import ginga.core$auto_partial;
import ginga.core$bind__GT_;
import ginga.core$buffering_transducer;
import ginga.core$call;
import ginga.core$case_QMARK_;
import ginga.core$catchall;
import ginga.core$cond__GT__GT__PERCENT_;
import ginga.core$cond__GT__PERCENT_;
import ginga.core$conjv;
import ginga.core$contextual_buffering_transducer;
import ginga.core$contextual_map;
import ginga.core$contextual_mapcat;
import ginga.core$contextual_return_persistent_result;
import ginga.core$contextual_return_result;
import ginga.core$contextual_transducer;
import ginga.core$deep_merge;
import ginga.core$defnap;
import ginga.core$defrecord_PLUS_;
import ginga.core$delay_fn;
import ginga.core$descending;
import ginga.core$dissoc_in;
import ginga.core$dissoc_keys_with_nil_values;
import ginga.core$drop__GT_;
import ginga.core$drop_last_while;
import ginga.core$duplicates;
import ginga.core$ensure_entry;
import ginga.core$ensure_vector;
import ginga.core$error;
import ginga.core$error_QMARK_;
import ginga.core$f__GT_;
import ginga.core$f__GT__GT_;
import ginga.core$flatten1;
import ginga.core$fn__8207;
import ginga.core$fn__8245;
import ginga.core$fn__8248;
import ginga.core$fn__8305;
import ginga.core$fn__8433;
import ginga.core$fn__8436;
import ginga.core$get_m;
import ginga.core$identity_xform;
import ginga.core$if_cljs;
import ginga.core$last_index_of;
import ginga.core$last_iteration;
import ginga.core$let__GT_;
import ginga.core$loading__6789__auto____8181;
import ginga.core$loop_until;
import ginga.core$make_array;
import ginga.core$map_keys;
import ginga.core$map_vals;
import ginga.core$mapcat_pairs;
import ginga.core$memoized_apply;
import ginga.core$no_op;
import ginga.core$nth_iteration;
import ginga.core$pad;
import ginga.core$parse_int;
import ginga.core$partial_method;
import ginga.core$partition_at;
import ginga.core$partition_pairwise;
import ginga.core$preserving_reduced;
import ginga.core$queue;
import ginga.core$queue_QMARK_;
import ginga.core$raise;
import ginga.core$range_from;
import ginga.core$regexp_QMARK_;
import ginga.core$remove_all_pairs;
import ginga.core$reorder_xform;
import ginga.core$replace_last;
import ginga.core$reset_return_prev_BANG_;
import ginga.core$resize_map;
import ginga.core$retry_QMARK_;
import ginga.core$rotate;
import ginga.core$sliding_resize;
import ginga.core$some_index;
import ginga.core$some_item;
import ginga.core$some_iteration;
import ginga.core$somef__GT_;
import ginga.core$somef__GT__GT_;
import ginga.core$start_thread;
import ginga.core$stateful_transducer;
import ginga.core$swap_return_both_BANG_;
import ginga.core$swap_return_ctx_BANG_;
import ginga.core$swap_return_prev_BANG_;
import ginga.core$take_until;
import ginga.core$throw_map;
import ginga.core$throwable;
import ginga.core$try_catchall;
import ginga.core$unzip;
import ginga.core$update_BANG_;
import ginga.core$update_last;
import ginga.core$update_pnil;
import ginga.core$update_some;
import ginga.core$vary_ex_data;
import ginga.core$with_open;
import ginga.core$with_rethrow_ctx;
import ginga.core$with_retries;
import java.util.Arrays;

public class core__init {
    public static final Var const__0;
    public static final AFn const__1;
    public static final AFn const__2;
    public static final Var const__3;
    public static final Keyword const__6;
    public static final AFn const__12;
    public static final Var const__13;
    public static final AFn const__16;
    public static final Var const__17;
    public static final AFn const__20;
    public static final Var const__21;
    public static final AFn const__23;
    public static final Var const__24;
    public static final Var const__25;
    public static final Var const__26;
    public static final Var const__27;
    public static final AFn const__30;
    public static final Var const__31;
    public static final AFn const__34;
    public static final Var const__35;
    public static final AFn const__38;
    public static final Var const__39;
    public static final AFn const__42;
    public static final Var const__43;
    public static final AFn const__46;
    public static final Var const__47;
    public static final AFn const__50;
    public static final Var const__51;
    public static final AFn const__54;
    public static final Var const__55;
    public static final AFn const__58;
    public static final Var const__59;
    public static final AFn const__62;
    public static final Var const__63;
    public static final AFn const__65;
    public static final Var const__66;
    public static final Var const__67;
    public static final Var const__68;
    public static final Var const__69;
    public static final AFn const__72;
    public static final Var const__73;
    public static final AFn const__76;
    public static final Var const__77;
    public static final AFn const__80;
    public static final Object const__81;
    public static final Var const__82;
    public static final Var const__83;
    public static final Var const__84;
    public static final Var const__85;
    public static final ISeq const__86;
    public static final Var const__87;
    public static final Var const__88;
    public static final AFn const__92;
    public static final Keyword const__93;
    public static final AFn const__94;
    public static final Keyword const__95;
    public static final Keyword const__96;
    public static final AFn const__98;
    public static final Keyword const__99;
    public static final Var const__100;
    public static final Var const__101;
    public static final Var const__102;
    public static final AFn const__103;
    public static final AFn const__104;
    public static final Keyword const__105;
    public static final Var const__106;
    public static final AFn const__107;
    public static final Var const__108;
    public static final AFn const__111;
    public static final Var const__112;
    public static final AFn const__115;
    public static final Var const__116;
    public static final AFn const__119;
    public static final Var const__120;
    public static final AFn const__122;
    public static final Var const__123;
    public static final Var const__124;
    public static final AFn const__127;
    public static final Var const__128;
    public static final AFn const__131;
    public static final Var const__132;
    public static final AFn const__135;
    public static final Var const__136;
    public static final AFn const__139;
    public static final Var const__140;
    public static final AFn const__143;
    public static final Var const__144;
    public static final AFn const__147;
    public static final Var const__148;
    public static final AFn const__151;
    public static final Var const__152;
    public static final AFn const__155;
    public static final Var const__156;
    public static final AFn const__159;
    public static final Var const__160;
    public static final AFn const__163;
    public static final Var const__164;
    public static final AFn const__167;
    public static final Var const__168;
    public static final AFn const__171;
    public static final Var const__172;
    public static final AFn const__175;
    public static final Var const__176;
    public static final AFn const__179;
    public static final Var const__180;
    public static final AFn const__183;
    public static final Var const__184;
    public static final AFn const__187;
    public static final Var const__188;
    public static final AFn const__191;
    public static final Var const__192;
    public static final AFn const__195;
    public static final Var const__196;
    public static final AFn const__199;
    public static final Var const__200;
    public static final AFn const__203;
    public static final Var const__204;
    public static final AFn const__207;
    public static final Var const__208;
    public static final AFn const__211;
    public static final Var const__212;
    public static final AFn const__215;
    public static final Var const__216;
    public static final AFn const__219;
    public static final Var const__220;
    public static final AFn const__222;
    public static final Var const__223;
    public static final AFn const__226;
    public static final Var const__227;
    public static final AFn const__231;
    public static final Var const__232;
    public static final AFn const__235;
    public static final Var const__236;
    public static final AFn const__238;
    public static final Var const__239;
    public static final Var const__240;
    public static final AFn const__243;
    public static final Var const__244;
    public static final AFn const__247;
    public static final Var const__248;
    public static final AFn const__251;
    public static final Var const__252;
    public static final AFn const__255;
    public static final Var const__256;
    public static final AFn const__259;
    public static final Var const__260;
    public static final AFn const__263;
    public static final Var const__264;
    public static final AFn const__267;
    public static final Var const__268;
    public static final AFn const__271;
    public static final Var const__272;
    public static final AFn const__275;
    public static final Var const__276;
    public static final AFn const__279;
    public static final Var const__280;
    public static final AFn const__283;
    public static final Var const__284;
    public static final AFn const__287;
    public static final Var const__288;
    public static final AFn const__291;
    public static final Var const__292;
    public static final AFn const__295;
    public static final Var const__296;
    public static final AFn const__299;
    public static final Var const__300;
    public static final AFn const__303;
    public static final Var const__304;
    public static final AFn const__307;
    public static final Var const__308;
    public static final AFn const__311;
    public static final Var const__312;
    public static final AFn const__315;
    public static final Var const__316;
    public static final AFn const__319;
    public static final Var const__320;
    public static final AFn const__323;
    public static final Var const__324;
    public static final AFn const__327;
    public static final Object const__328;
    public static final Var const__329;
    public static final ISeq const__330;
    public static final AFn const__332;
    public static final AFn const__333;
    public static final AFn const__335;
    public static final AFn const__336;
    public static final AFn const__337;
    public static final AFn const__338;
    public static final Var const__339;
    public static final AFn const__342;
    public static final Var const__343;
    public static final AFn const__346;
    public static final Var const__347;
    public static final AFn const__350;
    public static final Var const__351;
    public static final AFn const__354;
    public static final Var const__355;
    public static final AFn const__358;
    public static final Var const__359;
    public static final AFn const__362;
    public static final Var const__363;
    public static final AFn const__366;
    public static final Var const__367;
    public static final AFn const__370;
    public static final Var const__371;
    public static final AFn const__374;
    public static final Var const__375;
    public static final AFn const__378;
    public static final Var const__379;
    public static final AFn const__382;
    public static final Var const__383;
    public static final AFn const__386;
    public static final Var const__387;
    public static final AFn const__390;
    public static final Var const__391;
    public static final AFn const__394;
    public static final Var const__395;
    public static final AFn const__398;
    public static final Var const__399;
    public static final AFn const__402;
    public static final Var const__403;
    public static final AFn const__406;
    public static final Var const__407;
    public static final AFn const__410;
    public static final Var const__411;
    public static final AFn const__414;
    public static final Var const__415;
    public static final AFn const__418;
    public static final Var const__419;
    public static final AFn const__422;
    public static final Var const__423;
    public static final AFn const__426;
    public static final Var const__427;
    public static final AFn const__431;
    public static final Var const__432;
    public static final AFn const__435;

    public static void load() {
        Object v2;
        Object object = ((IFn)const__0.getRawRoot()).invoke(const__1);
        Object object2 = ((IFn)new core$loading__6789__auto____8181()).invoke();
        if (((Symbol)const__1).equals(const__2)) {
            v2 = null;
        } else {
            LockingTransaction.runInTransaction(new core$fn__8207());
            v2 = null;
        }
        Var var = const__3;
        var.setMeta((IPersistentMap)((Object)const__12));
        Var var2 = var;
        var.bindRoot(new core$dissoc_in());
        Var var3 = const__13;
        var3.setMeta((IPersistentMap)((Object)const__16));
        Var var4 = var3;
        var3.bindRoot(new core$ensure_vector());
        Var var5 = const__17;
        var5.setMeta((IPersistentMap)((Object)const__20));
        Var var6 = var5;
        var5.bindRoot(new core$conjv());
        Var var7 = const__21;
        var7.setMeta((IPersistentMap)((Object)const__23));
        Var var8 = var7;
        var7.bindRoot(((IFn)const__24.getRawRoot()).invoke(const__25.getRawRoot(), ((IFn)const__26.getRawRoot()).invoke()));
        Var var9 = const__27;
        var9.setMeta((IPersistentMap)((Object)const__30));
        Var var10 = var9;
        var9.bindRoot(new core$assoc_pnil());
        Var var11 = const__31;
        var11.setMeta((IPersistentMap)((Object)const__34));
        Var var12 = var11;
        var11.bindRoot(new core$update_pnil());
        Var var13 = const__35;
        var13.setMeta((IPersistentMap)((Object)const__38));
        Var var14 = var13;
        var13.bindRoot(new core$update_BANG_());
        Var var15 = const__39;
        var15.setMeta((IPersistentMap)((Object)const__42));
        Var var16 = var15;
        var15.bindRoot(new core$ensure_entry());
        Var var17 = const__43;
        var17.setMeta((IPersistentMap)((Object)const__46));
        Var var18 = var17;
        var17.bindRoot(new core$deep_merge());
        Var var19 = const__47;
        var19.setMeta((IPersistentMap)((Object)const__50));
        Var var20 = var19;
        var19.bindRoot(new core$last_iteration());
        Var var21 = const__51;
        var21.setMeta((IPersistentMap)((Object)const__54));
        Var var22 = var21;
        var21.bindRoot(new core$nth_iteration());
        Var var23 = const__55;
        var23.setMeta((IPersistentMap)((Object)const__58));
        Var var24 = var23;
        var23.bindRoot(new core$some_iteration());
        Var var25 = const__59;
        var25.setMeta((IPersistentMap)((Object)const__62));
        Var var26 = var25;
        var25.bindRoot(new core$unzip());
        Var var27 = const__63;
        var27.setMeta((IPersistentMap)((Object)const__65));
        Var var28 = var27;
        var27.bindRoot(((IFn)const__66.getRawRoot()).invoke(const__67.getRawRoot(), const__68.getRawRoot()));
        Var var29 = const__69;
        var29.setMeta((IPersistentMap)((Object)const__72));
        Var var30 = var29;
        var29.bindRoot(new core$flatten1());
        Var var31 = const__73;
        var31.setMeta((IPersistentMap)((Object)const__76));
        Var var32 = var31;
        var31.bindRoot(new core$some_item());
        Var var33 = const__77;
        var33.setMeta((IPersistentMap)((Object)const__80));
        Var var34 = var33;
        var33.bindRoot(new core$partial_method());
        Object object3 = ((IFn)new core$fn__8245()).invoke();
        Object object4 = const__81;
        Object object5 = ((IFn)const__82.getRawRoot()).invoke(const__83, const__84.getRawRoot(), const__6, "Gets the type of an object as a keyword");
        Object object6 = ((IFn)const__85).invoke(const__83, const__86);
        Object object7 = ((IFn)const__87.getRawRoot()).invoke(const__83, const__88.getRawRoot(), ((IFn)const__84.getRawRoot()).invoke(const__92, const__93, const__94, const__95, const__83, const__96, const__98, const__99, RT.mapUniqueKeys(((IFn)const__100.getRawRoot()).invoke(const__101.get(), ((IFn)const__102.getRawRoot()).invoke(const__103, ((IFn)const__88.getRawRoot()).invoke(const__104, RT.mapUniqueKeys(const__105, const__83)))), new core$fn__8248())));
        Object object8 = ((IFn)const__106.getRawRoot()).invoke(const__83.getRawRoot());
        AFn aFn = const__107;
        Var var35 = const__108;
        var35.setMeta((IPersistentMap)((Object)const__111));
        Var var36 = var35;
        var35.bindRoot(new core$queue());
        Var var37 = const__112;
        var37.setMeta((IPersistentMap)((Object)const__115));
        Var var38 = var37;
        var37.bindRoot(new core$queue_QMARK_());
        Var var39 = const__116;
        var39.setMeta((IPersistentMap)((Object)const__119));
        Var var40 = var39;
        var39.bindRoot(new core$regexp_QMARK_());
        Var var41 = const__120;
        var41.setMeta((IPersistentMap)((Object)const__122));
        Var var42 = var41;
        var41.bindRoot(((IFn)const__123.getRawRoot()).invoke(null));
        Var var43 = const__124;
        var43.setMeta((IPersistentMap)((Object)const__127));
        Var var44 = var43;
        var43.bindRoot(new core$get_m());
        const__124.setMacro();
        Object v54 = null;
        Var var45 = const__124;
        Var var46 = const__128;
        var46.setMeta((IPersistentMap)((Object)const__131));
        Var var47 = var46;
        var46.bindRoot(new core$defrecord_PLUS_());
        const__128.setMacro();
        Object v58 = null;
        Var var48 = const__128;
        Var var49 = const__132;
        var49.setMeta((IPersistentMap)((Object)const__135));
        Var var50 = var49;
        var49.bindRoot(new core$f__GT_());
        const__132.setMacro();
        Object v62 = null;
        Var var51 = const__132;
        Var var52 = const__136;
        var52.setMeta((IPersistentMap)((Object)const__139));
        Var var53 = var52;
        var52.bindRoot(new core$f__GT__GT_());
        const__136.setMacro();
        Object v66 = null;
        Var var54 = const__136;
        Var var55 = const__140;
        var55.setMeta((IPersistentMap)((Object)const__143));
        Var var56 = var55;
        var55.bindRoot(new core$somef__GT_());
        const__140.setMacro();
        Object v70 = null;
        Var var57 = const__140;
        Var var58 = const__144;
        var58.setMeta((IPersistentMap)((Object)const__147));
        Var var59 = var58;
        var58.bindRoot(new core$somef__GT__GT_());
        const__144.setMacro();
        Object v74 = null;
        Var var60 = const__144;
        Var var61 = const__148;
        var61.setMeta((IPersistentMap)((Object)const__151));
        Var var62 = var61;
        var61.bindRoot(new core$cond__GT__PERCENT_());
        const__148.setMacro();
        Object v78 = null;
        Var var63 = const__148;
        Var var64 = const__152;
        var64.setMeta((IPersistentMap)((Object)const__155));
        Var var65 = var64;
        var64.bindRoot(new core$cond__GT__GT__PERCENT_());
        const__152.setMacro();
        Object v82 = null;
        Var var66 = const__152;
        Var var67 = const__156;
        var67.setMeta((IPersistentMap)((Object)const__159));
        Var var68 = var67;
        var67.bindRoot(new core$as__GT__PERCENT_());
        const__156.setMacro();
        Object v86 = null;
        Var var69 = const__156;
        Var var70 = const__160;
        var70.setMeta((IPersistentMap)((Object)const__163));
        Var var71 = var70;
        var70.bindRoot(new core$let__GT_());
        const__160.setMacro();
        Object v90 = null;
        Var var72 = const__160;
        Var var73 = const__164;
        var73.setMeta((IPersistentMap)((Object)const__167));
        Var var74 = var73;
        var73.bindRoot(new core$bind__GT_());
        const__164.setMacro();
        Object v94 = null;
        Var var75 = const__164;
        Var var76 = const__168;
        var76.setMeta((IPersistentMap)((Object)const__171));
        Var var77 = var76;
        var76.bindRoot(new core$drop__GT_());
        const__168.setMacro();
        Object v98 = null;
        Var var78 = const__168;
        Var var79 = const__172;
        var79.setMeta((IPersistentMap)((Object)const__175));
        Var var80 = var79;
        var79.bindRoot(new core$if_cljs());
        const__172.setMacro();
        Object v102 = null;
        Var var81 = const__172;
        Var var82 = const__176;
        var82.setMeta((IPersistentMap)((Object)const__179));
        Var var83 = var82;
        var82.bindRoot(new core$try_catchall());
        const__176.setMacro();
        Object v106 = null;
        Var var84 = const__176;
        Object object9 = ((IFn)new core$fn__8305()).invoke();
        Var var85 = const__180;
        var85.setMeta((IPersistentMap)((Object)const__183));
        Var var86 = var85;
        var85.bindRoot(new core$error());
        Var var87 = const__184;
        var87.setMeta((IPersistentMap)((Object)const__187));
        Var var88 = var87;
        var87.bindRoot(new core$error_QMARK_());
        Var var89 = const__188;
        var89.setMeta((IPersistentMap)((Object)const__191));
        Var var90 = var89;
        var89.bindRoot(new core$throwable());
        Var var91 = const__192;
        var91.setMeta((IPersistentMap)((Object)const__195));
        Var var92 = var91;
        var91.bindRoot(new core$throw_map());
        Var var93 = const__196;
        var93.setMeta((IPersistentMap)((Object)const__199));
        Var var94 = var93;
        var93.bindRoot(new core$catchall());
        const__196.setMacro();
        Object v119 = null;
        Var var95 = const__196;
        Var var96 = const__200;
        var96.setMeta((IPersistentMap)((Object)const__203));
        Var var97 = var96;
        var96.bindRoot(new core$delay_fn());
        const__200.setMacro();
        Object v123 = null;
        Var var98 = const__200;
        Var var99 = const__204;
        var99.setMeta((IPersistentMap)((Object)const__207));
        Var var100 = var99;
        var99.bindRoot(new core$parse_int());
        Var var101 = const__208;
        var101.setMeta((IPersistentMap)((Object)const__211));
        Var var102 = var101;
        var101.bindRoot(new core$auto_partial());
        const__208.setMacro();
        Object v129 = null;
        Var var103 = const__208;
        Var var104 = const__212;
        var104.setMeta((IPersistentMap)((Object)const__215));
        Var var105 = var104;
        var104.bindRoot(new core$defnap());
        const__212.setMacro();
        Object v133 = null;
        Var var106 = const__212;
        Var var107 = const__216;
        var107.setMeta((IPersistentMap)((Object)const__219));
        Var var108 = var107;
        var107.bindRoot(new core$case_QMARK_());
        const__216.setMacro();
        Object v137 = null;
        Var var109 = const__216;
        Var var110 = const__220;
        var110.setMeta((IPersistentMap)((Object)const__222));
        Var var111 = var110;
        var110.bindRoot(new core$make_array());
        Var var112 = const__223;
        var112.setMeta((IPersistentMap)((Object)const__226));
        Var var113 = var112;
        var112.bindRoot(new core$preserving_reduced());
        Var var114 = const__227;
        var114.setMeta((IPersistentMap)((Object)const__231));
        Var var115 = var114;
        var114.bindRoot(new core$contextual_return_result());
        Var var116 = const__232;
        var116.setMeta((IPersistentMap)((Object)const__235));
        Var var117 = var116;
        var116.bindRoot(new core$contextual_return_persistent_result());
        Var var118 = const__236;
        var118.setMeta((IPersistentMap)((Object)const__238));
        Var var119 = var118;
        var118.bindRoot(((IFn)const__239.getRawRoot()).invoke(PersistentVector.EMPTY));
        Var var120 = const__240;
        var120.setMeta((IPersistentMap)((Object)const__243));
        Var var121 = var120;
        var120.bindRoot(new core$contextual_transducer());
        Var var122 = const__244;
        var122.setMeta((IPersistentMap)((Object)const__247));
        Var var123 = var122;
        var122.bindRoot(new core$contextual_buffering_transducer());
        Var var124 = const__248;
        var124.setMeta((IPersistentMap)((Object)const__251));
        Var var125 = var124;
        var124.bindRoot(new core$stateful_transducer());
        Var var126 = const__252;
        var126.setMeta((IPersistentMap)((Object)const__255));
        Var var127 = var126;
        var126.bindRoot(new core$buffering_transducer());
        Var var128 = const__256;
        var128.setMeta((IPersistentMap)((Object)const__259));
        Var var129 = var128;
        var128.bindRoot(new core$contextual_map());
        Var var130 = const__260;
        var130.setMeta((IPersistentMap)((Object)const__263));
        Var var131 = var130;
        var130.bindRoot(new core$contextual_mapcat());
        Var var132 = const__264;
        var132.setMeta((IPersistentMap)((Object)const__267));
        Var var133 = var132;
        var132.bindRoot(new core$identity_xform());
        Var var134 = const__268;
        var134.setMeta((IPersistentMap)((Object)const__271));
        Var var135 = var134;
        var134.bindRoot(new core$partition_at());
        Var var136 = const__272;
        var136.setMeta((IPersistentMap)((Object)const__275));
        Var var137 = var136;
        var136.bindRoot(new core$partition_pairwise());
        Var var138 = const__276;
        var138.setMeta((IPersistentMap)((Object)const__279));
        Var var139 = var138;
        var138.bindRoot(new core$mapcat_pairs());
        Var var140 = const__280;
        var140.setMeta((IPersistentMap)((Object)const__283));
        Var var141 = var140;
        var140.bindRoot(new core$remove_all_pairs());
        Var var142 = const__284;
        var142.setMeta((IPersistentMap)((Object)const__287));
        Var var143 = var142;
        var142.bindRoot(new core$reorder_xform());
        Var var144 = const__288;
        var144.setMeta((IPersistentMap)((Object)const__291));
        Var var145 = var144;
        var144.bindRoot(new core$raise());
        Var var146 = const__292;
        var146.setMeta((IPersistentMap)((Object)const__295));
        Var var147 = var146;
        var146.bindRoot(new core$no_op());
        Var var148 = const__296;
        var148.setMeta((IPersistentMap)((Object)const__299));
        Var var149 = var148;
        var148.bindRoot(new core$take_until());
        Var var150 = const__300;
        var150.setMeta((IPersistentMap)((Object)const__303));
        Var var151 = var150;
        var150.bindRoot(new core$reset_return_prev_BANG_());
        Var var152 = const__304;
        var152.setMeta((IPersistentMap)((Object)const__307));
        Var var153 = var152;
        var152.bindRoot(new core$swap_return_prev_BANG_());
        Var var154 = const__308;
        var154.setMeta((IPersistentMap)((Object)const__311));
        Var var155 = var154;
        var154.bindRoot(new core$swap_return_both_BANG_());
        Var var156 = const__312;
        var156.setMeta((IPersistentMap)((Object)const__315));
        Var var157 = var156;
        var156.bindRoot(new core$swap_return_ctx_BANG_());
        Var var158 = const__316;
        var158.setMeta((IPersistentMap)((Object)const__319));
        Var var159 = var158;
        var158.bindRoot(new core$add_watch_once());
        Var var160 = const__320;
        var160.setMeta((IPersistentMap)((Object)const__323));
        Var var161 = var160;
        var160.bindRoot(new core$update_some());
        Var var162 = const__324;
        var162.setMeta((IPersistentMap)((Object)const__327));
        Var var163 = var162;
        var162.bindRoot(new core$range_from());
        Object object10 = ((IFn)new core$fn__8433()).invoke();
        Object object11 = const__328;
        Object object12 = ((IFn)const__82.getRawRoot()).invoke(const__329, const__84.getRawRoot(), const__6, null);
        Object object13 = ((IFn)const__85).invoke(const__329, const__330);
        Object object14 = ((IFn)const__87.getRawRoot()).invoke(const__329, const__88.getRawRoot(), ((IFn)const__84.getRawRoot()).invoke(const__332, const__93, const__333, const__95, const__329, const__96, const__335, const__99, RT.mapUniqueKeys(((IFn)const__100.getRawRoot()).invoke(const__101.get(), ((IFn)const__102.getRawRoot()).invoke(const__336, ((IFn)const__88.getRawRoot()).invoke(const__337, RT.mapUniqueKeys(const__105, const__329)))), new core$fn__8436())));
        Object object15 = ((IFn)const__106.getRawRoot()).invoke(const__329.getRawRoot());
        AFn aFn2 = const__338;
        Var var164 = const__339;
        var164.setMeta((IPersistentMap)((Object)const__342));
        Var var165 = var164;
        var164.bindRoot(new core$with_open());
        const__339.setMacro();
        Object v202 = null;
        Var var166 = const__339;
        Var var167 = const__343;
        var167.setMeta((IPersistentMap)((Object)const__346));
        Var var168 = var167;
        var167.bindRoot(new core$vary_ex_data());
        Var var169 = const__347;
        var169.setMeta((IPersistentMap)((Object)const__350));
        Var var170 = var169;
        var169.bindRoot(new core$with_rethrow_ctx());
        const__347.setMacro();
        Object v208 = null;
        Var var171 = const__347;
        Var var172 = const__351;
        var172.setMeta((IPersistentMap)((Object)const__354));
        Var var173 = var172;
        var172.bindRoot(new core$descending());
        Var var174 = const__355;
        var174.setMeta((IPersistentMap)((Object)const__358));
        Var var175 = var174;
        var174.bindRoot(new core$some_index());
        Var var176 = const__359;
        var176.setMeta((IPersistentMap)((Object)const__362));
        Var var177 = var176;
        var176.bindRoot(new core$replace_last());
        Var var178 = const__363;
        var178.setMeta((IPersistentMap)((Object)const__366));
        Var var179 = var178;
        var178.bindRoot(new core$update_last());
        Var var180 = const__367;
        var180.setMeta((IPersistentMap)((Object)const__370));
        Var var181 = var180;
        var180.bindRoot(new core$last_index_of());
        Var var182 = const__371;
        var182.setMeta((IPersistentMap)((Object)const__374));
        Var var183 = var182;
        var182.bindRoot(new core$drop_last_while());
        Var var184 = const__375;
        var184.setMeta((IPersistentMap)((Object)const__378));
        Var var185 = var184;
        var184.bindRoot(new core$dissoc_keys_with_nil_values());
        Var var186 = const__379;
        var186.setMeta((IPersistentMap)((Object)const__382));
        Var var187 = var186;
        var186.bindRoot(new core$pad());
        Var var188 = const__383;
        var188.setMeta((IPersistentMap)((Object)const__386));
        Var var189 = var188;
        var188.bindRoot(new core$memoized_apply());
        Var var190 = const__387;
        var190.setMeta((IPersistentMap)((Object)const__390));
        Var var191 = var190;
        var190.bindRoot(new core$call());
        Var var192 = const__391;
        var192.setMeta((IPersistentMap)((Object)const__394));
        Var var193 = var192;
        var192.bindRoot(new core$retry_QMARK_());
        Var var194 = const__395;
        var194.setMeta((IPersistentMap)((Object)const__398));
        Var var195 = var194;
        var194.bindRoot(new core$with_retries());
        const__395.setMacro();
        Object v234 = null;
        Var var196 = const__395;
        Var var197 = const__399;
        var197.setMeta((IPersistentMap)((Object)const__402));
        Var var198 = var197;
        var197.bindRoot(new core$duplicates());
        Var var199 = const__403;
        var199.setMeta((IPersistentMap)((Object)const__406));
        Var var200 = var199;
        var199.bindRoot(new core$rotate());
        Var var201 = const__407;
        var201.setMeta((IPersistentMap)((Object)const__410));
        Var var202 = var201;
        var201.bindRoot(new core$alist__GT_map());
        Var var203 = const__411;
        var203.setMeta((IPersistentMap)((Object)const__414));
        Var var204 = var203;
        var203.bindRoot(new core$map_keys());
        Var var205 = const__415;
        var205.setMeta((IPersistentMap)((Object)const__418));
        Var var206 = var205;
        var205.bindRoot(new core$map_vals());
        Var var207 = const__419;
        var207.setMeta((IPersistentMap)((Object)const__422));
        Var var208 = var207;
        var207.bindRoot(new core$resize_map());
        Var var209 = const__423;
        var209.setMeta((IPersistentMap)((Object)const__426));
        Var var210 = var209;
        var209.bindRoot(new core$sliding_resize());
        Var var211 = const__427;
        var211.setMeta((IPersistentMap)((Object)const__431));
        Var var212 = var211;
        var211.bindRoot(new core$start_thread());
        Var var213 = const__432;
        var213.setMeta((IPersistentMap)((Object)const__435));
        Var var214 = var213;
        var213.bindRoot(new core$loop_until());
        const__432.setMacro();
        Object v254 = null;
        Var var215 = const__432;
    }

    public static void __init0() {
        const__0 = RT.var("clojure.core", "in-ns");
        const__1 = Symbol.intern(null, "ginga.core");
        const__2 = Symbol.intern(null, "clojure.core");
        const__3 = RT.var("ginga.core", "dissoc-in");
        const__6 = RT.keyword(null, "doc");
        const__12 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m"), Tuple.create(Symbol.intern(null, "k"), Symbol.intern(null, "&"), Symbol.intern(null, "ks"), RT.keyword(null, "as"), Symbol.intern(null, "keys"))))), RT.keyword(null, "doc"), "Dissociates an entry from a nested associative structure returning a new\n  nested structure. keys is a sequence of keys. Any empty maps that result\n  will not be present in the new structure.", RT.keyword(null, "line"), 10, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__13 = RT.var("ginga.core", "ensure-vector");
        const__16 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "coll")))), RT.keyword(null, "doc"), "Ensures that the given collection is a vector.\n  Will cast to a vector with vec if it isn't.\n  Useful to optimize the case when an algorithm accepts a coll but\n  needs a vector and happens to be given a vector.", RT.keyword(null, "line"), 25, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__17 = RT.var("ginga.core", "conjv");
        const__20 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(((IObj)((Object)Tuple.create(Symbol.intern(null, "vector-or-nil"), Symbol.intern(null, "item")))).withMeta(RT.map(RT.keyword(null, "pre"), Tuple.create(((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "or"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "vector?"), Symbol.intern(null, "vector-or-nil"))))).withMeta(RT.map(RT.keyword(null, "line"), 37, RT.keyword(null, "column"), 14)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "nil?"), Symbol.intern(null, "vector-or-nil"))))).withMeta(RT.map(RT.keyword(null, "line"), 38, RT.keyword(null, "column"), 14)))))).withMeta(RT.map(RT.keyword(null, "line"), 37, RT.keyword(null, "column"), 10))))))), RT.keyword(null, "doc"), "Like conj but interprets nil as the empty vector.", RT.keyword(null, "line"), 33, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__21 = RT.var("ginga.core", "conjset");
        const__23 = (AFn)((Object)RT.map(RT.keyword(null, "line"), 42, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc", RT.keyword(null, "doc"), "Like conj but interprets nil as the empty set."));
        const__24 = RT.var("clojure.core", "fnil");
        const__25 = RT.var("clojure.core", "conj");
        const__26 = RT.var("clojure.core", "hash-set");
        const__27 = RT.var("ginga.core", "assoc-pnil");
        const__30 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "key"), Symbol.intern(null, "maybe-val")))), RT.keyword(null, "doc"), "Like assoc but nil values dissoc (prune) from the map.", RT.keyword(null, "line"), 46, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__31 = RT.var("ginga.core", "update-pnil");
        const__34 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "key"), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")))), RT.keyword(null, "doc"), "Like update but nil values dissoc (prune) from the map.", RT.keyword(null, "line"), 53, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__35 = RT.var("ginga.core", "update!");
        const__38 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "f")), Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "f"), Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "f"), Symbol.intern(null, "x"), Symbol.intern(null, "&"), Symbol.intern(null, "more")))), RT.keyword(null, "doc"), "Like clojure.core/update but uses assoc! and works with transients.", RT.keyword(null, "line"), 58, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__39 = RT.var("ginga.core", "ensure-entry");
        const__42 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "key"), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")))), RT.keyword(null, "doc"), "Ensures key is present in m, generating a new value by calling f with\n  the provided args if necessary.", RT.keyword(null, "line"), 67, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__43 = RT.var("ginga.core", "deep-merge");
        const__46 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "a"), Symbol.intern(null, "b"), Symbol.intern(null, "&"), Symbol.intern(null, "args")), Tuple.create(Symbol.intern(null, "a"), Symbol.intern(null, "b")))), RT.keyword(null, "doc"), "Combines trees of maps and sequences recursively.\n\n  Maps  are merged,  sequential? things  are concatenated  (vectors stay\n  vectors), everything else is replaced.", RT.keyword(null, "line"), 73, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__47 = RT.var("ginga.core", "last-iteration");
        const__50 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "x")))), RT.keyword(null, "doc"), "Iterates calls to the given function similar to clojure.core/iterate,\n  but instead of a sequence of results, returns the last truthy result.", RT.keyword(null, "line"), 88, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__51 = RT.var("ginga.core", "nth-iteration");
        const__54 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "n"), Symbol.intern(null, "f"), Symbol.intern(null, "x")))), RT.keyword(null, "doc"), "The same as (-> (iterate f value) (nth n)).", RT.keyword(null, "line"), 97, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__55 = RT.var("ginga.core", "some-iteration");
        const__58 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "pred"), Symbol.intern(null, "f"), Symbol.intern(null, "x")))), RT.keyword(null, "doc"), "Iterates calls to the given function similar to clojure.core/iterate,\n  but instead of a sequence of results, returns the first result for\n  which the given predicate returns true.", RT.keyword(null, "line"), 105, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__59 = RT.var("ginga.core", "unzip");
        const__62 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "s")))), RT.keyword(null, "doc"), "From a map or an association list, return [keys values].\n  Reverse of zip.", RT.keyword(null, "line"), 115, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__63 = RT.var("ginga.core", "zip");
        const__65 = (AFn)((Object)RT.map(RT.keyword(null, "line"), 123, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc", RT.keyword(null, "doc"), "Like zipmap, except returns an association list."));
        const__66 = RT.var("clojure.core", "partial");
        const__67 = RT.var("clojure.core", "map");
        const__68 = RT.var("clojure.core", "vector");
        const__69 = RT.var("ginga.core", "flatten1");
        const__72 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "coll")))), RT.keyword(null, "doc"), "Flattens one level of the given coll by concatenating its items.", RT.keyword(null, "line"), 127, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__73 = RT.var("ginga.core", "some-item");
        const__76 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "pred?"), Symbol.intern(null, "coll")))), RT.keyword(null, "doc"), "Like some, except returns the item instead of the test value.", RT.keyword(null, "line"), 132, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__77 = RT.var("ginga.core", "partial-method");
        const__80 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "f")), Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "arg1")), Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "arg1"), Symbol.intern(null, "arg2")), Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "arg1"), Symbol.intern(null, "arg2"), Symbol.intern(null, "arg3")), Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "arg1"), Symbol.intern(null, "arg2"), Symbol.intern(null, "arg3"), Symbol.intern(null, "&"), Symbol.intern(null, "more")))), RT.keyword(null, "doc"), "Like partial, but partially applies the arguments following the\n  first `this` argument.", RT.keyword(null, "line"), 137, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__81 = RT.classForName("ginga.core.KwType");
        const__82 = RT.var("clojure.core", "alter-meta!");
        const__83 = RT.var("ginga.core", "KwType");
        const__84 = RT.var("clojure.core", "assoc");
        const__85 = RT.var("clojure.core", "assert-same-protocol");
        const__86 = (ISeq)((Object)PersistentList.create(Arrays.asList(((IObj)Symbol.intern(null, "kw-type")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "obj")))))))));
        const__87 = RT.var("clojure.core", "alter-var-root");
        const__88 = RT.var("clojure.core", "merge");
        const__92 = (AFn)((Object)RT.map(RT.keyword(null, "on"), Symbol.intern(null, "ginga.core.KwType"), RT.keyword(null, "on-interface"), RT.classForName("ginga.core.KwType"), RT.keyword(null, "doc"), "Gets the type of an object as a keyword"));
        const__93 = RT.keyword(null, "sigs");
        const__94 = (AFn)((Object)RT.map(RT.keyword(null, "kw-type"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "kw-type")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "obj")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "obj")))), RT.keyword(null, "doc"), null)));
        const__95 = RT.keyword(null, "var");
        const__96 = RT.keyword(null, "method-map");
        const__98 = (AFn)((Object)RT.map(RT.keyword(null, "kw-type"), RT.keyword(null, "kw-type")));
        const__99 = RT.keyword(null, "method-builders");
    }

    public static void __init1() {
        const__100 = RT.var("clojure.core", "intern");
        const__101 = RT.var("clojure.core", "*ns*");
        const__102 = RT.var("clojure.core", "with-meta");
        const__103 = (AFn)((Object)((IObj)Symbol.intern(null, "kw-type")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "obj")))))));
        const__104 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "kw-type")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "obj")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "obj")))), RT.keyword(null, "doc"), null));
        const__105 = RT.keyword(null, "protocol");
        const__106 = RT.var("clojure.core", "-reset-methods");
        const__107 = Symbol.intern(null, "KwType");
        const__108 = RT.var("ginga.core", "queue");
        const__111 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(), Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "items")))), RT.keyword(null, "doc"), "Creates a new queue containing the given arguments.", RT.keyword(null, "line"), 154, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__112 = RT.var("ginga.core", "queue?");
        const__115 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "value")))), RT.keyword(null, "doc"), "Tests whether the given argument is a queue.", RT.keyword(null, "line"), 161, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__116 = RT.var("ginga.core", "regexp?");
        const__119 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "r")))), RT.keyword(null, "line"), 168, RT.keyword(null, "column"), 10, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__120 = RT.var("ginga.core", "lookup-sentinel");
        const__122 = (AFn)((Object)RT.map(RT.keyword(null, "line"), 173, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__123 = RT.var("clojure.core", "atom");
        const__124 = RT.var("ginga.core", "get-m");
        const__127 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "map"), Symbol.intern(null, "key"), Symbol.intern(null, "not-found")))), RT.keyword(null, "doc"), "Like core/get, but delays the evaluation of the not-found argument.", RT.keyword(null, "line"), 175, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__128 = RT.var("ginga.core", "defrecord+");
        const__131 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "field-spec"), Symbol.intern(null, "&"), Symbol.intern(null, "etc")))), RT.keyword(null, "doc"), "Like defrecord, but defs a default constructor that instantiates the\n  record with default values.\n\n  (defrecord+ MyType [a {b 'b} {c 'c})\n\n  (my-type)\n  -> {:a nil :b 'b :c 'c}\n\n  (my-type {:a 'A :b 'B})\n  -> {:a 'A :b 'B :c 'c}", RT.keyword(null, "line"), 183, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__132 = RT.var("ginga.core", "f->");
        const__135 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "forms")))), RT.keyword(null, "doc"), "Sugar for #(-> % ...).", RT.keyword(null, "line"), 216, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__136 = RT.var("ginga.core", "f->>");
        const__139 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "forms")))), RT.keyword(null, "doc"), "Sugar for #(->> % ...).", RT.keyword(null, "line"), 221, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__140 = RT.var("ginga.core", "somef->");
        const__143 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "forms")))), RT.keyword(null, "doc"), "Sugar for #(some-> % ...).", RT.keyword(null, "line"), 226, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__144 = RT.var("ginga.core", "somef->>");
        const__147 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "forms")))), RT.keyword(null, "doc"), "Sugar for #(some->> % ...).", RT.keyword(null, "line"), 231, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__148 = RT.var("ginga.core", "cond->%");
        const__151 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "expr"), Symbol.intern(null, "&"), Symbol.intern(null, "forms")))), RT.keyword(null, "doc"), "Like cond->, except binds the value to % when evaluating the condition.", RT.keyword(null, "line"), 236, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__152 = RT.var("ginga.core", "cond->>%");
        const__155 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "expr"), Symbol.intern(null, "&"), Symbol.intern(null, "forms")))), RT.keyword(null, "doc"), "Like cond->%, but threads the last position.", RT.keyword(null, "line"), 243, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__156 = RT.var("ginga.core", "as->%");
        const__159 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "expr"), Symbol.intern(null, "&"), Symbol.intern(null, "forms")))), RT.keyword(null, "doc"), "Sugar for (as-> % ...).", RT.keyword(null, "line"), 248, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__160 = RT.var("ginga.core", "let->");
        const__163 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "expr"), Symbol.intern(null, "bindings"), Symbol.intern(null, "&"), Symbol.intern(null, "clauses")))), RT.keyword(null, "doc"), "Like -> but the second argument is a vector of bindings available in\n  all clauses.", RT.keyword(null, "line"), 253, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__164 = RT.var("ginga.core", "bind->");
        const__167 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "val"), Symbol.intern(null, "binding"), Symbol.intern(null, "&"), Symbol.intern(null, "forms")))), RT.keyword(null, "doc"), "Like as-> but only binds once, has an implicit (-> val ...) around\n  the body and supports destructuring.", RT.keyword(null, "line"), 261, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__168 = RT.var("ginga.core", "drop->");
        const__171 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "val-ignored"), Symbol.intern(null, "&"), Symbol.intern(null, "forms")))), RT.keyword(null, "doc"), "Drops the threaded-in value and continues with the first form.", RT.keyword(null, "line"), 269, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__172 = RT.var("ginga.core", "if-cljs");
        const__175 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "then"), Symbol.intern(null, "else")))), RT.keyword(null, "doc"), "Return then in cljs context and else in clj contex.\n\n  To be used in other macros as part of the expansion because a macro\n  calling this directly is always executed in clj context.\n\n  correct:   (defmacro [...] `(if-cljs (...)))\n  incorrect: (defmacro [...] (if-cljs `(...))\n\n  See prismatics schema.macros/if-cljs.", RT.keyword(null, "line"), 274, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__176 = RT.var("ginga.core", "try-catchall");
        const__179 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "body")))), RT.keyword(null, "doc"), "See prismatic schema.macros/try-catchall.", RT.keyword(null, "line"), 287, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__180 = RT.var("ginga.core", "error");
        const__183 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "value")))), RT.keyword(null, "doc"), "Puts an error into a box. Use deref to get it out again.", RT.keyword(null, "line"), 316, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__184 = RT.var("ginga.core", "error?");
        const__187 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "value")))), RT.keyword(null, "doc"), "Tests whether the given value is a boxed error.", RT.keyword(null, "line"), 321, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__188 = RT.var("ginga.core", "throwable");
        const__191 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(RT.map(RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "message"), Symbol.intern(null, "cause")), RT.keyword(null, "as"), Symbol.intern(null, "data"))))), RT.keyword(null, "doc"), "Turns a map into a throwable", RT.keyword(null, "line"), 326, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__192 = RT.var("ginga.core", "throw-map");
        const__195 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "data")))), RT.keyword(null, "doc"), "Like throw, but calls ginga.core/throwable on the argument.", RT.keyword(null, "line"), 333, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__196 = RT.var("ginga.core", "catchall");
        const__199 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "body")))), RT.keyword(null, "doc"), "Evalutes body. If body causes an exception, catches it, and puts it\n   in a box.", RT.keyword(null, "line"), 338, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
    }

    public static void __init2() {
        const__200 = RT.var("ginga.core", "delay-fn");
        const__203 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "body")))), RT.keyword(null, "doc"), "Like delay, but returns an IFun instead of an IRef. Wraps a\n   computationally expensive expression that evalutes to a function with\n   another function which evaluates the expression the first time it is\n   called and caches it. Useful to optimize cljs startup time.", RT.keyword(null, "line"), 344, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__204 = RT.var("ginga.core", "parse-int");
        const__207 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "numeric-str")))), RT.keyword(null, "doc"), "Parses the given string into an integer.\n   May throw or return NaN if a parsing error occurs.", RT.keyword(null, "line"), 353, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__208 = RT.var("ginga.core", "auto-partial");
        const__211 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "fdecl")))), RT.keyword(null, "doc"), "Wraps a non-variadic fn declaration and adds partial arities.\n   (auto-partial (fn myfn [a b c] ...))\n   ->\n   (fn myfn ([a]   (fn [b c] (myfn a b c)))\n            ([a b] (fn [c]   (myfn a b c)))\n            ([a b c] ...))", RT.keyword(null, "line"), 360, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__212 = RT.var("ginga.core", "defnap");
        const__215 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "decl")))), RT.keyword(null, "doc"), "Sugar for (def name (auto-partial (fn [...] ...))).", RT.keyword(null, "line"), 384, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__216 = RT.var("ginga.core", "case?");
        const__219 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "cases"), Symbol.intern(null, "expr")))), RT.keyword(null, "doc"), "Like (contains? #{...} value) but uses clojure.core/case for\n  speed. Caveats of clojure.core/case apply.", RT.keyword(null, "line"), 397, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__220 = RT.var("ginga.core", "make-array");
        const__222 = (AFn)((Object)RT.map(RT.keyword(null, "line"), 403, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__223 = RT.var("ginga.core", "preserving-reduced");
        const__226 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "rf")))), RT.keyword(null, "line"), 408, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__227 = RT.var("ginga.core", "contextual-return-result");
        const__231 = (AFn)((Object)RT.map(RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "result")))), RT.keyword(null, "line"), 415, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__232 = RT.var("ginga.core", "contextual-return-persistent-result");
        const__235 = (AFn)((Object)RT.map(RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "state"), Symbol.intern(null, "result")))), RT.keyword(null, "line"), 418, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__236 = RT.var("ginga.core", "constantly-empty-vector");
        const__238 = (AFn)((Object)RT.map(RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), 421, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__239 = RT.var("clojure.core", "constantly");
        const__240 = RT.var("ginga.core", "contextual-transducer");
        const__243 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "init-f"), Symbol.intern(null, "finalize-f"), Symbol.intern(null, "step-f")))), RT.keyword(null, "doc"), "Creates a stateful transducer from three functions:\n\n  ()             -> (init-state)      ;; init-f\n  (state result) -> *                 ;; finalize-f\n  (state input)  -> (new-state input) ;; step-f\n\n  Caveat emptor: if finalize-f returns something other than it's result\n  argument, the transducer will only be compatible with transduce, but\n  not other transducer applying functions (into, sequence) that make\n  assumptions about the return value of the transducer.", RT.keyword(null, "line"), 423, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__244 = RT.var("ginga.core", "contextual-buffering-transducer");
        const__247 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "init-f"), Symbol.intern(null, "finalize-f"), Symbol.intern(null, "remaining-f"), Symbol.intern(null, "step-f")))), RT.keyword(null, "doc"), "Similar to contextual-transducer, but allows the buffering/mapcatting\n  of inputs:\n\n  ()             -> (init-state)       ;; init-f\n  (state result) -> *                  ;; finalize-f\n  (state)        -> (remaining-inputs) ;; remaining-f\n  (state input)  -> (new-state inputs) ;; step-f\n\n  Same caveat emptor as in contextual-transducer applied.", RT.keyword(null, "line"), 448, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__248 = RT.var("ginga.core", "stateful-transducer");
        const__251 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "step-f"), Symbol.intern(null, "ctx")))), RT.keyword(null, "doc"), "Like contextual-transducer but simplified.", RT.keyword(null, "line"), 482, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__252 = RT.var("ginga.core", "buffering-transducer");
        const__255 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "step-f"), Symbol.intern(null, "remaining-f"), Symbol.intern(null, "ctx")))), RT.keyword(null, "doc"), "Like contextual-buffering-transducer but simplified.", RT.keyword(null, "line"), 489, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__256 = RT.var("ginga.core", "contextual-map");
        const__259 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "ctx"), Symbol.intern(null, "coll")))), RT.keyword(null, "doc"), "Like map, but maintains a first context variable similar to reduce.", RT.keyword(null, "line"), 496, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__260 = RT.var("ginga.core", "contextual-mapcat");
        const__263 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "ctx"), Symbol.intern(null, "coll")))), RT.keyword(null, "doc"), "Like mapcat, but maintains a first context variable similar to reduce.", RT.keyword(null, "line"), 504, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__264 = RT.var("ginga.core", "identity-xform");
        const__267 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "rf")))), RT.keyword(null, "line"), 513, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__268 = RT.var("ginga.core", "partition-at");
        const__271 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "pred?")))), RT.keyword(null, "doc"), "Similar to partition-by, except starts a new partition when pred?\n  returns true.", RT.keyword(null, "line"), 519, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__272 = RT.var("ginga.core", "partition-pairwise");
        const__275 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "pair?")))), RT.keyword(null, "doc"), "Returns a transducer, similar to partition-by, but the predicate\n   takes two adjacent items in the collection and starts a new partition\n   when it returns false.", RT.keyword(null, "line"), 532, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__276 = RT.var("ginga.core", "mapcat-pairs");
        const__279 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "s")))), RT.keyword(null, "doc"), "Like mapcat, but f will be called with two values, the previous\n  value, which is either the first value in s or the last value returned\n  by f, and the current value. The return value of f will replace the\n  previous value and the current value in the result sequence.", RT.keyword(null, "line"), 546, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__280 = RT.var("ginga.core", "remove-all-pairs");
        const__283 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "pair?"), Symbol.intern(null, "s")))), RT.keyword(null, "doc"), "Removes any two consecutive items for which pair? returns true. In a\n  sequence where b and c are pairs and a and d are pairs, will remove\n  both b and c and a and d. The result will not have any two consecutive\n  items for which pair? returns true.\n\n  Different from dedupe, as dedupe will only remove the second of a\n  matched pair not both.", RT.keyword(null, "line"), 561, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__284 = RT.var("ginga.core", "reorder-xform");
        const__287 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "key-fn"), Symbol.intern(null, "follows?"), Symbol.intern(null, "init")), Tuple.create(Symbol.intern(null, "comparator"), Symbol.intern(null, "key-fn"), Symbol.intern(null, "follows?"), Symbol.intern(null, "init")))), RT.keyword(null, "doc"), "Creates a reordering transducer.\n\n  (key-fn value) - is used to derive keys from values,\n\n  (follows? key-precedes key-follows) - used to determine whether\n  two keys exactly precede/follow each other,\n\n  init - is passed to follows? in place of the first key of the\n  sequence.\n\n  If the stream contains duplicate keys, some duplicate values may be\n  discarded or otherwise prevent all remaining values in the sequence\n  from being processed.", RT.keyword(null, "line"), 572, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__288 = RT.var("ginga.core", "raise");
        const__291 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "print-args")))), RT.keyword(null, "line"), 606, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__292 = RT.var("ginga.core", "no-op");
        const__295 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "_")))), RT.keyword(null, "line"), 609, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__296 = RT.var("ginga.core", "take-until");
        const__299 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "pred"), Symbol.intern(null, "coll")))), RT.keyword(null, "line"), 613, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
    }

    public static void __init3() {
        const__300 = RT.var("ginga.core", "reset-return-prev!");
        const__303 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "atom"), Symbol.intern(null, "new-val")))), RT.keyword(null, "doc"), "Like clojure.core/reset!, but returns the old value.", RT.keyword(null, "line"), 620, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__304 = RT.var("ginga.core", "swap-return-prev!");
        const__307 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "atom"), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")))), RT.keyword(null, "doc"), "Like clojure.core/swap!, but returns the old value.", RT.keyword(null, "line"), 629, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__308 = RT.var("ginga.core", "swap-return-both!");
        const__311 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "atom"), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")))), RT.keyword(null, "doc"), "Like clojure.core/swap!, but returns both old and new values.", RT.keyword(null, "line"), 638, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__312 = RT.var("ginga.core", "swap-return-ctx!");
        const__315 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "atom"), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")))), RT.keyword(null, "doc"), "Like clojure.core/swap!, but returns true only if the value in the\n  atom was changed by this call.", RT.keyword(null, "line"), 648, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__316 = RT.var("ginga.core", "add-watch-once");
        const__319 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "ref"), Symbol.intern(null, "key"), Symbol.intern(null, "f")))), RT.keyword(null, "doc"), "Like add-watch, but will invoke f only once the next time the atom\n  changes.", RT.keyword(null, "line"), 659, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__320 = RT.var("ginga.core", "update-some");
        const__323 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")))), RT.keyword(null, "doc"), "Like update, but only updates the value if it exists and is non-nil.", RT.keyword(null, "line"), 669, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__324 = RT.var("ginga.core", "range-from");
        const__327 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "start")), Tuple.create(Symbol.intern(null, "start"), Symbol.intern(null, "step")))), RT.keyword(null, "doc"), "Like range, but only takes a start value and no end value.", RT.keyword(null, "line"), 676, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__328 = RT.classForName("ginga.core.Closable");
        const__329 = RT.var("ginga.core", "Closable");
        const__330 = (ISeq)((Object)PersistentList.create(Arrays.asList(((IObj)Symbol.intern(null, "close")).withMeta(RT.map(RT.keyword(null, "doc"), "Closes a scoped resource.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))))));
        const__332 = (AFn)((Object)RT.map(RT.keyword(null, "on"), Symbol.intern(null, "ginga.core.Closable"), RT.keyword(null, "on-interface"), RT.classForName("ginga.core.Closable")));
        const__333 = (AFn)((Object)RT.map(RT.keyword(null, "close"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "close")).withMeta(RT.map(RT.keyword(null, "doc"), "Closes a scoped resource.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Closes a scoped resource.")));
        const__335 = (AFn)((Object)RT.map(RT.keyword(null, "close"), RT.keyword(null, "close")));
        const__336 = (AFn)((Object)((IObj)Symbol.intern(null, "close")).withMeta(RT.map(RT.keyword(null, "doc"), "Closes a scoped resource.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))));
        const__337 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "close")).withMeta(RT.map(RT.keyword(null, "doc"), "Closes a scoped resource.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Closes a scoped resource."));
        const__338 = Symbol.intern(null, "Closable");
        const__339 = RT.var("ginga.core", "with-open");
        const__342 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "bindings"), Symbol.intern(null, "&"), Symbol.intern(null, "body")))), RT.keyword(null, "doc"), "Like clojure.core/with-open, but works with objects supporting either\n  java.io.Closeable or the ginga.core/Closable protocol.", RT.keyword(null, "line"), 689, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__343 = RT.var("ginga.core", "vary-ex-data");
        const__346 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(((IObj)Symbol.intern(null, "e")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Throwable"))), Symbol.intern(null, "fn"), Symbol.intern(null, "&"), Symbol.intern(null, "args")))), RT.keyword(null, "line"), 704, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__347 = RT.var("ginga.core", "with-rethrow-ctx");
        const__350 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "ctx"), Symbol.intern(null, "&"), Symbol.intern(null, "body")))), RT.keyword(null, "line"), 709, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__351 = RT.var("ginga.core", "descending");
        const__354 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "a"), Symbol.intern(null, "b")))), RT.keyword(null, "line"), 714, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__355 = RT.var("ginga.core", "some-index");
        const__358 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "pred?"), Symbol.intern(null, "coll")))), RT.keyword(null, "line"), 717, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__359 = RT.var("ginga.core", "replace-last");
        const__362 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "v"), Symbol.intern(null, "new")))), RT.keyword(null, "line"), 720, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__363 = RT.var("ginga.core", "update-last");
        const__366 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "v"), Symbol.intern(null, "f")), Tuple.create(Symbol.intern(null, "v"), Symbol.intern(null, "f"), Symbol.intern(null, "a")), Tuple.create(Symbol.intern(null, "v"), Symbol.intern(null, "f"), Symbol.intern(null, "a"), Symbol.intern(null, "&"), Symbol.intern(null, "etc")))), RT.keyword(null, "line"), 723, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__367 = RT.var("ginga.core", "last-index-of");
        const__370 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "pred"), Symbol.intern(null, "v")))), RT.keyword(null, "line"), 728, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__371 = RT.var("ginga.core", "drop-last-while");
        const__374 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "pred"), Symbol.intern(null, "s")))), RT.keyword(null, "line"), 735, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__375 = RT.var("ginga.core", "dissoc-keys-with-nil-values");
        const__378 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "a-map")))), RT.keyword(null, "line"), 742, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__379 = RT.var("ginga.core", "pad");
        const__382 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "value"), Symbol.intern(null, "cnt"), Symbol.intern(null, "s")))), RT.keyword(null, "line"), 747, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__383 = RT.var("ginga.core", "memoized-apply");
        const__386 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "cache"), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")))), RT.keyword(null, "doc"), "Similar in logic to clojure.core/memoize but exposes the cache.", RT.keyword(null, "line"), 755, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__387 = RT.var("ginga.core", "call");
        const__390 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "f")))), RT.keyword(null, "doc"), "Calls its argument. Like (f).", RT.keyword(null, "line"), 764, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__391 = RT.var("ginga.core", "retry?");
        const__394 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(RT.map(Symbol.intern(null, "retry-error-condition"), RT.keyword(null, "when"), Symbol.intern(null, "retry-count"), RT.keyword(null, "count"), RT.keyword(null, "as"), Symbol.intern(null, "retry-opts")), Symbol.intern(null, "retried"), Symbol.intern(null, "ex")))), RT.keyword(null, "line"), 769, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__395 = RT.var("ginga.core", "with-retries");
        const__398 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "retry-opts"), Symbol.intern(null, "&"), Symbol.intern(null, "body")))), RT.keyword(null, "doc"), "Given a map of retry options, retry the body if it produces an exception.\n\n  (with-retries {:when #(-> % ex-data :custom-property)\n                 :count 10}\n   ..)", RT.keyword(null, "line"), 778, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__399 = RT.var("ginga.core", "duplicates");
    }

    public static void __init4() {
        const__402 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "coll")))), RT.keyword(null, "doc"), "Returns a sequence of duplicates in coll.", RT.keyword(null, "line"), 797, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__403 = RT.var("ginga.core", "rotate");
        const__406 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "n"), Symbol.intern(null, "coll")))), RT.keyword(null, "doc"), "Rotates coll by n\n\n    (rotate 2 [1 2 3]) -> [3 1 2]\n\n  If n is greater than count of coll, returns a sequence of the values\n  in coll (unrotated).", RT.keyword(null, "line"), 804, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__407 = RT.var("ginga.core", "alist->map");
        const__410 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "alist")))), RT.keyword(null, "doc"), "Turns an association list into a map with multi-valued values,\n  with the order of the values having the same order as in the\n  alist.\n\n    (alist->map [[:a 1] [:b 2] [:a 3]])\n    -> {:a [1 3] :b [2]}\n  ", RT.keyword(null, "line"), 815, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__411 = RT.var("ginga.core", "map-keys");
        const__414 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "m")))), RT.keyword(null, "line"), 830, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__415 = RT.var("ginga.core", "map-vals");
        const__418 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "m")))), RT.keyword(null, "line"), 837, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__419 = RT.var("ginga.core", "resize-map");
        const__422 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "max-size"), Symbol.intern(null, "m")))), RT.keyword(null, "doc"), "Given a max-size, will prune the given map by dissocing the first n\n  keys where n is the number of entries in the map that exceed\n  max-size.", RT.keyword(null, "line"), 844, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__423 = RT.var("ginga.core", "sliding-resize");
        const__426 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "cnt"), Symbol.intern(null, "v")), ((IObj)((Object)Tuple.create(Symbol.intern(null, "maintain-cnt"), Symbol.intern(null, "resize-cnt"), Symbol.intern(null, "v")))).withMeta(RT.map(RT.keyword(null, "pre"), Tuple.create(((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "<="), Symbol.intern(null, "maintain-cnt"), Symbol.intern(null, "resize-cnt"))))).withMeta(RT.map(RT.keyword(null, "line"), 860, RT.keyword(null, "column"), 11))))))), RT.keyword(null, "doc"), "Poor man's deque", RT.keyword(null, "line"), 855, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__427 = RT.var("ginga.core", "start-thread");
        const__431 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "f")))), RT.keyword(null, "line"), 867, RT.keyword(null, "column"), 4, RT.keyword(null, "file"), "ginga/core.cljc"));
        const__432 = RT.var("ginga.core", "loop-until");
        const__435 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "pred?"), Symbol.intern(null, "bindings"), Symbol.intern(null, "&"), Symbol.intern(null, "body")))), RT.keyword(null, "doc"), "Does a loop-recur until the given predicate returns true for the\n  value returned by body. Returns the value.", RT.keyword(null, "line"), 870, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/core.cljc"));
    }

    static {
        core__init.__init0();
        core__init.__init1();
        core__init.__init2();
        core__init.__init3();
        core__init.__init4();
        Compiler.pushNSandLoader(RT.classForName("ginga.core__init").getClassLoader());
        try {
            core__init.load();
        }
        catch (Throwable throwable2) {
            Var.popThreadBindings();
            throw throwable2;
        }
        Var.popThreadBindings();
    }
}

