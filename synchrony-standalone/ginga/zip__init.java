/*
 * Decompiled with CFR 0.152.
 */
package ginga;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import ginga.zip$advance_subseqs;
import ginga.zip$ancestor_nodes;
import ginga.zip$append_to_parent_STAR_;
import ginga.zip$contextual_walk;
import ginga.zip$descend_path;
import ginga.zip$down_end;
import ginga.zip$down_impl;
import ginga.zip$edit;
import ginga.zip$finalize_subseqs;
import ginga.zip$fn__20789;
import ginga.zip$fn__20807;
import ginga.zip$fn__20810;
import ginga.zip$fn__20821;
import ginga.zip$fn__20832;
import ginga.zip$fn__20843;
import ginga.zip$fn__20854;
import ginga.zip$fn__20865;
import ginga.zip$fn__20876;
import ginga.zip$fn__20887;
import ginga.zip$fn__20902;
import ginga.zip$fn__20905;
import ginga.zip$fn__20916;
import ginga.zip$fn__20947;
import ginga.zip$fn__20950;
import ginga.zip$fn__20961;
import ginga.zip$fn__20974;
import ginga.zip$fn__20985;
import ginga.zip$fn__20998;
import ginga.zip$fn__21011;
import ginga.zip$fn__21022;
import ginga.zip$fn__21035;
import ginga.zip$fn__21046;
import ginga.zip$fn__21059;
import ginga.zip$fn__21076;
import ginga.zip$fn__21079;
import ginga.zip$fn__21092;
import ginga.zip$fn__21107;
import ginga.zip$fn__21110;
import ginga.zip$fn__21123;
import ginga.zip$fn__21147;
import ginga.zip$fn__21181;
import ginga.zip$fn__21209;
import ginga.zip$frames;
import ginga.zip$from_seqable;
import ginga.zip$from_vector;
import ginga.zip$insert_down;
import ginga.zip$loading__6789__auto____20787;
import ginga.zip$next_node;
import ginga.zip$parent_node;
import ginga.zip$path;
import ginga.zip$prev_replace_next;
import ginga.zip$replace_down;
import ginga.zip$shift_next_nodes_down;
import ginga.zip$shift_next_nodes_up;
import ginga.zip$split;
import ginga.zip$top;
import ginga.zip$traverser;
import ginga.zip$unwrap;
import ginga.zip$unwrap_children_next;
import ginga.zip$unwrap_children_prev;
import ginga.zip$walk;
import ginga.zip$zipper;
import java.util.Arrays;

public class zip__init {
    public static final Var const__0;
    public static final AFn const__1;
    public static final AFn const__2;
    public static final Object const__3;
    public static final Var const__4;
    public static final Var const__5;
    public static final Var const__6;
    public static final Keyword const__7;
    public static final Var const__8;
    public static final ISeq const__9;
    public static final Var const__10;
    public static final Var const__11;
    public static final AFn const__15;
    public static final Keyword const__16;
    public static final AFn const__17;
    public static final Keyword const__18;
    public static final Keyword const__19;
    public static final AFn const__28;
    public static final Keyword const__29;
    public static final Var const__30;
    public static final Var const__31;
    public static final Var const__32;
    public static final AFn const__33;
    public static final AFn const__34;
    public static final Keyword const__35;
    public static final AFn const__36;
    public static final AFn const__37;
    public static final AFn const__38;
    public static final AFn const__39;
    public static final AFn const__40;
    public static final AFn const__41;
    public static final AFn const__42;
    public static final AFn const__43;
    public static final AFn const__44;
    public static final AFn const__45;
    public static final AFn const__46;
    public static final AFn const__47;
    public static final AFn const__48;
    public static final AFn const__49;
    public static final Var const__50;
    public static final AFn const__51;
    public static final Object const__52;
    public static final Var const__53;
    public static final ISeq const__54;
    public static final AFn const__56;
    public static final AFn const__57;
    public static final AFn const__60;
    public static final AFn const__61;
    public static final AFn const__62;
    public static final AFn const__63;
    public static final AFn const__64;
    public static final AFn const__65;
    public static final Object const__66;
    public static final Var const__67;
    public static final ISeq const__68;
    public static final AFn const__70;
    public static final AFn const__71;
    public static final AFn const__82;
    public static final AFn const__83;
    public static final AFn const__84;
    public static final AFn const__85;
    public static final AFn const__86;
    public static final AFn const__87;
    public static final AFn const__88;
    public static final AFn const__89;
    public static final AFn const__90;
    public static final AFn const__91;
    public static final AFn const__92;
    public static final AFn const__93;
    public static final AFn const__94;
    public static final AFn const__95;
    public static final AFn const__96;
    public static final AFn const__97;
    public static final AFn const__98;
    public static final AFn const__99;
    public static final AFn const__100;
    public static final AFn const__101;
    public static final AFn const__102;
    public static final AFn const__103;
    public static final Object const__104;
    public static final Var const__105;
    public static final ISeq const__106;
    public static final AFn const__108;
    public static final AFn const__109;
    public static final AFn const__112;
    public static final AFn const__113;
    public static final AFn const__114;
    public static final AFn const__115;
    public static final AFn const__116;
    public static final AFn const__117;
    public static final Object const__118;
    public static final Var const__119;
    public static final ISeq const__120;
    public static final AFn const__122;
    public static final AFn const__123;
    public static final AFn const__125;
    public static final AFn const__126;
    public static final AFn const__127;
    public static final AFn const__128;
    public static final Var const__129;
    public static final AFn const__136;
    public static final Var const__137;
    public static final AFn const__138;
    public static final Var const__139;
    public static final AFn const__143;
    public static final Var const__144;
    public static final AFn const__147;
    public static final Var const__148;
    public static final AFn const__151;
    public static final AFn const__154;
    public static final AFn const__157;
    public static final Var const__158;
    public static final AFn const__161;
    public static final Var const__162;
    public static final AFn const__165;
    public static final Var const__166;
    public static final AFn const__169;
    public static final Var const__170;
    public static final AFn const__173;
    public static final Var const__174;
    public static final AFn const__177;
    public static final Var const__178;
    public static final AFn const__181;
    public static final Var const__182;
    public static final AFn const__185;
    public static final Var const__186;
    public static final AFn const__189;
    public static final Var const__190;
    public static final AFn const__193;
    public static final Var const__194;
    public static final AFn const__197;
    public static final Var const__198;
    public static final AFn const__201;
    public static final Var const__202;
    public static final AFn const__205;
    public static final Var const__206;
    public static final AFn const__209;
    public static final Var const__210;
    public static final AFn const__213;
    public static final Var const__214;
    public static final AFn const__217;
    public static final Var const__218;
    public static final AFn const__221;
    public static final Var const__222;
    public static final AFn const__225;
    public static final Var const__226;
    public static final AFn const__229;
    public static final Var const__230;
    public static final AFn const__233;
    public static final Var const__234;
    public static final AFn const__237;
    public static final Var const__238;
    public static final AFn const__241;
    public static final Var const__242;
    public static final AFn const__245;
    public static final Var const__246;
    public static final AFn const__249;

    public static void load() {
        Object v2;
        Object object = ((IFn)const__0.getRawRoot()).invoke(const__1);
        Object object2 = ((IFn)new zip$loading__6789__auto____20787()).invoke();
        if (((Symbol)const__1).equals(const__2)) {
            v2 = null;
        } else {
            LockingTransaction.runInTransaction(new zip$fn__20789());
            v2 = null;
        }
        Object object3 = ((IFn)new zip$fn__20807()).invoke();
        Object object4 = const__3;
        Object object5 = ((IFn)const__4.getRawRoot()).invoke(const__5, const__6.getRawRoot(), const__7, null);
        Object object6 = ((IFn)const__8).invoke(const__5, const__9);
        Object object7 = ((IFn)const__10.getRawRoot()).invoke(const__5, const__11.getRawRoot(), ((IFn)const__6.getRawRoot()).invoke(const__15, const__16, const__17, const__18, const__5, const__19, const__28, const__29, RT.map(((IFn)const__30.getRawRoot()).invoke(const__31.get(), ((IFn)const__32.getRawRoot()).invoke(const__33, ((IFn)const__11.getRawRoot()).invoke(const__34, RT.mapUniqueKeys(const__35, const__5)))), new zip$fn__20810(), ((IFn)const__30.getRawRoot()).invoke(const__31.get(), ((IFn)const__32.getRawRoot()).invoke(const__36, ((IFn)const__11.getRawRoot()).invoke(const__37, RT.mapUniqueKeys(const__35, const__5)))), new zip$fn__20821(), ((IFn)const__30.getRawRoot()).invoke(const__31.get(), ((IFn)const__32.getRawRoot()).invoke(const__38, ((IFn)const__11.getRawRoot()).invoke(const__39, RT.mapUniqueKeys(const__35, const__5)))), new zip$fn__20832(), ((IFn)const__30.getRawRoot()).invoke(const__31.get(), ((IFn)const__32.getRawRoot()).invoke(const__40, ((IFn)const__11.getRawRoot()).invoke(const__41, RT.mapUniqueKeys(const__35, const__5)))), new zip$fn__20843(), ((IFn)const__30.getRawRoot()).invoke(const__31.get(), ((IFn)const__32.getRawRoot()).invoke(const__42, ((IFn)const__11.getRawRoot()).invoke(const__43, RT.mapUniqueKeys(const__35, const__5)))), new zip$fn__20854(), ((IFn)const__30.getRawRoot()).invoke(const__31.get(), ((IFn)const__32.getRawRoot()).invoke(const__44, ((IFn)const__11.getRawRoot()).invoke(const__45, RT.mapUniqueKeys(const__35, const__5)))), new zip$fn__20865(), ((IFn)const__30.getRawRoot()).invoke(const__31.get(), ((IFn)const__32.getRawRoot()).invoke(const__46, ((IFn)const__11.getRawRoot()).invoke(const__47, RT.mapUniqueKeys(const__35, const__5)))), new zip$fn__20876(), ((IFn)const__30.getRawRoot()).invoke(const__31.get(), ((IFn)const__32.getRawRoot()).invoke(const__48, ((IFn)const__11.getRawRoot()).invoke(const__49, RT.mapUniqueKeys(const__35, const__5)))), new zip$fn__20887())));
        Object object8 = ((IFn)const__50.getRawRoot()).invoke(const__5.getRawRoot());
        AFn aFn = const__51;
        Object object9 = ((IFn)new zip$fn__20902()).invoke();
        Object object10 = const__52;
        Object object11 = ((IFn)const__4.getRawRoot()).invoke(const__53, const__6.getRawRoot(), const__7, null);
        Object object12 = ((IFn)const__8).invoke(const__53, const__54);
        Object object13 = ((IFn)const__10.getRawRoot()).invoke(const__53, const__11.getRawRoot(), ((IFn)const__6.getRawRoot()).invoke(const__56, const__16, const__57, const__18, const__53, const__19, const__60, const__29, RT.map(((IFn)const__30.getRawRoot()).invoke(const__31.get(), ((IFn)const__32.getRawRoot()).invoke(const__61, ((IFn)const__11.getRawRoot()).invoke(const__62, RT.mapUniqueKeys(const__35, const__53)))), new zip$fn__20905(), ((IFn)const__30.getRawRoot()).invoke(const__31.get(), ((IFn)const__32.getRawRoot()).invoke(const__63, ((IFn)const__11.getRawRoot()).invoke(const__64, RT.mapUniqueKeys(const__35, const__53)))), new zip$fn__20916())));
        Object object14 = ((IFn)const__50.getRawRoot()).invoke(const__53.getRawRoot());
        AFn aFn2 = const__65;
        Object object15 = ((IFn)new zip$fn__20947()).invoke();
        Object object16 = const__66;
        Object object17 = ((IFn)const__4.getRawRoot()).invoke(const__67, const__6.getRawRoot(), const__7, null);
        Object object18 = ((IFn)const__8).invoke(const__67, const__68);
        Object object19 = ((IFn)const__10.getRawRoot()).invoke(const__67, const__11.getRawRoot(), ((IFn)const__6.getRawRoot()).invoke(const__70, const__16, const__71, const__18, const__67, const__19, const__82, const__29, RT.map(((IFn)const__30.getRawRoot()).invoke(const__31.get(), ((IFn)const__32.getRawRoot()).invoke(const__83, ((IFn)const__11.getRawRoot()).invoke(const__84, RT.mapUniqueKeys(const__35, const__67)))), new zip$fn__20950(), ((IFn)const__30.getRawRoot()).invoke(const__31.get(), ((IFn)const__32.getRawRoot()).invoke(const__85, ((IFn)const__11.getRawRoot()).invoke(const__86, RT.mapUniqueKeys(const__35, const__67)))), new zip$fn__20961(), ((IFn)const__30.getRawRoot()).invoke(const__31.get(), ((IFn)const__32.getRawRoot()).invoke(const__87, ((IFn)const__11.getRawRoot()).invoke(const__88, RT.mapUniqueKeys(const__35, const__67)))), new zip$fn__20974(), ((IFn)const__30.getRawRoot()).invoke(const__31.get(), ((IFn)const__32.getRawRoot()).invoke(const__89, ((IFn)const__11.getRawRoot()).invoke(const__90, RT.mapUniqueKeys(const__35, const__67)))), new zip$fn__20985(), ((IFn)const__30.getRawRoot()).invoke(const__31.get(), ((IFn)const__32.getRawRoot()).invoke(const__91, ((IFn)const__11.getRawRoot()).invoke(const__92, RT.mapUniqueKeys(const__35, const__67)))), new zip$fn__20998(), ((IFn)const__30.getRawRoot()).invoke(const__31.get(), ((IFn)const__32.getRawRoot()).invoke(const__93, ((IFn)const__11.getRawRoot()).invoke(const__94, RT.mapUniqueKeys(const__35, const__67)))), new zip$fn__21011(), ((IFn)const__30.getRawRoot()).invoke(const__31.get(), ((IFn)const__32.getRawRoot()).invoke(const__95, ((IFn)const__11.getRawRoot()).invoke(const__96, RT.mapUniqueKeys(const__35, const__67)))), new zip$fn__21022(), ((IFn)const__30.getRawRoot()).invoke(const__31.get(), ((IFn)const__32.getRawRoot()).invoke(const__97, ((IFn)const__11.getRawRoot()).invoke(const__98, RT.mapUniqueKeys(const__35, const__67)))), new zip$fn__21035(), ((IFn)const__30.getRawRoot()).invoke(const__31.get(), ((IFn)const__32.getRawRoot()).invoke(const__99, ((IFn)const__11.getRawRoot()).invoke(const__100, RT.mapUniqueKeys(const__35, const__67)))), new zip$fn__21046(), ((IFn)const__30.getRawRoot()).invoke(const__31.get(), ((IFn)const__32.getRawRoot()).invoke(const__101, ((IFn)const__11.getRawRoot()).invoke(const__102, RT.mapUniqueKeys(const__35, const__67)))), new zip$fn__21059())));
        Object object20 = ((IFn)const__50.getRawRoot()).invoke(const__67.getRawRoot());
        AFn aFn3 = const__103;
        Object object21 = ((IFn)new zip$fn__21076()).invoke();
        Object object22 = const__104;
        Object object23 = ((IFn)const__4.getRawRoot()).invoke(const__105, const__6.getRawRoot(), const__7, null);
        Object object24 = ((IFn)const__8).invoke(const__105, const__106);
        Object object25 = ((IFn)const__10.getRawRoot()).invoke(const__105, const__11.getRawRoot(), ((IFn)const__6.getRawRoot()).invoke(const__108, const__16, const__109, const__18, const__105, const__19, const__112, const__29, RT.map(((IFn)const__30.getRawRoot()).invoke(const__31.get(), ((IFn)const__32.getRawRoot()).invoke(const__113, ((IFn)const__11.getRawRoot()).invoke(const__114, RT.mapUniqueKeys(const__35, const__105)))), new zip$fn__21079(), ((IFn)const__30.getRawRoot()).invoke(const__31.get(), ((IFn)const__32.getRawRoot()).invoke(const__115, ((IFn)const__11.getRawRoot()).invoke(const__116, RT.mapUniqueKeys(const__35, const__105)))), new zip$fn__21092())));
        Object object26 = ((IFn)const__50.getRawRoot()).invoke(const__105.getRawRoot());
        AFn aFn4 = const__117;
        Object object27 = ((IFn)new zip$fn__21107()).invoke();
        Object object28 = const__118;
        Object object29 = ((IFn)const__4.getRawRoot()).invoke(const__119, const__6.getRawRoot(), const__7, null);
        Object object30 = ((IFn)const__8).invoke(const__119, const__120);
        Object object31 = ((IFn)const__10.getRawRoot()).invoke(const__119, const__11.getRawRoot(), ((IFn)const__6.getRawRoot()).invoke(const__122, const__16, const__123, const__18, const__119, const__19, const__125, const__29, RT.mapUniqueKeys(((IFn)const__30.getRawRoot()).invoke(const__31.get(), ((IFn)const__32.getRawRoot()).invoke(const__126, ((IFn)const__11.getRawRoot()).invoke(const__127, RT.mapUniqueKeys(const__35, const__119)))), new zip$fn__21110())));
        Object object32 = ((IFn)const__50.getRawRoot()).invoke(const__119.getRawRoot());
        AFn aFn5 = const__128;
        Var var = const__129;
        Var var2 = var;
        var.setMeta((IPersistentMap)((Object)const__136));
        Var var3 = const__137;
        Var var4 = var3;
        var3.setMeta((IPersistentMap)((Object)const__138));
        Var var5 = const__139;
        var5.setMeta((IPersistentMap)((Object)const__143));
        Var var6 = var5;
        var5.bindRoot(new zip$down_impl());
        Object object33 = ((IFn)new zip$fn__21123()).invoke();
        Object object34 = ((IFn)new zip$fn__21147()).invoke();
        Object object35 = ((IFn)new zip$fn__21181()).invoke();
        Var var7 = const__144;
        var7.setMeta((IPersistentMap)((Object)const__147));
        Var var8 = var7;
        var7.bindRoot(new zip$advance_subseqs());
        Var var9 = const__148;
        var9.setMeta((IPersistentMap)((Object)const__151));
        Var var10 = var9;
        var9.bindRoot(new zip$finalize_subseqs());
        Object object36 = ((IFn)new zip$fn__21209()).invoke();
        Var var11 = const__129;
        var11.setMeta((IPersistentMap)((Object)const__154));
        Var var12 = var11;
        var11.bindRoot(new zip$from_vector());
        Var var13 = const__137;
        var13.setMeta((IPersistentMap)((Object)const__157));
        Var var14 = var13;
        var13.bindRoot(new zip$from_seqable());
        Var var15 = const__158;
        var15.setMeta((IPersistentMap)((Object)const__161));
        Var var16 = var15;
        var15.bindRoot(new zip$zipper());
        Var var17 = const__162;
        var17.setMeta((IPersistentMap)((Object)const__165));
        Var var18 = var17;
        var17.bindRoot(new zip$traverser());
        Var var19 = const__166;
        var19.setMeta((IPersistentMap)((Object)const__169));
        Var var20 = var19;
        var19.bindRoot(new zip$parent_node());
        Var var21 = const__170;
        var21.setMeta((IPersistentMap)((Object)const__173));
        Var var22 = var21;
        var21.bindRoot(new zip$next_node());
        Var var23 = const__174;
        var23.setMeta((IPersistentMap)((Object)const__177));
        Var var24 = var23;
        var23.bindRoot(new zip$down_end());
        Var var25 = const__178;
        var25.setMeta((IPersistentMap)((Object)const__181));
        Var var26 = var25;
        var25.bindRoot(new zip$insert_down());
        Var var27 = const__182;
        var27.setMeta((IPersistentMap)((Object)const__185));
        Var var28 = var27;
        var27.bindRoot(new zip$prev_replace_next());
        Var var29 = const__186;
        var29.setMeta((IPersistentMap)((Object)const__189));
        Var var30 = var29;
        var29.bindRoot(new zip$replace_down());
        Var var31 = const__190;
        var31.setMeta((IPersistentMap)((Object)const__193));
        Var var32 = var31;
        var31.bindRoot(new zip$edit());
        Var var33 = const__194;
        var33.setMeta((IPersistentMap)((Object)const__197));
        Var var34 = var33;
        var33.bindRoot(new zip$append_to_parent_STAR_());
        Var var35 = const__198;
        var35.setMeta((IPersistentMap)((Object)const__201));
        Var var36 = var35;
        var35.bindRoot(new zip$frames());
        Var var37 = const__202;
        var37.setMeta((IPersistentMap)((Object)const__205));
        Var var38 = var37;
        var37.bindRoot(new zip$ancestor_nodes());
        Var var39 = const__206;
        var39.setMeta((IPersistentMap)((Object)const__209));
        Var var40 = var39;
        var39.bindRoot(new zip$shift_next_nodes_up());
        Var var41 = const__210;
        var41.setMeta((IPersistentMap)((Object)const__213));
        Var var42 = var41;
        var41.bindRoot(new zip$shift_next_nodes_down());
        Var var43 = const__214;
        var43.setMeta((IPersistentMap)((Object)const__217));
        Var var44 = var43;
        var43.bindRoot(new zip$split());
        Var var45 = const__218;
        var45.setMeta((IPersistentMap)((Object)const__221));
        Var var46 = var45;
        var45.bindRoot(new zip$unwrap_children_next());
        Var var47 = const__222;
        var47.setMeta((IPersistentMap)((Object)const__225));
        Var var48 = var47;
        var47.bindRoot(new zip$unwrap_children_prev());
        Var var49 = const__226;
        var49.setMeta((IPersistentMap)((Object)const__229));
        Var var50 = var49;
        var49.bindRoot(new zip$unwrap());
        Var var51 = const__230;
        var51.setMeta((IPersistentMap)((Object)const__233));
        Var var52 = var51;
        var51.bindRoot(new zip$path());
        Var var53 = const__234;
        var53.setMeta((IPersistentMap)((Object)const__237));
        Var var54 = var53;
        var53.bindRoot(new zip$descend_path());
        Var var55 = const__238;
        var55.setMeta((IPersistentMap)((Object)const__241));
        Var var56 = var55;
        var55.bindRoot(new zip$top());
        Var var57 = const__242;
        var57.setMeta((IPersistentMap)((Object)const__245));
        Var var58 = var57;
        var57.bindRoot(new zip$walk());
        Var var59 = const__246;
        var59.setMeta((IPersistentMap)((Object)const__249));
        Var var60 = var59;
        var59.bindRoot(new zip$contextual_walk());
    }

    public static void __init0() {
        const__0 = RT.var("clojure.core", "in-ns");
        const__1 = Symbol.intern(null, "ginga.zip");
        const__2 = Symbol.intern(null, "clojure.core");
        const__3 = RT.classForName("ginga.zip.Traverse");
        const__4 = RT.var("clojure.core", "alter-meta!");
        const__5 = RT.var("ginga.zip", "Traverse");
        const__6 = RT.var("clojure.core", "assoc");
        const__7 = RT.keyword(null, "doc");
        const__8 = RT.var("clojure.core", "assert-same-protocol");
        const__9 = (ISeq)((Object)PersistentList.create(Arrays.asList(((IObj)Symbol.intern(null, "next")).withMeta(RT.map(RT.keyword(null, "doc"), "Skip the node at the current location, or return nil if at the end", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), ((IObj)Symbol.intern(null, "down")).withMeta(RT.map(RT.keyword(null, "doc"), "Descend into the node at the current location", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), ((IObj)Symbol.intern(null, "end")).withMeta(RT.map(RT.keyword(null, "doc"), "Skip to the end", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), ((IObj)Symbol.intern(null, "discard")).withMeta(RT.map(RT.keyword(null, "doc"), "Discard the current zipper frame and return the parent\n frame. Similar to (up) except doesn't apply any changes to the parent\n node. Returns nil if at the top.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), ((IObj)Symbol.intern(null, "node")).withMeta(RT.map(RT.keyword(null, "doc"), "Get the node at the current location.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), ((IObj)Symbol.intern(null, "top?")).withMeta(RT.map(RT.keyword(null, "doc"), "Return true if this is the to zipper frame and a call to discard or\n up would return nil.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), ((IObj)Symbol.intern(null, "end?")).withMeta(RT.map(RT.keyword(null, "doc"), "Return true if the current location is at the end of this zipper\n frame and a call to (node) or (next) would return nil.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), ((IObj)Symbol.intern(null, "traverse")).withMeta(RT.map(RT.keyword(null, "doc"), "Return a zipper that can only be used for traversing. Useful to\n optimize the case where only traversal is needed.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))))));
        const__10 = RT.var("clojure.core", "alter-var-root");
        const__11 = RT.var("clojure.core", "merge");
        const__15 = (AFn)((Object)RT.map(RT.keyword(null, "on"), Symbol.intern(null, "ginga.zip.Traverse"), RT.keyword(null, "on-interface"), RT.classForName("ginga.zip.Traverse")));
        const__16 = RT.keyword(null, "sigs");
        const__17 = (AFn)((Object)RT.map(RT.keyword(null, "next"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "next")).withMeta(RT.map(RT.keyword(null, "doc"), "Skip the node at the current location, or return nil if at the end", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Skip the node at the current location, or return nil if at the end"), RT.keyword(null, "down"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "down")).withMeta(RT.map(RT.keyword(null, "doc"), "Descend into the node at the current location", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Descend into the node at the current location"), RT.keyword(null, "end"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "end")).withMeta(RT.map(RT.keyword(null, "doc"), "Skip to the end", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Skip to the end"), RT.keyword(null, "discard"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "discard")).withMeta(RT.map(RT.keyword(null, "doc"), "Discard the current zipper frame and return the parent\n frame. Similar to (up) except doesn't apply any changes to the parent\n node. Returns nil if at the top.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Discard the current zipper frame and return the parent\n frame. Similar to (up) except doesn't apply any changes to the parent\n node. Returns nil if at the top."), RT.keyword(null, "node"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "node")).withMeta(RT.map(RT.keyword(null, "doc"), "Get the node at the current location.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Get the node at the current location."), RT.keyword(null, "top?"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "top?")).withMeta(RT.map(RT.keyword(null, "doc"), "Return true if this is the to zipper frame and a call to discard or\n up would return nil.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Return true if this is the to zipper frame and a call to discard or\n up would return nil."), RT.keyword(null, "end?"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "end?")).withMeta(RT.map(RT.keyword(null, "doc"), "Return true if the current location is at the end of this zipper\n frame and a call to (node) or (next) would return nil.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Return true if the current location is at the end of this zipper\n frame and a call to (node) or (next) would return nil."), RT.keyword(null, "traverse"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "traverse")).withMeta(RT.map(RT.keyword(null, "doc"), "Return a zipper that can only be used for traversing. Useful to\n optimize the case where only traversal is needed.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Return a zipper that can only be used for traversing. Useful to\n optimize the case where only traversal is needed.")));
        const__18 = RT.keyword(null, "var");
        const__19 = RT.keyword(null, "method-map");
        const__28 = (AFn)((Object)RT.map(RT.keyword(null, "down"), RT.keyword(null, "down"), RT.keyword(null, "end?"), RT.keyword(null, "end?"), RT.keyword(null, "top?"), RT.keyword(null, "top?"), RT.keyword(null, "node"), RT.keyword(null, "node"), RT.keyword(null, "traverse"), RT.keyword(null, "traverse"), RT.keyword(null, "next"), RT.keyword(null, "next"), RT.keyword(null, "discard"), RT.keyword(null, "discard"), RT.keyword(null, "end"), RT.keyword(null, "end")));
        const__29 = RT.keyword(null, "method-builders");
        const__30 = RT.var("clojure.core", "intern");
        const__31 = RT.var("clojure.core", "*ns*");
        const__32 = RT.var("clojure.core", "with-meta");
        const__33 = (AFn)((Object)((IObj)Symbol.intern(null, "end")).withMeta(RT.map(RT.keyword(null, "doc"), "Skip to the end", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))));
        const__34 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "end")).withMeta(RT.map(RT.keyword(null, "doc"), "Skip to the end", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Skip to the end"));
        const__35 = RT.keyword(null, "protocol");
        const__36 = (AFn)((Object)((IObj)Symbol.intern(null, "next")).withMeta(RT.map(RT.keyword(null, "doc"), "Skip the node at the current location, or return nil if at the end", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))));
        const__37 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "next")).withMeta(RT.map(RT.keyword(null, "doc"), "Skip the node at the current location, or return nil if at the end", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Skip the node at the current location, or return nil if at the end"));
        const__38 = (AFn)((Object)((IObj)Symbol.intern(null, "down")).withMeta(RT.map(RT.keyword(null, "doc"), "Descend into the node at the current location", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))));
        const__39 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "down")).withMeta(RT.map(RT.keyword(null, "doc"), "Descend into the node at the current location", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Descend into the node at the current location"));
        const__40 = (AFn)((Object)((IObj)Symbol.intern(null, "discard")).withMeta(RT.map(RT.keyword(null, "doc"), "Discard the current zipper frame and return the parent\n frame. Similar to (up) except doesn't apply any changes to the parent\n node. Returns nil if at the top.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))));
        const__41 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "discard")).withMeta(RT.map(RT.keyword(null, "doc"), "Discard the current zipper frame and return the parent\n frame. Similar to (up) except doesn't apply any changes to the parent\n node. Returns nil if at the top.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Discard the current zipper frame and return the parent\n frame. Similar to (up) except doesn't apply any changes to the parent\n node. Returns nil if at the top."));
        const__42 = (AFn)((Object)((IObj)Symbol.intern(null, "node")).withMeta(RT.map(RT.keyword(null, "doc"), "Get the node at the current location.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))));
        const__43 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "node")).withMeta(RT.map(RT.keyword(null, "doc"), "Get the node at the current location.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Get the node at the current location."));
        const__44 = (AFn)((Object)((IObj)Symbol.intern(null, "end?")).withMeta(RT.map(RT.keyword(null, "doc"), "Return true if the current location is at the end of this zipper\n frame and a call to (node) or (next) would return nil.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))));
        const__45 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "end?")).withMeta(RT.map(RT.keyword(null, "doc"), "Return true if the current location is at the end of this zipper\n frame and a call to (node) or (next) would return nil.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Return true if the current location is at the end of this zipper\n frame and a call to (node) or (next) would return nil."));
        const__46 = (AFn)((Object)((IObj)Symbol.intern(null, "traverse")).withMeta(RT.map(RT.keyword(null, "doc"), "Return a zipper that can only be used for traversing. Useful to\n optimize the case where only traversal is needed.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))));
        const__47 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "traverse")).withMeta(RT.map(RT.keyword(null, "doc"), "Return a zipper that can only be used for traversing. Useful to\n optimize the case where only traversal is needed.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Return a zipper that can only be used for traversing. Useful to\n optimize the case where only traversal is needed."));
        const__48 = (AFn)((Object)((IObj)Symbol.intern(null, "top?")).withMeta(RT.map(RT.keyword(null, "doc"), "Return true if this is the to zipper frame and a call to discard or\n up would return nil.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))));
        const__49 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "top?")).withMeta(RT.map(RT.keyword(null, "doc"), "Return true if this is the to zipper frame and a call to discard or\n up would return nil.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Return true if this is the to zipper frame and a call to discard or\n up would return nil."));
        const__50 = RT.var("clojure.core", "-reset-methods");
        const__51 = Symbol.intern(null, "Traverse");
        const__52 = RT.classForName("ginga.zip.Backtrack");
        const__53 = RT.var("ginga.zip", "Backtrack");
        const__54 = (ISeq)((Object)PersistentList.create(Arrays.asList(((IObj)Symbol.intern(null, "prev")).withMeta(RT.map(RT.keyword(null, "doc"), "Skip the node before the current location, or return nil if at the beginning.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), ((IObj)Symbol.intern(null, "prev-node")).withMeta(RT.map(RT.keyword(null, "doc"), "Similar to (-> (prev) (node)) but returns nil if there is no prev node", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))))));
        const__56 = (AFn)((Object)RT.map(RT.keyword(null, "on"), Symbol.intern(null, "ginga.zip.Backtrack"), RT.keyword(null, "on-interface"), RT.classForName("ginga.zip.Backtrack")));
        const__57 = (AFn)((Object)RT.map(RT.keyword(null, "prev"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "prev")).withMeta(RT.map(RT.keyword(null, "doc"), "Skip the node before the current location, or return nil if at the beginning.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Skip the node before the current location, or return nil if at the beginning."), RT.keyword(null, "prev-node"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "prev-node")).withMeta(RT.map(RT.keyword(null, "doc"), "Similar to (-> (prev) (node)) but returns nil if there is no prev node", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Similar to (-> (prev) (node)) but returns nil if there is no prev node")));
        const__60 = (AFn)((Object)RT.map(RT.keyword(null, "prev-node"), RT.keyword(null, "prev-node"), RT.keyword(null, "prev"), RT.keyword(null, "prev")));
        const__61 = (AFn)((Object)((IObj)Symbol.intern(null, "prev-node")).withMeta(RT.map(RT.keyword(null, "doc"), "Similar to (-> (prev) (node)) but returns nil if there is no prev node", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))));
        const__62 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "prev-node")).withMeta(RT.map(RT.keyword(null, "doc"), "Similar to (-> (prev) (node)) but returns nil if there is no prev node", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Similar to (-> (prev) (node)) but returns nil if there is no prev node"));
        const__63 = (AFn)((Object)((IObj)Symbol.intern(null, "prev")).withMeta(RT.map(RT.keyword(null, "doc"), "Skip the node before the current location, or return nil if at the beginning.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))));
        const__64 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "prev")).withMeta(RT.map(RT.keyword(null, "doc"), "Skip the node before the current location, or return nil if at the beginning.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Skip the node before the current location, or return nil if at the beginning."));
        const__65 = Symbol.intern(null, "Backtrack");
        const__66 = RT.classForName("ginga.zip.Edit");
        const__67 = RT.var("ginga.zip", "Edit");
        const__68 = (ISeq)((Object)PersistentList.create(Arrays.asList(((IObj)Symbol.intern(null, "remove")).withMeta(RT.map(RT.keyword(null, "doc"), "Remove the current node.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), ((IObj)Symbol.intern(null, "insert")).withMeta(RT.map(RT.keyword(null, "doc"), "Insert a new node before the current node. The new node will become\n the new current node.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "node")))))), ((IObj)Symbol.intern(null, "replace")).withMeta(RT.map(RT.keyword(null, "doc"), "Replace the node at the current location.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "node")))))), ((IObj)Symbol.intern(null, "replace-next")).withMeta(RT.map(RT.keyword(null, "doc"), "The same as (-> z (replace node) (next))", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "node")))))), ((IObj)Symbol.intern(null, "up")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the parent frame, replacing the current node in the parent\n frame with a new one reflecting all edits that happened in the current\n frame.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), ((IObj)Symbol.intern(null, "prev-remove")).withMeta(RT.map(RT.keyword(null, "doc"), "The same as (-> z (prev) (remove))", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), ((IObj)Symbol.intern(null, "insert*")).withMeta(RT.map(RT.keyword(null, "doc"), "The same as (reduce insert z (reverse nodes))", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "nodes")))))), ((IObj)Symbol.intern(null, "insert-next")).withMeta(RT.map(RT.keyword(null, "doc"), "The same as (-> z (insert node) (next))", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "node")))))), ((IObj)Symbol.intern(null, "up-next")).withMeta(RT.map(RT.keyword(null, "doc"), "The same as (-> z (up) (next))", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), ((IObj)Symbol.intern(null, "insert-next*")).withMeta(RT.map(RT.keyword(null, "doc"), "The same as (reduce insert-next z nodes)", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "nodes")))))))));
        const__70 = (AFn)((Object)RT.map(RT.keyword(null, "on"), Symbol.intern(null, "ginga.zip.Edit"), RT.keyword(null, "on-interface"), RT.classForName("ginga.zip.Edit")));
        const__71 = (AFn)((Object)RT.map(RT.keyword(null, "remove"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "remove")).withMeta(RT.map(RT.keyword(null, "doc"), "Remove the current node.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Remove the current node."), RT.keyword(null, "insert"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "insert")).withMeta(RT.map(RT.keyword(null, "doc"), "Insert a new node before the current node. The new node will become\n the new current node.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "node")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "node")))), RT.keyword(null, "doc"), "Insert a new node before the current node. The new node will become\n the new current node."), RT.keyword(null, "replace"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "replace")).withMeta(RT.map(RT.keyword(null, "doc"), "Replace the node at the current location.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "node")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "node")))), RT.keyword(null, "doc"), "Replace the node at the current location."), RT.keyword(null, "replace-next"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "replace-next")).withMeta(RT.map(RT.keyword(null, "doc"), "The same as (-> z (replace node) (next))", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "node")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "node")))), RT.keyword(null, "doc"), "The same as (-> z (replace node) (next))"), RT.keyword(null, "up"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "up")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the parent frame, replacing the current node in the parent\n frame with a new one reflecting all edits that happened in the current\n frame.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Return the parent frame, replacing the current node in the parent\n frame with a new one reflecting all edits that happened in the current\n frame."), RT.keyword(null, "prev-remove"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "prev-remove")).withMeta(RT.map(RT.keyword(null, "doc"), "The same as (-> z (prev) (remove))", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "The same as (-> z (prev) (remove))"), RT.keyword(null, "insert*"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "insert*")).withMeta(RT.map(RT.keyword(null, "doc"), "The same as (reduce insert z (reverse nodes))", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "nodes")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "nodes")))), RT.keyword(null, "doc"), "The same as (reduce insert z (reverse nodes))"), RT.keyword(null, "insert-next"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "insert-next")).withMeta(RT.map(RT.keyword(null, "doc"), "The same as (-> z (insert node) (next))", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "node")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "node")))), RT.keyword(null, "doc"), "The same as (-> z (insert node) (next))"), RT.keyword(null, "up-next"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "up-next")).withMeta(RT.map(RT.keyword(null, "doc"), "The same as (-> z (up) (next))", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "The same as (-> z (up) (next))"), RT.keyword(null, "insert-next*"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "insert-next*")).withMeta(RT.map(RT.keyword(null, "doc"), "The same as (reduce insert-next z nodes)", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "nodes")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "nodes")))), RT.keyword(null, "doc"), "The same as (reduce insert-next z nodes)")));
        const__82 = (AFn)((Object)RT.map(RT.keyword(null, "remove"), RT.keyword(null, "remove"), RT.keyword(null, "insert"), RT.keyword(null, "insert"), RT.keyword(null, "replace"), RT.keyword(null, "replace"), RT.keyword(null, "replace-next"), RT.keyword(null, "replace-next"), RT.keyword(null, "up"), RT.keyword(null, "up"), RT.keyword(null, "prev-remove"), RT.keyword(null, "prev-remove"), RT.keyword(null, "insert*"), RT.keyword(null, "insert*"), RT.keyword(null, "insert-next"), RT.keyword(null, "insert-next"), RT.keyword(null, "up-next"), RT.keyword(null, "up-next"), RT.keyword(null, "insert-next*"), RT.keyword(null, "insert-next*")));
        const__83 = (AFn)((Object)((IObj)Symbol.intern(null, "prev-remove")).withMeta(RT.map(RT.keyword(null, "doc"), "The same as (-> z (prev) (remove))", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))));
        const__84 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "prev-remove")).withMeta(RT.map(RT.keyword(null, "doc"), "The same as (-> z (prev) (remove))", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "The same as (-> z (prev) (remove))"));
        const__85 = (AFn)((Object)((IObj)Symbol.intern(null, "replace-next")).withMeta(RT.map(RT.keyword(null, "doc"), "The same as (-> z (replace node) (next))", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "node")))))));
        const__86 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "replace-next")).withMeta(RT.map(RT.keyword(null, "doc"), "The same as (-> z (replace node) (next))", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "node")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "node")))), RT.keyword(null, "doc"), "The same as (-> z (replace node) (next))"));
        const__87 = (AFn)((Object)((IObj)Symbol.intern(null, "up-next")).withMeta(RT.map(RT.keyword(null, "doc"), "The same as (-> z (up) (next))", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))));
        const__88 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "up-next")).withMeta(RT.map(RT.keyword(null, "doc"), "The same as (-> z (up) (next))", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "The same as (-> z (up) (next))"));
        const__89 = (AFn)((Object)((IObj)Symbol.intern(null, "insert-next")).withMeta(RT.map(RT.keyword(null, "doc"), "The same as (-> z (insert node) (next))", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "node")))))));
        const__90 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "insert-next")).withMeta(RT.map(RT.keyword(null, "doc"), "The same as (-> z (insert node) (next))", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "node")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "node")))), RT.keyword(null, "doc"), "The same as (-> z (insert node) (next))"));
        const__91 = (AFn)((Object)((IObj)Symbol.intern(null, "insert-next*")).withMeta(RT.map(RT.keyword(null, "doc"), "The same as (reduce insert-next z nodes)", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "nodes")))))));
        const__92 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "insert-next*")).withMeta(RT.map(RT.keyword(null, "doc"), "The same as (reduce insert-next z nodes)", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "nodes")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "nodes")))), RT.keyword(null, "doc"), "The same as (reduce insert-next z nodes)"));
        const__93 = (AFn)((Object)((IObj)Symbol.intern(null, "up")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the parent frame, replacing the current node in the parent\n frame with a new one reflecting all edits that happened in the current\n frame.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))));
        const__94 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "up")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the parent frame, replacing the current node in the parent\n frame with a new one reflecting all edits that happened in the current\n frame.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Return the parent frame, replacing the current node in the parent\n frame with a new one reflecting all edits that happened in the current\n frame."));
        const__95 = (AFn)((Object)((IObj)Symbol.intern(null, "insert")).withMeta(RT.map(RT.keyword(null, "doc"), "Insert a new node before the current node. The new node will become\n the new current node.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "node")))))));
        const__96 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "insert")).withMeta(RT.map(RT.keyword(null, "doc"), "Insert a new node before the current node. The new node will become\n the new current node.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "node")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "node")))), RT.keyword(null, "doc"), "Insert a new node before the current node. The new node will become\n the new current node."));
        const__97 = (AFn)((Object)((IObj)Symbol.intern(null, "remove")).withMeta(RT.map(RT.keyword(null, "doc"), "Remove the current node.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))));
        const__98 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "remove")).withMeta(RT.map(RT.keyword(null, "doc"), "Remove the current node.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Remove the current node."));
        const__99 = (AFn)((Object)((IObj)Symbol.intern(null, "insert*")).withMeta(RT.map(RT.keyword(null, "doc"), "The same as (reduce insert z (reverse nodes))", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "nodes")))))));
    }

    public static void __init1() {
        const__100 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "insert*")).withMeta(RT.map(RT.keyword(null, "doc"), "The same as (reduce insert z (reverse nodes))", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "nodes")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "nodes")))), RT.keyword(null, "doc"), "The same as (reduce insert z (reverse nodes))"));
        const__101 = (AFn)((Object)((IObj)Symbol.intern(null, "replace")).withMeta(RT.map(RT.keyword(null, "doc"), "Replace the node at the current location.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "node")))))));
        const__102 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "replace")).withMeta(RT.map(RT.keyword(null, "doc"), "Replace the node at the current location.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "node")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "node")))), RT.keyword(null, "doc"), "Replace the node at the current location."));
        const__103 = Symbol.intern(null, "Edit");
        const__104 = RT.classForName("ginga.zip.Nth");
        const__105 = RT.var("ginga.zip", "Nth");
        const__106 = (ISeq)((Object)PersistentList.create(Arrays.asList(((IObj)Symbol.intern(null, "nth-next")).withMeta(RT.map(RT.keyword(null, "doc"), "The same as (-> (iterate next z) (nth i))", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "i")))))), ((IObj)Symbol.intern(null, "nth-prev")).withMeta(RT.map(RT.keyword(null, "doc"), "The same as (-> (iterate prev z) (nth i))", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "i")))))))));
        const__108 = (AFn)((Object)RT.map(RT.keyword(null, "on"), Symbol.intern(null, "ginga.zip.Nth"), RT.keyword(null, "on-interface"), RT.classForName("ginga.zip.Nth")));
        const__109 = (AFn)((Object)RT.map(RT.keyword(null, "nth-next"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "nth-next")).withMeta(RT.map(RT.keyword(null, "doc"), "The same as (-> (iterate next z) (nth i))", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "i")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "i")))), RT.keyword(null, "doc"), "The same as (-> (iterate next z) (nth i))"), RT.keyword(null, "nth-prev"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "nth-prev")).withMeta(RT.map(RT.keyword(null, "doc"), "The same as (-> (iterate prev z) (nth i))", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "i")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "i")))), RT.keyword(null, "doc"), "The same as (-> (iterate prev z) (nth i))")));
        const__112 = (AFn)((Object)RT.map(RT.keyword(null, "nth-prev"), RT.keyword(null, "nth-prev"), RT.keyword(null, "nth-next"), RT.keyword(null, "nth-next")));
        const__113 = (AFn)((Object)((IObj)Symbol.intern(null, "nth-next")).withMeta(RT.map(RT.keyword(null, "doc"), "The same as (-> (iterate next z) (nth i))", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "i")))))));
        const__114 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "nth-next")).withMeta(RT.map(RT.keyword(null, "doc"), "The same as (-> (iterate next z) (nth i))", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "i")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "i")))), RT.keyword(null, "doc"), "The same as (-> (iterate next z) (nth i))"));
        const__115 = (AFn)((Object)((IObj)Symbol.intern(null, "nth-prev")).withMeta(RT.map(RT.keyword(null, "doc"), "The same as (-> (iterate prev z) (nth i))", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "i")))))));
        const__116 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "nth-prev")).withMeta(RT.map(RT.keyword(null, "doc"), "The same as (-> (iterate prev z) (nth i))", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "i")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "i")))), RT.keyword(null, "doc"), "The same as (-> (iterate prev z) (nth i))"));
        const__117 = Symbol.intern(null, "Nth");
        const__118 = RT.classForName("ginga.zip.AsZipper");
        const__119 = RT.var("ginga.zip", "AsZipper");
        const__120 = (ISeq)((Object)PersistentList.create(Arrays.asList(((IObj)Symbol.intern(null, "as-zipper")).withMeta(RT.map(RT.keyword(null, "doc"), "Convert a specialized zipper (VectorZipper) to a normal zipper.\n Useful to work with zipper frames directly instead of using the zipper\n API.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))))));
        const__122 = (AFn)((Object)RT.map(RT.keyword(null, "on"), Symbol.intern(null, "ginga.zip.AsZipper"), RT.keyword(null, "on-interface"), RT.classForName("ginga.zip.AsZipper")));
        const__123 = (AFn)((Object)RT.map(RT.keyword(null, "as-zipper"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "as-zipper")).withMeta(RT.map(RT.keyword(null, "doc"), "Convert a specialized zipper (VectorZipper) to a normal zipper.\n Useful to work with zipper frames directly instead of using the zipper\n API.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Convert a specialized zipper (VectorZipper) to a normal zipper.\n Useful to work with zipper frames directly instead of using the zipper\n API.")));
        const__125 = (AFn)((Object)RT.map(RT.keyword(null, "as-zipper"), RT.keyword(null, "as-zipper")));
        const__126 = (AFn)((Object)((IObj)Symbol.intern(null, "as-zipper")).withMeta(RT.map(RT.keyword(null, "doc"), "Convert a specialized zipper (VectorZipper) to a normal zipper.\n Useful to work with zipper frames directly instead of using the zipper\n API.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))));
        const__127 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "as-zipper")).withMeta(RT.map(RT.keyword(null, "doc"), "Convert a specialized zipper (VectorZipper) to a normal zipper.\n Useful to work with zipper frames directly instead of using the zipper\n API.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Convert a specialized zipper (VectorZipper) to a normal zipper.\n Useful to work with zipper frames directly instead of using the zipper\n API."));
        const__128 = Symbol.intern(null, "AsZipper");
        const__129 = RT.var("ginga.zip", "from-vector");
        const__136 = (AFn)((Object)RT.map(RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), 78, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/zip.cljc"));
        const__137 = RT.var("ginga.zip", "from-seqable");
        const__138 = (AFn)((Object)RT.map(RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), 78, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/zip.cljc"));
        const__139 = RT.var("ginga.zip", "down-impl");
        const__143 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "node")))), RT.keyword(null, "line"), 80, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/zip.cljc"));
        const__144 = RT.var("ginga.zip", "advance-subseqs");
        const__147 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "subseqs"), Symbol.intern(null, "v"), Symbol.intern(null, "prev-i"), Symbol.intern(null, "i")))), RT.keyword(null, "line"), 242, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/zip.cljc"));
        const__148 = RT.var("ginga.zip", "finalize-subseqs");
        const__151 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "subseqs"), Symbol.intern(null, "v"), Symbol.intern(null, "prev-i"), Symbol.intern(null, "i")))), RT.keyword(null, "line"), 246, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/zip.cljc"));
        const__154 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "v"), Symbol.intern(null, "parent")))), RT.keyword(null, "line"), 345, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/zip.cljc"));
        const__157 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "coll"), Symbol.intern(null, "parent")))), RT.keyword(null, "line"), 348, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/zip.cljc"));
        const__158 = RT.var("ginga.zip", "zipper");
        const__161 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "root")))), RT.keyword(null, "line"), 351, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/zip.cljc"));
        const__162 = RT.var("ginga.zip", "traverser");
        const__165 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "root")))), RT.keyword(null, "line"), 354, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/zip.cljc"));
        const__166 = RT.var("ginga.zip", "parent-node");
        const__169 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "The same as (-> z (up) (node))", RT.keyword(null, "line"), 359, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/zip.cljc"));
        const__170 = RT.var("ginga.zip", "next-node");
        const__173 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "The same as (-> z (next) (node))", RT.keyword(null, "line"), 364, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/zip.cljc"));
        const__174 = RT.var("ginga.zip", "down-end");
        const__177 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "The same as (-> z (down) (end))", RT.keyword(null, "line"), 369, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/zip.cljc"));
        const__178 = RT.var("ginga.zip", "insert-down");
        const__181 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "node")))), RT.keyword(null, "doc"), "The same as (-> z (insert node) (down))", RT.keyword(null, "line"), 374, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/zip.cljc"));
        const__182 = RT.var("ginga.zip", "prev-replace-next");
        const__185 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "node")))), RT.keyword(null, "doc"), "The same as (-> z (prev) (replace node) (next))", RT.keyword(null, "line"), 379, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/zip.cljc"));
        const__186 = RT.var("ginga.zip", "replace-down");
        const__189 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "node")))), RT.keyword(null, "doc"), "The same as (-> z (replace node) (down))", RT.keyword(null, "line"), 384, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/zip.cljc"));
        const__190 = RT.var("ginga.zip", "edit");
        const__193 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "f")), Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")))), RT.keyword(null, "doc"), "Call a function with the current node and replace it.", RT.keyword(null, "line"), 391, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/zip.cljc"));
        const__194 = RT.var("ginga.zip", "append-to-parent*");
        const__197 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "nodes")))), RT.keyword(null, "doc"), "Insert many nodes at the end (append to current parent).", RT.keyword(null, "line"), 398, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/zip.cljc"));
        const__198 = RT.var("ginga.zip", "frames");
    }

    public static void __init2() {
        const__201 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Get the individual frames of the zipper {:keys [up nexts prevs]} as a\n  list ordered from deepest to top frame.", RT.keyword(null, "line"), 404, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/zip.cljc"));
        const__202 = RT.var("ginga.zip", "ancestor-nodes");
        const__205 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Returns all ancestor nodes of the current location.", RT.keyword(null, "line"), 410, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/zip.cljc"));
        const__206 = RT.var("ginga.zip", "shift-next-nodes-up");
        const__209 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Remove all `nexts`, traverse `up-next`, and insert the removed\n  `nexts`.", RT.keyword(null, "line"), 415, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/zip.cljc"));
        const__210 = RT.var("ginga.zip", "shift-next-nodes-down");
        const__213 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Remove all `nexts` and descend into `prev-node` with the removed\n  `nexts` appended.", RT.keyword(null, "line"), 425, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/zip.cljc"));
        const__214 = RT.var("ginga.zip", "split");
        const__217 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Splits the parent node in two, the prev-node receiving the prev-nodes, the\n  next-node the next-nodes, and returns the location between them.", RT.keyword(null, "line"), 436, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/zip.cljc"));
        const__218 = RT.var("ginga.zip", "unwrap-children-next");
        const__221 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Remove the current node and insert all children of the current node\n  before the current location.", RT.keyword(null, "line"), 448, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/zip.cljc"));
        const__222 = RT.var("ginga.zip", "unwrap-children-prev");
        const__225 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Like unwrap-children-prev, but inserts the children after the current\n  location.", RT.keyword(null, "line"), 456, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/zip.cljc"));
        const__226 = RT.var("ginga.zip", "unwrap");
        const__229 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Removes the current parent, putting its children in its place,\n  mainting the current location.", RT.keyword(null, "line"), 464, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/zip.cljc"));
        const__230 = RT.var("ginga.zip", "path");
        const__233 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Return a path from the top to the current location.", RT.keyword(null, "line"), 475, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/zip.cljc"));
        const__234 = RT.var("ginga.zip", "descend-path");
        const__237 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "path")))), RT.keyword(null, "doc"), "Walk down the given path.", RT.keyword(null, "line"), 480, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/zip.cljc"));
        const__238 = RT.var("ginga.zip", "top");
        const__241 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Walk to the topmost branch, or does nothing if already at the top.", RT.keyword(null, "line"), 488, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/zip.cljc"));
        const__242 = RT.var("ginga.zip", "walk");
        const__245 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "before"), Symbol.intern(null, "end"), Symbol.intern(null, "z")), Tuple.create(Symbol.intern(null, "stop?"), Symbol.intern(null, "before"), Symbol.intern(null, "end"), Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Walks the zipper recursively, applying `before` when before a node\n  and `end` when at the end of a branch. Stops when at the top of the\n  tree.\n\n  The following will just walk the entire tree without doing anything:\n  (walk down up-next z)\n\n  The optional stop? predicate will be applied to the zipper before\n  either before or end are called, and if true, will stop the walk\n  immediately.", RT.keyword(null, "line"), 493, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/zip.cljc"));
        const__246 = RT.var("ginga.zip", "contextual-walk");
        const__249 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "before"), Symbol.intern(null, "end"), Symbol.intern(null, "init"), Symbol.intern(null, "z")), Tuple.create(Symbol.intern(null, "stop?"), Symbol.intern(null, "before"), Symbol.intern(null, "end"), Symbol.intern(null, "init"), Symbol.intern(null, "z")))), RT.keyword(null, "doc"), "Like walk, but with a context that is given-to/returned-by both\n  before and end as the first argument.", RT.keyword(null, "line"), 516, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "ginga/zip.cljc"));
    }

    static {
        zip__init.__init0();
        zip__init.__init1();
        zip__init.__init2();
        Compiler.pushNSandLoader(RT.classForName("ginga.zip__init").getClassLoader());
        try {
            zip__init.load();
        }
        catch (Throwable throwable2) {
            Var.popThreadBindings();
            throw throwable2;
        }
        Var.popThreadBindings();
    }
}

