/*
 * Decompiled with CFR 0.152.
 */
package potemkin;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import potemkin.collections$compile_if;
import potemkin.collections$def_derived_map;
import potemkin.collections$def_map_type;
import potemkin.collections$fn__26355;
import potemkin.collections$fn__26371;
import potemkin.collections$fn__26374;
import potemkin.collections$fn__26387;
import potemkin.collections$fn__26400;
import potemkin.collections$fn__26411;
import potemkin.collections$fn__26426;
import potemkin.collections$fn__26437;
import potemkin.collections$fn__26448;
import potemkin.collections$fn__26467;
import potemkin.collections$fn__26470;
import potemkin.collections$fn__26483;
import potemkin.collections$fn__26504;
import potemkin.collections$fn__26506;
import potemkin.collections$loading__6789__auto____26218;
import potemkin.collections$reify_map_type;
import potemkin.collections$throw_arity;

public class collections__init {
    public static final Var const__0;
    public static final AFn const__1;
    public static final AFn const__2;
    public static final Object const__3;
    public static final Var const__4;
    public static final Var const__5;
    public static final Var const__6;
    public static final Keyword const__7;
    public static final Var const__8;
    public static final ISeq const__9;
    public static final Var const__10;
    public static final Var const__11;
    public static final AFn const__15;
    public static final Keyword const__16;
    public static final AFn const__17;
    public static final Keyword const__18;
    public static final Keyword const__19;
    public static final AFn const__27;
    public static final Keyword const__28;
    public static final Var const__29;
    public static final Var const__30;
    public static final Var const__31;
    public static final AFn const__32;
    public static final AFn const__33;
    public static final Keyword const__34;
    public static final AFn const__35;
    public static final AFn const__36;
    public static final AFn const__37;
    public static final AFn const__38;
    public static final AFn const__39;
    public static final AFn const__40;
    public static final AFn const__41;
    public static final AFn const__42;
    public static final AFn const__43;
    public static final AFn const__44;
    public static final AFn const__45;
    public static final AFn const__46;
    public static final Var const__47;
    public static final AFn const__48;
    public static final Object const__49;
    public static final Var const__50;
    public static final ISeq const__51;
    public static final AFn const__53;
    public static final AFn const__54;
    public static final AFn const__57;
    public static final AFn const__58;
    public static final AFn const__59;
    public static final AFn const__60;
    public static final AFn const__61;
    public static final AFn const__62;
    public static final Var const__63;
    public static final AFn const__71;
    public static final Var const__72;
    public static final AFn const__75;
    public static final Var const__76;
    public static final Var const__77;
    public static final Var const__78;
    public static final Var const__79;
    public static final Var const__80;
    public static final AFn const__81;
    public static final AFn const__82;
    public static final AFn const__83;
    public static final AFn const__84;
    public static final Var const__85;
    public static final Var const__86;
    public static final AFn const__87;
    public static final AFn const__88;
    public static final AFn const__89;
    public static final AFn const__91;
    public static final AFn const__92;
    public static final AFn const__93;
    public static final AFn const__94;
    public static final AFn const__95;
    public static final AFn const__96;
    public static final AFn const__97;
    public static final Var const__98;
    public static final Var const__99;
    public static final Object const__100;
    public static final Object const__101;
    public static final AFn const__102;
    public static final AFn const__103;
    public static final AFn const__104;
    public static final AFn const__105;
    public static final AFn const__106;
    public static final AFn const__107;
    public static final Var const__108;
    public static final Var const__114;
    public static final AFn const__116;
    public static final Object const__117;
    public static final Var const__118;
    public static final AFn const__121;
    public static final Var const__122;
    public static final AFn const__125;
    public static final Var const__126;
    public static final AFn const__129;

    public static void load() {
        Object v2;
        Object object = ((IFn)const__0.getRawRoot()).invoke(const__1);
        Object object2 = ((IFn)new collections$loading__6789__auto____26218()).invoke();
        if (((Symbol)const__1).equals(const__2)) {
            v2 = null;
        } else {
            LockingTransaction.runInTransaction(new collections$fn__26355());
            v2 = null;
        }
        Object object3 = ((IFn)new collections$fn__26371()).invoke();
        Object object4 = const__3;
        Object object5 = ((IFn)const__4.getRawRoot()).invoke(const__5, const__6.getRawRoot(), const__7, null);
        Object object6 = ((IFn)const__8).invoke(const__5, const__9);
        Object object7 = ((IFn)const__10.getRawRoot()).invoke(const__5, const__11.getRawRoot(), ((IFn)const__6.getRawRoot()).invoke(const__15, const__16, const__17, const__18, const__5, const__19, const__27, const__28, RT.map(((IFn)const__29.getRawRoot()).invoke(const__30.get(), ((IFn)const__31.getRawRoot()).invoke(const__32, ((IFn)const__11.getRawRoot()).invoke(const__33, RT.mapUniqueKeys(const__34, const__5)))), new collections$fn__26374(), ((IFn)const__29.getRawRoot()).invoke(const__30.get(), ((IFn)const__31.getRawRoot()).invoke(const__35, ((IFn)const__11.getRawRoot()).invoke(const__36, RT.mapUniqueKeys(const__34, const__5)))), new collections$fn__26387(), ((IFn)const__29.getRawRoot()).invoke(const__30.get(), ((IFn)const__31.getRawRoot()).invoke(const__37, ((IFn)const__11.getRawRoot()).invoke(const__38, RT.mapUniqueKeys(const__34, const__5)))), new collections$fn__26400(), ((IFn)const__29.getRawRoot()).invoke(const__30.get(), ((IFn)const__31.getRawRoot()).invoke(const__39, ((IFn)const__11.getRawRoot()).invoke(const__40, RT.mapUniqueKeys(const__34, const__5)))), new collections$fn__26411(), ((IFn)const__29.getRawRoot()).invoke(const__30.get(), ((IFn)const__31.getRawRoot()).invoke(const__41, ((IFn)const__11.getRawRoot()).invoke(const__42, RT.mapUniqueKeys(const__34, const__5)))), new collections$fn__26426(), ((IFn)const__29.getRawRoot()).invoke(const__30.get(), ((IFn)const__31.getRawRoot()).invoke(const__43, ((IFn)const__11.getRawRoot()).invoke(const__44, RT.mapUniqueKeys(const__34, const__5)))), new collections$fn__26437(), ((IFn)const__29.getRawRoot()).invoke(const__30.get(), ((IFn)const__31.getRawRoot()).invoke(const__45, ((IFn)const__11.getRawRoot()).invoke(const__46, RT.mapUniqueKeys(const__34, const__5)))), new collections$fn__26448())));
        Object object8 = ((IFn)const__47.getRawRoot()).invoke(const__5.getRawRoot());
        AFn aFn = const__48;
        Object object9 = ((IFn)new collections$fn__26467()).invoke();
        Object object10 = const__49;
        Object object11 = ((IFn)const__4.getRawRoot()).invoke(const__50, const__6.getRawRoot(), const__7, null);
        Object object12 = ((IFn)const__8).invoke(const__50, const__51);
        Object object13 = ((IFn)const__10.getRawRoot()).invoke(const__50, const__11.getRawRoot(), ((IFn)const__6.getRawRoot()).invoke(const__53, const__16, const__54, const__18, const__50, const__19, const__57, const__28, RT.map(((IFn)const__29.getRawRoot()).invoke(const__30.get(), ((IFn)const__31.getRawRoot()).invoke(const__58, ((IFn)const__11.getRawRoot()).invoke(const__59, RT.mapUniqueKeys(const__34, const__50)))), new collections$fn__26470(), ((IFn)const__29.getRawRoot()).invoke(const__30.get(), ((IFn)const__31.getRawRoot()).invoke(const__60, ((IFn)const__11.getRawRoot()).invoke(const__61, RT.mapUniqueKeys(const__34, const__50)))), new collections$fn__26483())));
        Object object14 = ((IFn)const__47.getRawRoot()).invoke(const__50.getRawRoot());
        AFn aFn2 = const__62;
        Var var = const__63;
        var.setMeta((IPersistentMap)((Object)const__71));
        Var var2 = var;
        var.bindRoot(new collections$throw_arity());
        Var var3 = const__72;
        var3.setMeta((IPersistentMap)((Object)const__75));
        Var var4 = var3;
        var3.bindRoot(new collections$compile_if());
        const__72.setMacro();
        Object v21 = null;
        Var var5 = const__72;
        Object object15 = ((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(((IFn)const__79.getRawRoot()).invoke(((IFn)const__80.getRawRoot()).invoke(const__81), ((IFn)const__80.getRawRoot()).invoke(const__82), ((IFn)const__80.getRawRoot()).invoke(const__83), ((IFn)const__80.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(((IFn)const__79.getRawRoot()).invoke(((IFn)const__80.getRawRoot()).invoke(const__84), ((IFn)const__80.getRawRoot()).invoke(((IFn)const__85.getRawRoot()).invoke(const__86.getRawRoot(), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__79.getRawRoot()).invoke(((IFn)const__80.getRawRoot()).invoke(const__87))))), ((IFn)const__80.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(((IFn)const__79.getRawRoot()).invoke(((IFn)const__80.getRawRoot()).invoke(const__88), ((IFn)const__80.getRawRoot()).invoke(((IFn)const__31.getRawRoot()).invoke(const__89, const__91)))))))), ((IFn)const__80.getRawRoot()).invoke(const__92), ((IFn)const__80.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(((IFn)const__79.getRawRoot()).invoke(((IFn)const__80.getRawRoot()).invoke(const__93), ((IFn)const__80.getRawRoot()).invoke(((IFn)const__85.getRawRoot()).invoke(const__86.getRawRoot(), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__79.getRawRoot()).invoke(((IFn)const__80.getRawRoot()).invoke(const__87))))), ((IFn)const__80.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(((IFn)const__79.getRawRoot()).invoke(((IFn)const__80.getRawRoot()).invoke(const__94), ((IFn)const__80.getRawRoot()).invoke(((IFn)const__31.getRawRoot()).invoke(const__95, const__96)))))))), ((IFn)const__80.getRawRoot()).invoke(const__97), ((IFn)const__98.getRawRoot()).invoke(new collections$fn__26504(), ((IFn)const__99.getRawRoot()).invoke(const__100, const__101)), ((IFn)const__80.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(((IFn)const__79.getRawRoot()).invoke(((IFn)const__80.getRawRoot()).invoke(const__102), ((IFn)const__80.getRawRoot()).invoke(((IFn)const__85.getRawRoot()).invoke(const__86.getRawRoot(), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__79.getRawRoot()).invoke(((IFn)const__80.getRawRoot()).invoke(const__87), ((IFn)const__80.getRawRoot()).invoke(const__103))))), ((IFn)const__80.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(((IFn)const__79.getRawRoot()).invoke(((IFn)const__80.getRawRoot()).invoke(const__104), ((IFn)const__80.getRawRoot()).invoke(((IFn)const__85.getRawRoot()).invoke(const__86.getRawRoot(), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__79.getRawRoot()).invoke(((IFn)const__80.getRawRoot()).invoke(const__105), ((IFn)const__80.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(((IFn)const__79.getRawRoot()).invoke(((IFn)const__80.getRawRoot()).invoke(const__106), ((IFn)const__80.getRawRoot()).invoke(const__103)))))))), ((IFn)const__80.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(((IFn)const__79.getRawRoot()).invoke(((IFn)const__80.getRawRoot()).invoke(const__107), ((IFn)const__80.getRawRoot()).invoke(const__105), ((IFn)const__108.getRawRoot()).invoke(new collections$fn__26506(), ((IFn)const__99.getRawRoot()).invoke(const__100, const__101)))))))))))))));
        Var var6 = const__114;
        var6.setMeta((IPersistentMap)((Object)const__116));
        Var var7 = var6;
        var6.bindRoot(const__117);
        Var var8 = const__118;
        var8.setMeta((IPersistentMap)((Object)const__121));
        Var var9 = var8;
        var8.bindRoot(new collections$def_map_type());
        const__118.setMacro();
        Object v28 = null;
        Var var10 = const__118;
        Var var11 = const__122;
        var11.setMeta((IPersistentMap)((Object)const__125));
        Var var12 = var11;
        var11.bindRoot(new collections$reify_map_type());
        const__122.setMacro();
        Object v32 = null;
        Var var13 = const__122;
        Var var14 = const__126;
        var14.setMeta((IPersistentMap)((Object)const__129));
        Var var15 = var14;
        var14.bindRoot(new collections$def_derived_map());
        const__126.setMacro();
        Object v36 = null;
        Var var16 = const__126;
    }

    public static void __init0() {
        const__0 = RT.var("clojure.core", "in-ns");
        const__1 = Symbol.intern(null, "potemkin.collections");
        const__2 = Symbol.intern(null, "clojure.core");
        const__3 = RT.classForName("potemkin.collections.PotemkinMap");
        const__4 = RT.var("clojure.core", "alter-meta!");
        const__5 = RT.var("potemkin.collections", "PotemkinMap");
        const__6 = RT.var("clojure.core", "assoc");
        const__7 = RT.keyword(null, "doc");
        const__8 = RT.var("clojure.core", "assert-same-protocol");
        const__9 = (ISeq)((Object)PersistentList.create(Arrays.asList(((IObj)Symbol.intern(null, "empty*")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m")))))), ((IObj)Symbol.intern(null, "get*")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "default")))))), ((IObj)Symbol.intern(null, "assoc*")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "v")))))), ((IObj)Symbol.intern(null, "dissoc*")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k")))))), ((IObj)Symbol.intern(null, "keys*")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m")))))), ((IObj)Symbol.intern(null, "with-meta*")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "o"), Symbol.intern(null, "mta")))))), ((IObj)Symbol.intern(null, "meta*")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "o")))))))));
        const__10 = RT.var("clojure.core", "alter-var-root");
        const__11 = RT.var("clojure.core", "merge");
        const__15 = (AFn)((Object)RT.map(RT.keyword(null, "on"), Symbol.intern(null, "potemkin.collections.PotemkinMap"), RT.keyword(null, "on-interface"), RT.classForName("potemkin.collections.PotemkinMap")));
        const__16 = RT.keyword(null, "sigs");
        const__17 = (AFn)((Object)RT.map(RT.keyword(null, "empty*"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "empty*")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m")))), RT.keyword(null, "doc"), null), RT.keyword(null, "get*"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "get*")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "default")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "default")))), RT.keyword(null, "doc"), null), RT.keyword(null, "assoc*"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "assoc*")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "v")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "v")))), RT.keyword(null, "doc"), null), RT.keyword(null, "dissoc*"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "dissoc*")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k")))), RT.keyword(null, "doc"), null), RT.keyword(null, "keys*"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "keys*")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m")))), RT.keyword(null, "doc"), null), RT.keyword(null, "with-meta*"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "with-meta*")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "o"), Symbol.intern(null, "mta")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "o"), Symbol.intern(null, "mta")))), RT.keyword(null, "doc"), null), RT.keyword(null, "meta*"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "meta*")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "o")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "o")))), RT.keyword(null, "doc"), null)));
        const__18 = RT.keyword(null, "var");
        const__19 = RT.keyword(null, "method-map");
        const__27 = (AFn)((Object)RT.map(RT.keyword(null, "with-meta*"), RT.keyword(null, "with-meta*"), RT.keyword(null, "empty*"), RT.keyword(null, "empty*"), RT.keyword(null, "meta*"), RT.keyword(null, "meta*"), RT.keyword(null, "dissoc*"), RT.keyword(null, "dissoc*"), RT.keyword(null, "assoc*"), RT.keyword(null, "assoc*"), RT.keyword(null, "keys*"), RT.keyword(null, "keys*"), RT.keyword(null, "get*"), RT.keyword(null, "get*")));
        const__28 = RT.keyword(null, "method-builders");
        const__29 = RT.var("clojure.core", "intern");
        const__30 = RT.var("clojure.core", "*ns*");
        const__31 = RT.var("clojure.core", "with-meta");
        const__32 = (AFn)((Object)((IObj)Symbol.intern(null, "with-meta*")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "o"), Symbol.intern(null, "mta")))))));
        const__33 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "with-meta*")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "o"), Symbol.intern(null, "mta")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "o"), Symbol.intern(null, "mta")))), RT.keyword(null, "doc"), null));
        const__34 = RT.keyword(null, "protocol");
        const__35 = (AFn)((Object)((IObj)Symbol.intern(null, "dissoc*")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k")))))));
        const__36 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "dissoc*")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k")))), RT.keyword(null, "doc"), null));
        const__37 = (AFn)((Object)((IObj)Symbol.intern(null, "empty*")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m")))))));
        const__38 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "empty*")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m")))), RT.keyword(null, "doc"), null));
        const__39 = (AFn)((Object)((IObj)Symbol.intern(null, "assoc*")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "v")))))));
        const__40 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "assoc*")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "v")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "v")))), RT.keyword(null, "doc"), null));
        const__41 = (AFn)((Object)((IObj)Symbol.intern(null, "keys*")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m")))))));
        const__42 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "keys*")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m")))), RT.keyword(null, "doc"), null));
        const__43 = (AFn)((Object)((IObj)Symbol.intern(null, "meta*")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "o")))))));
        const__44 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "meta*")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "o")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "o")))), RT.keyword(null, "doc"), null));
        const__45 = (AFn)((Object)((IObj)Symbol.intern(null, "get*")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "default")))))));
        const__46 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "get*")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "default")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "default")))), RT.keyword(null, "doc"), null));
        const__47 = RT.var("clojure.core", "-reset-methods");
        const__48 = Symbol.intern(null, "PotemkinMap");
        const__49 = RT.classForName("potemkin.collections.PotemkinMeta");
        const__50 = RT.var("potemkin.collections", "PotemkinMeta");
        const__51 = (ISeq)((Object)PersistentList.create(Arrays.asList(((IObj)Symbol.intern(null, "meta-atom")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "_")))))), ((IObj)Symbol.intern(null, "with-meta-atom")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "x")))))))));
        const__53 = (AFn)((Object)RT.map(RT.keyword(null, "on"), Symbol.intern(null, "potemkin.collections.PotemkinMeta"), RT.keyword(null, "on-interface"), RT.classForName("potemkin.collections.PotemkinMeta")));
        const__54 = (AFn)((Object)RT.map(RT.keyword(null, "meta-atom"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "meta-atom")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "_")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "_")))), RT.keyword(null, "doc"), null), RT.keyword(null, "with-meta-atom"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "with-meta-atom")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "x")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "x")))), RT.keyword(null, "doc"), null)));
        const__57 = (AFn)((Object)RT.map(RT.keyword(null, "with-meta-atom"), RT.keyword(null, "with-meta-atom"), RT.keyword(null, "meta-atom"), RT.keyword(null, "meta-atom")));
        const__58 = (AFn)((Object)((IObj)Symbol.intern(null, "with-meta-atom")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "x")))))));
        const__59 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "with-meta-atom")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "x")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "x")))), RT.keyword(null, "doc"), null));
        const__60 = (AFn)((Object)((IObj)Symbol.intern(null, "meta-atom")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "_")))))));
        const__61 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "meta-atom")).withMeta(RT.map(RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "_")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "_")))), RT.keyword(null, "doc"), null));
        const__62 = Symbol.intern(null, "PotemkinMeta");
        const__63 = RT.var("potemkin.collections", "throw-arity");
        const__71 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "actual")))), RT.keyword(null, "line"), 18, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "potemkin/collections.clj"));
        const__72 = RT.var("potemkin.collections", "compile-if");
        const__75 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "test"), Symbol.intern(null, "then"), Symbol.intern(null, "else")))), RT.keyword(null, "line"), 23, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "potemkin/collections.clj"));
        const__76 = RT.var("clojure.core", "eval");
        const__77 = RT.var("potemkin.macros", "unify-gensyms");
        const__78 = RT.var("clojure.core", "seq");
        const__79 = RT.var("clojure.core", "concat");
        const__80 = RT.var("clojure.core", "list");
        const__81 = Symbol.intern("potemkin.types", "def-abstract-type");
        const__82 = Symbol.intern("potemkin.collections", "PotemkinFn");
        const__83 = Symbol.intern(null, "java.util.concurrent.Callable");
        const__84 = Symbol.intern("potemkin.collections", "call");
        const__85 = RT.var("clojure.core", "apply");
        const__86 = RT.var("clojure.core", "vector");
        const__87 = Symbol.intern(null, "this#__26501__auto__");
        const__88 = Symbol.intern(null, ".invoke");
        const__89 = Symbol.intern(null, "this#__26496__auto__");
        const__91 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), "clojure.lang.IFn"));
        const__92 = Symbol.intern(null, "java.lang.Runnable");
        const__93 = Symbol.intern("potemkin.collections", "run");
        const__94 = Symbol.intern(null, ".invoke");
        const__95 = Symbol.intern(null, "this#__26497__auto__");
        const__96 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), "clojure.lang.IFn"));
        const__97 = Symbol.intern(null, "clojure.lang.IFn");
        const__98 = RT.var("clojure.core", "map");
        const__99 = RT.var("clojure.core", "range");
    }

    public static void __init1() {
        const__100 = 0L;
        const__101 = 21L;
        const__102 = Symbol.intern("potemkin.collections", "applyTo");
        const__103 = Symbol.intern(null, "args#__26502__auto__");
        const__104 = Symbol.intern("clojure.core", "let");
        const__105 = Symbol.intern(null, "cnt__26503__auto__");
        const__106 = Symbol.intern("clojure.core", "count");
        const__107 = Symbol.intern("clojure.core", "case");
        const__108 = RT.var("clojure.core", "mapcat");
        const__114 = RT.var("potemkin.collections", "AbstractMap");
        const__116 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), RT.keyword("potemkin", "abstract-type"), RT.keyword(null, "line"), 56, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "potemkin/collections.clj"));
        const__117 = PersistentList.create(Arrays.asList(Symbol.intern("clojure.core", "deftype"), Symbol.intern(null, "AbstractMap"), Tuple.create(), Symbol.intern(null, "potemkin.collections.PotemkinMap"), Symbol.intern(null, "clojure.lang.MapEquivalence"), Symbol.intern(null, "clojure.lang.IPersistentCollection"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "equiv"), Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "x")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "and"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "or"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "instance?"), Symbol.intern(null, "java.util.Map"), Symbol.intern(null, "x"))))).withMeta(RT.map(RT.keyword(null, "line"), 65, RT.keyword(null, "column"), 14)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "map?"), Symbol.intern(null, "x"))))).withMeta(RT.map(RT.keyword(null, "line"), 65, RT.keyword(null, "column"), 42)))))).withMeta(RT.map(RT.keyword(null, "line"), 65, RT.keyword(null, "column"), 10)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "="), Symbol.intern(null, "x"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "into"), RT.map(new Object[0]), Symbol.intern(null, "this"))))).withMeta(RT.map(RT.keyword(null, "line"), 66, RT.keyword(null, "column"), 15)))))).withMeta(RT.map(RT.keyword(null, "line"), 66, RT.keyword(null, "column"), 10)))))).withMeta(RT.map(RT.keyword(null, "line"), 65, RT.keyword(null, "column"), 5)))))).withMeta(RT.map(RT.keyword(null, "line"), 64, RT.keyword(null, "column"), 3)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "cons"), Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "o")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "cond"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "map?"), Symbol.intern(null, "o"))))).withMeta(RT.map(RT.keyword(null, "line"), 70, RT.keyword(null, "column"), 7)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "reduce"), PersistentList.create(Arrays.asList(Symbol.intern(null, "fn*"), Tuple.create(Symbol.intern(null, "p1__26512#"), Symbol.intern(null, "p2__26513#")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "apply"), Symbol.intern(null, "assoc"), Symbol.intern(null, "p1__26512#"), Symbol.intern(null, "p2__26513#"))))).withMeta(RT.map(RT.keyword(null, "line"), 71, RT.keyword(null, "column"), 16)))), Symbol.intern(null, "this"), Symbol.intern(null, "o"))))).withMeta(RT.map(RT.keyword(null, "line"), 71, RT.keyword(null, "column"), 7)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "instance?"), Symbol.intern(null, "java.util.Map"), Symbol.intern(null, "o"))))).withMeta(RT.map(RT.keyword(null, "line"), 73, RT.keyword(null, "column"), 7)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "reduce"), PersistentList.create(Arrays.asList(Symbol.intern(null, "fn*"), Tuple.create(Symbol.intern(null, "p1__26514#"), Symbol.intern(null, "p2__26515#")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "apply"), Symbol.intern(null, "assoc"), Symbol.intern(null, "p1__26514#"), Symbol.intern(null, "p2__26515#"))))).withMeta(RT.map(RT.keyword(null, "line"), 74, RT.keyword(null, "column"), 16)))), Symbol.intern(null, "this"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "into"), RT.map(new Object[0]), Symbol.intern(null, "o"))))).withMeta(RT.map(RT.keyword(null, "line"), 74, RT.keyword(null, "column"), 41)))))).withMeta(RT.map(RT.keyword(null, "line"), 74, RT.keyword(null, "column"), 7)), RT.keyword(null, "else"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "if-let"), Tuple.create(Tuple.create(Symbol.intern(null, "k"), Symbol.intern(null, "v")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "seq"), Symbol.intern(null, "o"))))).withMeta(RT.map(RT.keyword(null, "line"), 77, RT.keyword(null, "column"), 22))), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "assoc"), Symbol.intern(null, "this"), Symbol.intern(null, "k"), Symbol.intern(null, "v"))))).withMeta(RT.map(RT.keyword(null, "line"), 78, RT.keyword(null, "column"), 9)), Symbol.intern(null, "this"))))).withMeta(RT.map(RT.keyword(null, "line"), 77, RT.keyword(null, "column"), 7)))))).withMeta(RT.map(RT.keyword(null, "line"), 69, RT.keyword(null, "column"), 5)))))).withMeta(RT.map(RT.keyword(null, "line"), 68, RT.keyword(null, "column"), 3)), Symbol.intern(null, "clojure.lang.IObj"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "withMeta"), Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "mta")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern("potemkin.collections", "with-meta*"), Symbol.intern(null, "this"), Symbol.intern(null, "mta"))))).withMeta(RT.map(RT.keyword(null, "line"), 83, RT.keyword(null, "column"), 5)))))).withMeta(RT.map(RT.keyword(null, "line"), 82, RT.keyword(null, "column"), 3)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "meta"), Tuple.create(Symbol.intern(null, "this")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern("potemkin.collections", "meta*"), Symbol.intern(null, "this"))))).withMeta(RT.map(RT.keyword(null, "line"), 85, RT.keyword(null, "column"), 5)))))).withMeta(RT.map(RT.keyword(null, "line"), 84, RT.keyword(null, "column"), 3)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "meta*"), Tuple.create(Symbol.intern(null, "this")), null)))).withMeta(RT.map(RT.keyword(null, "line"), 86, RT.keyword(null, "column"), 3)), Symbol.intern(null, "clojure.lang.Counted"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "count"), Tuple.create(Symbol.intern(null, "this")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "count"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern("potemkin.collections", "keys*"), Symbol.intern(null, "this"))))).withMeta(RT.map(RT.keyword(null, "line"), 92, RT.keyword(null, "column"), 12)))))).withMeta(RT.map(RT.keyword(null, "line"), 92, RT.keyword(null, "column"), 5)))))).withMeta(RT.map(RT.keyword(null, "line"), 91, RT.keyword(null, "column"), 3)), Symbol.intern(null, "clojure.lang.Seqable"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "seq"), Tuple.create(Symbol.intern(null, "this")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "seq"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "map"), PersistentList.create(Arrays.asList(Symbol.intern(null, "fn*"), Tuple.create(Symbol.intern(null, "p1__26516#")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "potemkin.PersistentMapProxy$MapEntry."), Symbol.intern(null, "this"), Symbol.intern(null, "p1__26516#"))))).withMeta(RT.map(RT.keyword(null, "line"), 98, RT.keyword(null, "column"), 10)))), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern("potemkin.collections", "keys*"), Symbol.intern(null, "this"))))).withMeta(RT.map(RT.keyword(null, "line"), 99, RT.keyword(null, "column"), 9)))))).withMeta(RT.map(RT.keyword(null, "line"), 97, RT.keyword(null, "column"), 7)))))).withMeta(RT.map(RT.keyword(null, "line"), 96, RT.keyword(null, "column"), 5)))))).withMeta(RT.map(RT.keyword(null, "line"), 95, RT.keyword(null, "column"), 3)), ((IObj)Symbol.intern(null, "clojure.core.protocols.CollReduce")).withMeta(RT.map(RT.keyword(null, "min-version"), "1.4.0")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "coll-reduce"), Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "f")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "reduce"), Symbol.intern(null, "f"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "seq"), Symbol.intern(null, "this"))))).withMeta(RT.map(RT.keyword(null, "line"), 107, RT.keyword(null, "column"), 15)))))).withMeta(RT.map(RT.keyword(null, "line"), 107, RT.keyword(null, "column"), 5)))))).withMeta(RT.map(RT.keyword(null, "line"), 104, RT.keyword(null, "column"), 3, RT.keyword(null, "min-version"), "1.4.0")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "coll-reduce"), Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "f"), Symbol.intern(null, "val#")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "reduce"), Symbol.intern(null, "f"), Symbol.intern(null, "val#"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "seq"), Symbol.intern(null, "this"))))).withMeta(RT.map(RT.keyword(null, "line"), 112, RT.keyword(null, "column"), 20)))))).withMeta(RT.map(RT.keyword(null, "line"), 112, RT.keyword(null, "column"), 5)))))).withMeta(RT.map(RT.keyword(null, "line"), 109, RT.keyword(null, "column"), 3, RT.keyword(null, "min-version"), "1.4.0")), Symbol.intern(null, "clojure.lang.IHashEq"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "hasheq"), Tuple.create(Symbol.intern(null, "this")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern("potemkin.collections", "compile-if"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "resolve"), PersistentList.create(Arrays.asList(Symbol.intern(null, "quote"), Symbol.intern("clojure.core", "hash-unordered-coll"))))))).withMeta(RT.map(RT.keyword(null, "line"), 116, RT.keyword(null, "column"), 38)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "hash-unordered-coll"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "or"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "seq"), Symbol.intern(null, "this"))))).withMeta(RT.map(RT.keyword(null, "line"), 117, RT.keyword(null, "column"), 32)), PersistentList.create(Arrays.asList(new Object[0])))))).withMeta(RT.map(RT.keyword(null, "line"), 117, RT.keyword(null, "column"), 28)))))).withMeta(RT.map(RT.keyword(null, "line"), 117, RT.keyword(null, "column"), 7)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "reduce"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "fn"), Tuple.create(Symbol.intern(null, "acc"), Tuple.create(Symbol.intern(null, "k"), Symbol.intern(null, "v"))), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "unchecked-add"), Symbol.intern(null, "acc"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "bit-xor"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "hash"), Symbol.intern(null, "k"))))).withMeta(RT.map(RT.keyword(null, "line"), 120, RT.keyword(null, "column"), 39)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "hash"), Symbol.intern(null, "v"))))).withMeta(RT.map(RT.keyword(null, "line"), 120, RT.keyword(null, "column"), 48)))))).withMeta(RT.map(RT.keyword(null, "line"), 120, RT.keyword(null, "column"), 30)))))).withMeta(RT.map(RT.keyword(null, "line"), 120, RT.keyword(null, "column"), 11)))))).withMeta(RT.map(RT.keyword(null, "line"), 119, RT.keyword(null, "column"), 9)), 0L, ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "seq"), Symbol.intern(null, "this"))))).withMeta(RT.map(RT.keyword(null, "line"), 122, RT.keyword(null, "column"), 9)))))).withMeta(RT.map(RT.keyword(null, "line"), 118, RT.keyword(null, "column"), 7)))))).withMeta(RT.map(RT.keyword(null, "line"), 116, RT.keyword(null, "column"), 5)))))).withMeta(RT.map(RT.keyword(null, "line"), 115, RT.keyword(null, "column"), 3)), Symbol.intern(null, "Object"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "hashCode"), Tuple.create(Symbol.intern(null, "this")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "reduce"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "fn"), Tuple.create(Symbol.intern(null, "acc"), Tuple.create(Symbol.intern(null, "k"), Symbol.intern(null, "v"))), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "unchecked-add"), Symbol.intern(null, "acc"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "bit-xor"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern("clojure.lang.Util", "hash"), Symbol.intern(null, "k"))))).withMeta(RT.map(RT.keyword(null, "line"), 128, RT.keyword(null, "column"), 37)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern("clojure.lang.Util", "hash"), Symbol.intern(null, "v"))))).withMeta(RT.map(RT.keyword(null, "line"), 129, RT.keyword(null, "column"), 37)))))).withMeta(RT.map(RT.keyword(null, "line"), 128, RT.keyword(null, "column"), 28)))))).withMeta(RT.map(RT.keyword(null, "line"), 128, RT.keyword(null, "column"), 9)))))).withMeta(RT.map(RT.keyword(null, "line"), 127, RT.keyword(null, "column"), 7)), 0L, ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "seq"), Symbol.intern(null, "this"))))).withMeta(RT.map(RT.keyword(null, "line"), 131, RT.keyword(null, "column"), 7)))))).withMeta(RT.map(RT.keyword(null, "line"), 126, RT.keyword(null, "column"), 5)))))).withMeta(RT.map(RT.keyword(null, "line"), 125, RT.keyword(null, "column"), 3)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "equals"), Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "x")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "or"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "identical?"), Symbol.intern(null, "this"), Symbol.intern(null, "x"))))).withMeta(RT.map(RT.keyword(null, "line"), 134, RT.keyword(null, "column"), 9)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "and"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "or"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "instance?"), Symbol.intern(null, "java.util.Map"), Symbol.intern(null, "x"))))).withMeta(RT.map(RT.keyword(null, "line"), 136, RT.keyword(null, "column"), 13)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "map?"), Symbol.intern(null, "x"))))).withMeta(RT.map(RT.keyword(null, "line"), 136, RT.keyword(null, "column"), 41)))))).withMeta(RT.map(RT.keyword(null, "line"), 136, RT.keyword(null, "column"), 9)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "="), Symbol.intern(null, "x"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "into"), RT.map(new Object[0]), Symbol.intern(null, "this"))))).withMeta(RT.map(RT.keyword(null, "line"), 137, RT.keyword(null, "column"), 14)))))).withMeta(RT.map(RT.keyword(null, "line"), 137, RT.keyword(null, "column"), 9)))))).withMeta(RT.map(RT.keyword(null, "line"), 135, RT.keyword(null, "column"), 7)))))).withMeta(RT.map(RT.keyword(null, "line"), 134, RT.keyword(null, "column"), 5)))))).withMeta(RT.map(RT.keyword(null, "line"), 133, RT.keyword(null, "column"), 3)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "toString"), Tuple.create(Symbol.intern(null, "this")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "str"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "into"), RT.map(new Object[0]), Symbol.intern(null, "this"))))).withMeta(RT.map(RT.keyword(null, "line"), 140, RT.keyword(null, "column"), 10)))))).withMeta(RT.map(RT.keyword(null, "line"), 140, RT.keyword(null, "column"), 5)))))).withMeta(RT.map(RT.keyword(null, "line"), 139, RT.keyword(null, "column"), 3)), Symbol.intern(null, "clojure.lang.ILookup"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "valAt"), Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "k")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, ".valAt"), Symbol.intern(null, "this"), Symbol.intern(null, "k"), null)))).withMeta(RT.map(RT.keyword(null, "line"), 144, RT.keyword(null, "column"), 5)))))).withMeta(RT.map(RT.keyword(null, "line"), 143, RT.keyword(null, "column"), 3)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "valAt"), Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "k"), Symbol.intern(null, "default")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern("potemkin.collections", "get*"), Symbol.intern(null, "this"), Symbol.intern(null, "k"), Symbol.intern(null, "default"))))).withMeta(RT.map(RT.keyword(null, "line"), 146, RT.keyword(null, "column"), 5)))))).withMeta(RT.map(RT.keyword(null, "line"), 145, RT.keyword(null, "column"), 3)), Symbol.intern(null, "clojure.lang.Associative"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "containsKey"), Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "k")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "contains?"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, ".keySet"), Symbol.intern(null, "this"))))).withMeta(RT.map(RT.keyword(null, "line"), 150, RT.keyword(null, "column"), 16)), Symbol.intern(null, "k"))))).withMeta(RT.map(RT.keyword(null, "line"), 150, RT.keyword(null, "column"), 5)))))).withMeta(RT.map(RT.keyword(null, "line"), 149, RT.keyword(null, "column"), 3)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "entryAt"), Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "k")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "when"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "contains?"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, ".keySet"), Symbol.intern(null, "this"))))).withMeta(RT.map(RT.keyword(null, "line"), 153, RT.keyword(null, "column"), 22)), Symbol.intern(null, "k"))))).withMeta(RT.map(RT.keyword(null, "line"), 153, RT.keyword(null, "column"), 11)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "potemkin.PersistentMapProxy$MapEntry."), Symbol.intern(null, "this"), Symbol.intern(null, "k"))))).withMeta(RT.map(RT.keyword(null, "line"), 154, RT.keyword(null, "column"), 7)))))).withMeta(RT.map(RT.keyword(null, "line"), 153, RT.keyword(null, "column"), 5)))))).withMeta(RT.map(RT.keyword(null, "line"), 152, RT.keyword(null, "column"), 3)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "assoc"), Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "k"), Symbol.intern(null, "v")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern("potemkin.collections", "assoc*"), Symbol.intern(null, "this"), Symbol.intern(null, "k"), Symbol.intern(null, "v"))))).withMeta(RT.map(RT.keyword(null, "line"), 157, RT.keyword(null, "column"), 5)))))).withMeta(RT.map(RT.keyword(null, "line"), 156, RT.keyword(null, "column"), 3)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "empty*"), Tuple.create(Symbol.intern(null, "this")), RT.map(new Object[0]))))).withMeta(RT.map(RT.keyword(null, "line"), 159, RT.keyword(null, "column"), 3)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "empty"), Tuple.create(Symbol.intern(null, "this")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern("potemkin.collections", "empty*"), Symbol.intern(null, "this"))))).withMeta(RT.map(RT.keyword(null, "line"), 163, RT.keyword(null, "column"), 5)))))).withMeta(RT.map(RT.keyword(null, "line"), 162, RT.keyword(null, "column"), 3)), Symbol.intern(null, "java.util.Map"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "get"), Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "k")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, ".valAt"), Symbol.intern(null, "this"), Symbol.intern(null, "k"))))).withMeta(RT.map(RT.keyword(null, "line"), 167, RT.keyword(null, "column"), 5)))))).withMeta(RT.map(RT.keyword(null, "line"), 166, RT.keyword(null, "column"), 3)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "isEmpty"), Tuple.create(Symbol.intern(null, "this")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "empty?"), Symbol.intern(null, "this"))))).withMeta(RT.map(RT.keyword(null, "line"), 169, RT.keyword(null, "column"), 5)))))).withMeta(RT.map(RT.keyword(null, "line"), 168, RT.keyword(null, "column"), 3)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "size"), Tuple.create(Symbol.intern(null, "this")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "count"), Symbol.intern(null, "this"))))).withMeta(RT.map(RT.keyword(null, "line"), 171, RT.keyword(null, "column"), 5)))))).withMeta(RT.map(RT.keyword(null, "line"), 170, RT.keyword(null, "column"), 3)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "keySet"), Tuple.create(Symbol.intern(null, "this")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "set"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern("potemkin.collections", "keys*"), Symbol.intern(null, "this"))))).withMeta(RT.map(RT.keyword(null, "line"), 173, RT.keyword(null, "column"), 10)))))).withMeta(RT.map(RT.keyword(null, "line"), 173, RT.keyword(null, "column"), 5)))))).withMeta(RT.map(RT.keyword(null, "line"), 172, RT.keyword(null, "column"), 3)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "put"), Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "_"), Symbol.intern(null, "_")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "throw"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "UnsupportedOperationException."))))).withMeta(RT.map(RT.keyword(null, "line"), 175, RT.keyword(null, "column"), 12)))))).withMeta(RT.map(RT.keyword(null, "line"), 175, RT.keyword(null, "column"), 5)))))).withMeta(RT.map(RT.keyword(null, "line"), 174, RT.keyword(null, "column"), 3)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "putAll"), Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "_")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "throw"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "UnsupportedOperationException."))))).withMeta(RT.map(RT.keyword(null, "line"), 177, RT.keyword(null, "column"), 12)))))).withMeta(RT.map(RT.keyword(null, "line"), 177, RT.keyword(null, "column"), 5)))))).withMeta(RT.map(RT.keyword(null, "line"), 176, RT.keyword(null, "column"), 3)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "clear"), Tuple.create(Symbol.intern(null, "_")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "throw"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "UnsupportedOperationException."))))).withMeta(RT.map(RT.keyword(null, "line"), 179, RT.keyword(null, "column"), 12)))))).withMeta(RT.map(RT.keyword(null, "line"), 179, RT.keyword(null, "column"), 5)))))).withMeta(RT.map(RT.keyword(null, "line"), 178, RT.keyword(null, "column"), 3)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "remove"), Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "_")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "throw"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "UnsupportedOperationException."))))).withMeta(RT.map(RT.keyword(null, "line"), 181, RT.keyword(null, "column"), 12)))))).withMeta(RT.map(RT.keyword(null, "line"), 181, RT.keyword(null, "column"), 5)))))).withMeta(RT.map(RT.keyword(null, "line"), 180, RT.keyword(null, "column"), 3)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "values"), Tuple.create(Symbol.intern(null, "this")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "->>"), Symbol.intern(null, "this"), Symbol.intern(null, "seq"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "map"), Symbol.intern(null, "second"))))).withMeta(RT.map(RT.keyword(null, "line"), 183, RT.keyword(null, "column"), 19)))))).withMeta(RT.map(RT.keyword(null, "line"), 183, RT.keyword(null, "column"), 5)))))).withMeta(RT.map(RT.keyword(null, "line"), 182, RT.keyword(null, "column"), 3)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "entrySet"), Tuple.create(Symbol.intern(null, "this")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "->>"), Symbol.intern(null, "this"), Symbol.intern(null, "seq"), Symbol.intern(null, "set"))))).withMeta(RT.map(RT.keyword(null, "line"), 185, RT.keyword(null, "column"), 5)))))).withMeta(RT.map(RT.keyword(null, "line"), 184, RT.keyword(null, "column"), 3)), Symbol.intern(null, "java.util.Iterator"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "iterator"), Tuple.create(Symbol.intern(null, "this")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "clojure.lang.SeqIterator."), Symbol.intern(null, "this"))))).withMeta(RT.map(RT.keyword(null, "line"), 189, RT.keyword(null, "column"), 5)))))).withMeta(RT.map(RT.keyword(null, "line"), 188, RT.keyword(null, "column"), 3)), Symbol.intern(null, "clojure.lang.IPersistentMap"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "assocEx"), Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "k"), Symbol.intern(null, "v")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "if"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "contains?"), Symbol.intern(null, "this"), Symbol.intern(null, "k"))))).withMeta(RT.map(RT.keyword(null, "line"), 193, RT.keyword(null, "column"), 9)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "throw"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "Exception."), "Key or value already present")))).withMeta(RT.map(RT.keyword(null, "line"), 194, RT.keyword(null, "column"), 14)))))).withMeta(RT.map(RT.keyword(null, "line"), 194, RT.keyword(null, "column"), 7)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "assoc"), Symbol.intern(null, "this"), Symbol.intern(null, "k"), Symbol.intern(null, "v"))))).withMeta(RT.map(RT.keyword(null, "line"), 195, RT.keyword(null, "column"), 7)))))).withMeta(RT.map(RT.keyword(null, "line"), 193, RT.keyword(null, "column"), 5)))))).withMeta(RT.map(RT.keyword(null, "line"), 192, RT.keyword(null, "column"), 3)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "without"), Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "k")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern("potemkin.collections", "dissoc*"), Symbol.intern(null, "this"), Symbol.intern(null, "k"))))).withMeta(RT.map(RT.keyword(null, "line"), 197, RT.keyword(null, "column"), 5)))))).withMeta(RT.map(RT.keyword(null, "line"), 196, RT.keyword(null, "column"), 3)), Symbol.intern("potemkin.collections", "PotemkinFn"), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "invoke"), Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "k")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern("potemkin.collections", "get*"), Symbol.intern(null, "this"), Symbol.intern(null, "k"), null)))).withMeta(RT.map(RT.keyword(null, "line"), 202, RT.keyword(null, "column"), 5)))))).withMeta(RT.map(RT.keyword(null, "line"), 201, RT.keyword(null, "column"), 3)), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern(null, "invoke"), Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "k"), Symbol.intern(null, "default")), ((IObj)((Object)PersistentList.create(Arrays.asList(Symbol.intern("potemkin.collections", "get*"), Symbol.intern(null, "this"), Symbol.intern(null, "k"), Symbol.intern(null, "default"))))).withMeta(RT.map(RT.keyword(null, "line"), 204, RT.keyword(null, "column"), 5)))))).withMeta(RT.map(RT.keyword(null, "line"), 203, RT.keyword(null, "column"), 3))));
        const__118 = RT.var("potemkin.collections", "def-map-type");
        const__121 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "params"), Symbol.intern(null, "&"), Symbol.intern(null, "body")))), RT.keyword(null, "doc"), "Like deftype, but must contain definitions for the following functions:\n\n   (get [this key default-value])\n   (assoc [this key value])\n   (dissoc [this key])\n   (keys [this])\n   (meta [this])\n   (with-meta [this meta])\n\n   All other necessary functions will be defined so that this behaves like a normal\n   Clojure map.  These can be overridden, if desired.", RT.keyword(null, "line"), 206, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "potemkin/collections.clj"));
        const__122 = RT.var("potemkin.collections", "reify-map-type");
        const__125 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "body")))), RT.keyword(null, "doc"), "Like reify, but must contain definitions for the following functions:\n\n   (get [this key default-value])\n   (assoc [this key value])\n   (dissoc [this key])\n   (keys [this])\n\n   All other necessary functions will be defined so that this behaves like a normal\n   Clojure map.  These can be overriden, if desired.", RT.keyword(null, "line"), 237, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "potemkin/collections.clj"));
        const__126 = RT.var("potemkin.collections", "def-derived-map");
        const__129 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "params"), Symbol.intern(null, "&"), RT.map(RT.keyword(null, "as"), Symbol.intern(null, "m"))))), RT.keyword(null, "doc"), "Allows a map type to be defined where key-value pairs may be derived from fields.\n\n   For instance, if we want to create a map which contains both upper and lower-case\n   versions of a string without immediately instantiating both, we can do this:\n\n   (def-derived-map StringMap [^String s]\n     :lower-case (.toLowerCase s)\n     :upper-case (.toUpperCase s))\n\n   The resulting map will behave correctly if the defined keys are removed, shadowed,\n   etc.\n\n   The above class will automatically create a constructor named '->StringMap'.", RT.keyword(null, "line"), 267, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "potemkin/collections.clj"));
    }

    static {
        collections__init.__init0();
        collections__init.__init1();
        Compiler.pushNSandLoader(RT.classForName("potemkin.collections__init").getClassLoader());
        try {
            collections__init.load();
        }
        catch (Throwable throwable2) {
            Var.popThreadBindings();
            throw throwable2;
        }
        Var.popThreadBindings();
    }
}

