/*
 * Decompiled with CFR 0.152.
 */
package potemkin;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.regex.Pattern;
import potemkin.types$abstract_type_QMARK_;
import potemkin.types$clean_deftype;
import potemkin.types$def_abstract_type;
import potemkin.types$definterface_PLUS_;
import potemkin.types$defprotocol_PLUS_;
import potemkin.types$defrecord_PLUS_;
import potemkin.types$deftype_PLUS_;
import potemkin.types$deftype_STAR___GT_deftype;
import potemkin.types$deftype_STAR___GT_fn_map;
import potemkin.types$deftype__GT_deftype_STAR_;
import potemkin.types$expand_deftype;
import potemkin.types$extend_implementations;
import potemkin.types$extend_protocol_PLUS_;
import potemkin.types$fn__26084;
import potemkin.types$fn__26086;
import potemkin.types$fn__26210;
import potemkin.types$loading__6789__auto____26050;
import potemkin.types$merge_deftypes_STAR_;
import potemkin.types$munge_fn_name;
import potemkin.types$protocol_QMARK_;
import potemkin.types$register_impl_callback;
import potemkin.types$reify_PLUS_;
import potemkin.types$resolve_tag;
import potemkin.types$transform_deftype_STAR_;
import potemkin.types$untag;

public class types__init {
    public static final Var const__0;
    public static final AFn const__1;
    public static final AFn const__2;
    public static final Var const__3;
    public static final AFn const__11;
    public static final Var const__12;
    public static final AFn const__16;
    public static final Var const__17;
    public static final AFn const__20;
    public static final Var const__21;
    public static final AFn const__25;
    public static final Var const__26;
    public static final AFn const__29;
    public static final Var const__30;
    public static final AFn const__33;
    public static final Var const__34;
    public static final AFn const__35;
    public static final Var const__36;
    public static final AFn const__39;
    public static final Var const__40;
    public static final AFn const__43;
    public static final Var const__44;
    public static final AFn const__47;
    public static final Var const__48;
    public static final AFn const__51;
    public static final AFn const__54;
    public static final Var const__55;
    public static final AFn const__58;
    public static final Var const__59;
    public static final AFn const__62;
    public static final AFn const__65;
    public static final Var const__66;
    public static final AFn const__69;
    public static final Var const__70;
    public static final AFn const__73;
    public static final Var const__74;
    public static final AFn const__76;
    public static final AFn const__95;
    public static final Var const__96;
    public static final AFn const__99;
    public static final Var const__100;
    public static final AFn const__103;
    public static final Var const__104;
    public static final AFn const__107;
    public static final Var const__108;
    public static final AFn const__111;
    public static final Var const__112;
    public static final AFn const__115;
    public static final Var const__116;
    public static final AFn const__119;
    public static final Var const__120;
    public static final AFn const__123;

    public static void load() {
        Object v2;
        Object object = ((IFn)const__0.getRawRoot()).invoke(const__1);
        Object object2 = ((IFn)new types$loading__6789__auto____26050()).invoke();
        if (((Symbol)const__1).equals(const__2)) {
            v2 = null;
        } else {
            LockingTransaction.runInTransaction(new types$fn__26084());
            v2 = null;
        }
        Object object3 = ((IFn)new types$fn__26086()).invoke();
        Var var = const__3;
        var.setMeta((IPersistentMap)((Object)const__11));
        Var var2 = var;
        var.bindRoot(new types$protocol_QMARK_());
        Var var3 = const__12;
        var3.setMeta((IPersistentMap)((Object)const__16));
        Var var4 = var3;
        var3.bindRoot(new types$extend_implementations());
        Var var5 = const__17;
        var5.setMeta((IPersistentMap)((Object)const__20));
        Var var6 = var5;
        var5.bindRoot(new types$register_impl_callback());
        Var var7 = const__21;
        var7.setMeta((IPersistentMap)((Object)const__25));
        Var var8 = var7;
        var7.bindRoot(new types$extend_protocol_PLUS_());
        const__21.setMacro();
        Object v12 = null;
        Var var9 = const__21;
        Var var10 = const__26;
        var10.setMeta((IPersistentMap)((Object)const__29));
        Var var11 = var10;
        var10.bindRoot(new types$clean_deftype());
        Var var12 = const__30;
        Var var13 = var12;
        var12.setMeta((IPersistentMap)((Object)const__33));
        Var var14 = const__34;
        Var var15 = var14;
        var14.setMeta((IPersistentMap)((Object)const__35));
        Var var16 = const__36;
        var16.setMeta((IPersistentMap)((Object)const__39));
        Var var17 = var16;
        var16.bindRoot(new types$abstract_type_QMARK_());
        Var var18 = const__40.setDynamic(true);
        var18.setMeta((IPersistentMap)((Object)const__43));
        Var var19 = var18;
        var18.bindRoot(PersistentHashSet.EMPTY);
        Var var20 = const__44;
        var20.setMeta((IPersistentMap)((Object)const__47));
        Var var21 = var20;
        var20.bindRoot(new types$expand_deftype());
        Var var22 = const__48;
        var22.setMeta((IPersistentMap)((Object)const__51));
        Var var23 = var22;
        var22.bindRoot(new types$transform_deftype_STAR_());
        Var var24 = const__34;
        var24.setMeta((IPersistentMap)((Object)const__54));
        Var var25 = var24;
        var24.bindRoot(new types$deftype__GT_deftype_STAR_());
        Var var26 = const__55;
        var26.setMeta((IPersistentMap)((Object)const__58));
        Var var27 = var26;
        var26.bindRoot(new types$deftype_STAR___GT_deftype());
        Var var28 = const__59;
        var28.setMeta((IPersistentMap)((Object)const__62));
        Var var29 = var28;
        var28.bindRoot(new types$deftype_STAR___GT_fn_map());
        Var var30 = const__30;
        var30.setMeta((IPersistentMap)((Object)const__65));
        Var var31 = var30;
        var30.bindRoot(new types$merge_deftypes_STAR_());
        Var var32 = const__66;
        var32.setMeta((IPersistentMap)((Object)const__69));
        Var var33 = var32;
        var32.bindRoot(new types$def_abstract_type());
        const__66.setMacro();
        Object v38 = null;
        Var var34 = const__66;
        Var var35 = const__70;
        var35.setMeta((IPersistentMap)((Object)const__73));
        Var var36 = var35;
        var35.bindRoot(new types$defprotocol_PLUS_());
        const__70.setMacro();
        Object v42 = null;
        Var var37 = const__70;
        Var var38 = const__74;
        var38.setMeta((IPersistentMap)((Object)const__76));
        Var var39 = var38;
        var38.bindRoot(const__95);
        Var var40 = const__96;
        var40.setMeta((IPersistentMap)((Object)const__99));
        Var var41 = var40;
        var40.bindRoot(new types$munge_fn_name());
        Var var42 = const__100;
        var42.setMeta((IPersistentMap)((Object)const__103));
        Var var43 = var42;
        var42.bindRoot(new types$resolve_tag());
        Var var44 = const__104;
        var44.setMeta((IPersistentMap)((Object)const__107));
        Var var45 = var44;
        var44.bindRoot(new types$untag());
        Var var46 = const__108;
        var46.setMeta((IPersistentMap)((Object)const__111));
        Var var47 = var46;
        var46.bindRoot(new types$definterface_PLUS_());
        const__108.setMacro();
        Object v54 = null;
        Var var48 = const__108;
        Object object4 = ((IFn)new types$fn__26210()).invoke();
        Var var49 = const__112;
        var49.setMeta((IPersistentMap)((Object)const__115));
        Var var50 = var49;
        var49.bindRoot(new types$deftype_PLUS_());
        const__112.setMacro();
        Object v59 = null;
        Var var51 = const__112;
        Var var52 = const__116;
        var52.setMeta((IPersistentMap)((Object)const__119));
        Var var53 = var52;
        var52.bindRoot(new types$reify_PLUS_());
        const__116.setMacro();
        Object v63 = null;
        Var var54 = const__116;
        Var var55 = const__120;
        var55.setMeta((IPersistentMap)((Object)const__123));
        Var var56 = var55;
        var55.bindRoot(new types$defrecord_PLUS_());
        const__120.setMacro();
        Object v67 = null;
        Var var57 = const__120;
    }

    public static void __init0() {
        const__0 = RT.var("clojure.core", "in-ns");
        const__1 = Symbol.intern(null, "potemkin.types");
        const__2 = Symbol.intern(null, "clojure.core");
        const__3 = RT.var("potemkin.types", "protocol?");
        const__11 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "x")))), RT.keyword(null, "line"), 16, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "potemkin/types.clj"));
        const__12 = RT.var("potemkin.types", "extend-implementations");
        const__16 = (AFn)((Object)RT.map(RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "proto"), Symbol.intern(null, "impls"), Symbol.intern(null, "body")))), RT.keyword(null, "line"), 21, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "potemkin/types.clj"));
        const__17 = RT.var("potemkin.types", "register-impl-callback");
        const__20 = (AFn)((Object)RT.map(RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "proto-var"), Symbol.intern(null, "callback")))), RT.keyword(null, "line"), 33, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "potemkin/types.clj"));
        const__21 = RT.var("potemkin.types", "extend-protocol+");
        const__25 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "proto"), Symbol.intern(null, "&"), Symbol.intern(null, "body")))), RT.keyword(null, "doc"), "A variant of `extend-protocol` that allows `proto` to be extended over other protocols, as well as classes and `nil`.", RT.keyword(null, "line"), 38, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "potemkin/types.clj"));
        const__26 = RT.var("potemkin.types", "clean-deftype");
        const__29 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "x")))), RT.keyword(null, "line"), 71, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "potemkin/types.clj"));
        const__30 = RT.var("potemkin.types", "merge-deftypes*");
        const__33 = (AFn)((Object)RT.map(RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), 79, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "potemkin/types.clj"));
        const__34 = RT.var("potemkin.types", "deftype->deftype*");
        const__35 = (AFn)((Object)RT.map(RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), 79, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "potemkin/types.clj"));
        const__36 = RT.var("potemkin.types", "abstract-type?");
        const__39 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "x")))), RT.keyword(null, "line"), 81, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "potemkin/types.clj"));
        const__40 = RT.var("potemkin.types", "*expanded-types*");
        const__43 = (AFn)((Object)RT.map(RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), 84, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "potemkin/types.clj"));
        const__44 = RT.var("potemkin.types", "expand-deftype");
        const__47 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "x")))), RT.keyword(null, "line"), 86, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "potemkin/types.clj"));
        const__48 = RT.var("potemkin.types", "transform-deftype*");
        const__51 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "x")))), RT.keyword(null, "line"), 109, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "potemkin/types.clj"));
        const__54 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "x")))), RT.keyword(null, "line"), 116, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "potemkin/types.clj"));
        const__55 = RT.var("potemkin.types", "deftype*->deftype");
        const__58 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "x")))), RT.keyword(null, "line"), 133, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "potemkin/types.clj"));
        const__59 = RT.var("potemkin.types", "deftype*->fn-map");
        const__62 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "x")))), RT.keyword(null, "line"), 137, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "potemkin/types.clj"));
        const__65 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "a")), Tuple.create(Symbol.intern(null, "a"), Symbol.intern(null, "b"), Symbol.intern(null, "&"), Symbol.intern(null, "rest")))), RT.keyword(null, "line"), 144, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "potemkin/types.clj"));
        const__66 = RT.var("potemkin.types", "def-abstract-type");
        const__69 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "&"), Symbol.intern(null, "body")))), RT.keyword(null, "doc"), "An abstract type, which can be used in conjunction with deftype+.", RT.keyword(null, "line"), 165, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "potemkin/types.clj"));
        const__70 = RT.var("potemkin.types", "defprotocol+");
        const__73 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "&"), Symbol.intern(null, "body")))), RT.keyword(null, "doc"), "A protocol that won't evaluate if an equivalent protocol with the same name already exists.", RT.keyword(null, "line"), 172, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "potemkin/types.clj"));
        const__74 = RT.var("potemkin.types", "clojure-fn-subs");
        const__76 = (AFn)((Object)RT.map(RT.keyword(null, "line"), 184, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "potemkin/types.clj"));
        const__95 = (AFn)((Object)RT.vector(Tuple.create(Pattern.compile("\\?"), "_QMARK_"), Tuple.create(Pattern.compile("\\-"), "_"), Tuple.create(Pattern.compile("!"), "_BANG_"), Tuple.create(Pattern.compile("\\+"), "_PLUS_"), Tuple.create(Pattern.compile(">"), "_GT_"), Tuple.create(Pattern.compile("<"), "_LT_"), Tuple.create(Pattern.compile("="), "_EQ_"), Tuple.create(Pattern.compile("\\*"), "_STAR_"), Tuple.create(Pattern.compile("/"), "_SLASH_")));
        const__96 = RT.var("potemkin.types", "munge-fn-name");
        const__99 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "n")))), RT.keyword(null, "line"), 195, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "potemkin/types.clj"));
    }

    public static void __init1() {
        const__100 = RT.var("potemkin.types", "resolve-tag");
        const__103 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "n")))), RT.keyword(null, "line"), 205, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "potemkin/types.clj"));
        const__104 = RT.var("potemkin.types", "untag");
        const__107 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "n")))), RT.keyword(null, "line"), 214, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "potemkin/types.clj"));
        const__108 = RT.var("potemkin.types", "definterface+");
        const__111 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "&"), Symbol.intern(null, "body")))), RT.keyword(null, "doc"), "An interface that won't evaluate if an interface with that name already exists.\n\n   Self parameters and multiple arities are defined like defprotocol, as well as wrapping\n   functions for each, so it can be used to replace defprotocol seamlessly.", RT.keyword(null, "line"), 217, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "potemkin/types.clj"));
        const__112 = RT.var("potemkin.types", "deftype+");
        const__115 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "params"), Symbol.intern(null, "&"), Symbol.intern(null, "body")))), RT.keyword(null, "doc"), "A deftype that won't evaluate if an equivalent type with the same name already exists,\n   and allows abstract types to be used.", RT.keyword(null, "line"), 291, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "potemkin/types.clj"));
        const__116 = RT.var("potemkin.types", "reify+");
        const__119 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "body")))), RT.keyword(null, "doc"), "A reify that supports abstract types.", RT.keyword(null, "line"), 314, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "potemkin/types.clj"));
        const__120 = RT.var("potemkin.types", "defrecord+");
        const__123 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "&"), Symbol.intern(null, "body")))), RT.keyword(null, "doc"), "A defrecord that won't evaluate if an equivalent datatype with the same name already exists.", RT.keyword(null, "line"), 326, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "potemkin/types.clj"));
    }

    static {
        types__init.__init0();
        types__init.__init1();
        Compiler.pushNSandLoader(RT.classForName("potemkin.types__init").getClassLoader());
        try {
            types__init.load();
        }
        catch (Throwable throwable2) {
            Var.popThreadBindings();
            throw throwable2;
        }
        Var.popThreadBindings();
    }
}

