/*
 * Decompiled with CFR 0.152.
 */
package clj_time;

import clj_time.core$abuts_QMARK_;
import clj_time.core$adjust;
import clj_time.core$ago;
import clj_time.core$available_ids;
import clj_time.core$date_midnight;
import clj_time.core$date_time;
import clj_time.core$days;
import clj_time.core$days_QMARK_;
import clj_time.core$default_time_zone;
import clj_time.core$deprecated;
import clj_time.core$do_at;
import clj_time.core$do_at_STAR_;
import clj_time.core$earliest;
import clj_time.core$end;
import clj_time.core$epoch;
import clj_time.core$extend;
import clj_time.core$first_day_of_the_month;
import clj_time.core$floor;
import clj_time.core$fn__18512;
import clj_time.core$fn__18551;
import clj_time.core$fn__18554;
import clj_time.core$fn__18567;
import clj_time.core$fn__18578;
import clj_time.core$fn__18589;
import clj_time.core$fn__18600;
import clj_time.core$fn__18611;
import clj_time.core$fn__18622;
import clj_time.core$fn__18635;
import clj_time.core$fn__18648;
import clj_time.core$fn__18659;
import clj_time.core$fn__18670;
import clj_time.core$fn__18681;
import clj_time.core$fn__18692;
import clj_time.core$fn__18703;
import clj_time.core$fn__18714;
import clj_time.core$fn__18727;
import clj_time.core$fn__18740;
import clj_time.core$fn__18751;
import clj_time.core$fn__18778;
import clj_time.core$fn__18781;
import clj_time.core$fn__18792;
import clj_time.core$fn__18803;
import clj_time.core$fn__18814;
import clj_time.core$fn__18825;
import clj_time.core$fn__18836;
import clj_time.core$fn__18847;
import clj_time.core$fn__18858;
import clj_time.core$fn__18869;
import clj_time.core$fn__18871;
import clj_time.core$fn__18873;
import clj_time.core$fn__18875;
import clj_time.core$fn__18877;
import clj_time.core$fn__18879;
import clj_time.core$fn__18881;
import clj_time.core$fn__18883;
import clj_time.core$fn__18885;
import clj_time.core$fn__18887;
import clj_time.core$fn__18889;
import clj_time.core$fn__18891;
import clj_time.core$fn__18893;
import clj_time.core$fn__18895;
import clj_time.core$fn__18897;
import clj_time.core$fn__18899;
import clj_time.core$fn__18901;
import clj_time.core$fn__18903;
import clj_time.core$fn__18905;
import clj_time.core$fn__18907;
import clj_time.core$fn__18909;
import clj_time.core$fn__18911;
import clj_time.core$fn__18913;
import clj_time.core$fn__18915;
import clj_time.core$fn__18917;
import clj_time.core$fn__18919;
import clj_time.core$fn__18921;
import clj_time.core$fn__18923;
import clj_time.core$fn__18925;
import clj_time.core$fn__18927;
import clj_time.core$fn__18929;
import clj_time.core$fn__18931;
import clj_time.core$fn__18933;
import clj_time.core$fn__18935;
import clj_time.core$fn__18937;
import clj_time.core$fn__18939;
import clj_time.core$fn__18941;
import clj_time.core$fn__18943;
import clj_time.core$fn__18945;
import clj_time.core$fn__18947;
import clj_time.core$fn__18949;
import clj_time.core$fn__18951;
import clj_time.core$fn__18953;
import clj_time.core$fn__18955;
import clj_time.core$fn__18957;
import clj_time.core$fn__18959;
import clj_time.core$fn__18961;
import clj_time.core$fn__18963;
import clj_time.core$fn__18965;
import clj_time.core$fn__18967;
import clj_time.core$fn__18969;
import clj_time.core$fn__18971;
import clj_time.core$fn__18973;
import clj_time.core$fn__18975;
import clj_time.core$fn__18977;
import clj_time.core$fn__18979;
import clj_time.core$fn__18981;
import clj_time.core$fn__18983;
import clj_time.core$fn__18985;
import clj_time.core$fn__18987;
import clj_time.core$fn__18989;
import clj_time.core$fn__18991;
import clj_time.core$fn__18993;
import clj_time.core$fn__18995;
import clj_time.core$fn__18997;
import clj_time.core$fn__18999;
import clj_time.core$fn__19001;
import clj_time.core$fn__19003;
import clj_time.core$fn__19005;
import clj_time.core$fn__19007;
import clj_time.core$fn__19009;
import clj_time.core$fn__19011;
import clj_time.core$fn__19013;
import clj_time.core$fn__19015;
import clj_time.core$fn__19017;
import clj_time.core$fn__19019;
import clj_time.core$fn__19021;
import clj_time.core$fn__19023;
import clj_time.core$fn__19025;
import clj_time.core$fn__19027;
import clj_time.core$fn__19029;
import clj_time.core$fn__19031;
import clj_time.core$fn__19033;
import clj_time.core$fn__19070;
import clj_time.core$fn__19072;
import clj_time.core$fn__19074;
import clj_time.core$fn__19076;
import clj_time.core$fn__19078;
import clj_time.core$fn__19080;
import clj_time.core$fn__19082;
import clj_time.core$fn__19084;
import clj_time.core$fn__19086;
import clj_time.core$fn__19088;
import clj_time.core$fn__19090;
import clj_time.core$fn__19092;
import clj_time.core$fn__19094;
import clj_time.core$fn__19096;
import clj_time.core$fn__19098;
import clj_time.core$fn__19102;
import clj_time.core$fn__19157;
import clj_time.core$from_now;
import clj_time.core$from_time_zone;
import clj_time.core$hours;
import clj_time.core$hours_QMARK_;
import clj_time.core$in_msecs;
import clj_time.core$in_secs;
import clj_time.core$interval;
import clj_time.core$last_day_of_the_month;
import clj_time.core$latest;
import clj_time.core$loading__6789__auto____18510;
import clj_time.core$local_date;
import clj_time.core$local_date_time;
import clj_time.core$local_time;
import clj_time.core$max_date;
import clj_time.core$millis;
import clj_time.core$min_date;
import clj_time.core$mins_ago;
import clj_time.core$minus;
import clj_time.core$minutes;
import clj_time.core$minutes_QMARK_;
import clj_time.core$months;
import clj_time.core$months_QMARK_;
import clj_time.core$now;
import clj_time.core$nth_day_of_the_month;
import clj_time.core$number_of_days_in_the_month;
import clj_time.core$overlap;
import clj_time.core$overlaps_QMARK_;
import clj_time.core$plus;
import clj_time.core$seconds;
import clj_time.core$seconds_QMARK_;
import clj_time.core$secs;
import clj_time.core$secs_QMARK_;
import clj_time.core$start;
import clj_time.core$time_now;
import clj_time.core$time_zone_for_id;
import clj_time.core$time_zone_for_offset;
import clj_time.core$to_time_zone;
import clj_time.core$today;
import clj_time.core$today_at;
import clj_time.core$today_at_midnight;
import clj_time.core$weeks;
import clj_time.core$weeks_QMARK_;
import clj_time.core$when_available;
import clj_time.core$with_time_at_start_of_day;
import clj_time.core$within_QMARK_;
import clj_time.core$year_month;
import clj_time.core$years;
import clj_time.core$years_QMARK_;
import clj_time.core$yesterday;
import clojure.lang.AFn;
import clojure.lang.AReference;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.Namespace;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import org.joda.time.DateTimeZone;

public class core__init {
    public static final Var const__0;
    public static final AFn const__1;
    public static final Keyword const__2;
    public static final AFn const__3;
    public static final AFn const__4;
    public static final Var const__5;
    public static final AFn const__13;
    public static final Object const__14;
    public static final Var const__15;
    public static final Var const__16;
    public static final Var const__17;
    public static final Var const__18;
    public static final ISeq const__19;
    public static final Var const__20;
    public static final Var const__21;
    public static final AFn const__25;
    public static final Keyword const__26;
    public static final AFn const__27;
    public static final Keyword const__28;
    public static final Keyword const__29;
    public static final Keyword const__30;
    public static final Keyword const__31;
    public static final Keyword const__32;
    public static final Keyword const__33;
    public static final Keyword const__34;
    public static final Keyword const__35;
    public static final Keyword const__36;
    public static final Keyword const__37;
    public static final Keyword const__38;
    public static final Keyword const__39;
    public static final Keyword const__40;
    public static final Keyword const__41;
    public static final Keyword const__42;
    public static final Keyword const__43;
    public static final Keyword const__44;
    public static final Keyword const__45;
    public static final Keyword const__46;
    public static final Keyword const__47;
    public static final AFn const__48;
    public static final Keyword const__49;
    public static final Var const__50;
    public static final Var const__51;
    public static final Var const__52;
    public static final AFn const__53;
    public static final AFn const__54;
    public static final Keyword const__55;
    public static final AFn const__56;
    public static final AFn const__57;
    public static final AFn const__58;
    public static final AFn const__59;
    public static final AFn const__60;
    public static final AFn const__61;
    public static final AFn const__62;
    public static final AFn const__63;
    public static final AFn const__64;
    public static final AFn const__65;
    public static final AFn const__66;
    public static final AFn const__67;
    public static final AFn const__68;
    public static final AFn const__69;
    public static final AFn const__70;
    public static final AFn const__71;
    public static final AFn const__72;
    public static final AFn const__73;
    public static final AFn const__74;
    public static final AFn const__75;
    public static final AFn const__76;
    public static final AFn const__77;
    public static final AFn const__78;
    public static final AFn const__79;
    public static final AFn const__80;
    public static final AFn const__81;
    public static final AFn const__82;
    public static final AFn const__83;
    public static final AFn const__84;
    public static final AFn const__85;
    public static final AFn const__86;
    public static final AFn const__87;
    public static final AFn const__88;
    public static final AFn const__89;
    public static final Var const__90;
    public static final AFn const__91;
    public static final Object const__92;
    public static final Var const__93;
    public static final ISeq const__94;
    public static final AFn const__96;
    public static final AFn const__97;
    public static final Keyword const__98;
    public static final Keyword const__99;
    public static final Keyword const__100;
    public static final Keyword const__101;
    public static final Keyword const__102;
    public static final Keyword const__103;
    public static final Keyword const__104;
    public static final Keyword const__105;
    public static final AFn const__106;
    public static final AFn const__107;
    public static final AFn const__108;
    public static final AFn const__109;
    public static final AFn const__110;
    public static final AFn const__111;
    public static final AFn const__112;
    public static final AFn const__113;
    public static final AFn const__114;
    public static final AFn const__115;
    public static final AFn const__116;
    public static final AFn const__117;
    public static final AFn const__118;
    public static final AFn const__119;
    public static final AFn const__120;
    public static final AFn const__121;
    public static final AFn const__122;
    public static final AFn const__123;
    public static final Var const__124;
    public static final Object const__125;
    public static final Object const__126;
    public static final Object const__127;
    public static final Object const__128;
    public static final Object const__129;
    public static final Object const__130;
    public static final Var const__131;
    public static final AFn const__133;
    public static final Var const__134;
    public static final AFn const__137;
    public static final Var const__138;
    public static final AFn const__141;
    public static final Var const__142;
    public static final AFn const__146;
    public static final Var const__147;
    public static final AFn const__151;
    public static final Var const__152;
    public static final AFn const__155;
    public static final Var const__156;
    public static final AFn const__159;
    public static final Var const__160;
    public static final AFn const__163;
    public static final Var const__164;
    public static final AFn const__167;
    public static final Var const__168;
    public static final AFn const__171;
    public static final Var const__172;
    public static final AFn const__175;
    public static final Var const__176;
    public static final AFn const__179;
    public static final Var const__180;
    public static final AFn const__183;
    public static final Var const__184;
    public static final AFn const__187;
    public static final Var const__188;
    public static final AFn const__191;
    public static final Var const__192;
    public static final AFn const__195;
    public static final Var const__196;
    public static final AFn const__199;
    public static final Var const__200;
    public static final AFn const__203;
    public static final Var const__204;
    public static final AFn const__207;
    public static final Var const__208;
    public static final AFn const__211;
    public static final Var const__212;
    public static final AFn const__215;
    public static final Var const__216;
    public static final AFn const__219;
    public static final Var const__220;
    public static final AFn const__223;
    public static final Var const__224;
    public static final AFn const__227;
    public static final Var const__228;
    public static final AFn const__231;
    public static final Var const__232;
    public static final AFn const__235;
    public static final Var const__236;
    public static final AFn const__239;
    public static final Var const__240;
    public static final AFn const__243;
    public static final Object const__244;
    public static final Object const__245;
    public static final Var const__246;
    public static final AFn const__249;
    public static final Var const__250;
    public static final AFn const__253;
    public static final Var const__254;
    public static final AFn const__257;
    public static final Var const__258;
    public static final AFn const__261;
    public static final Var const__262;
    public static final AFn const__265;
    public static final Var const__266;
    public static final AFn const__269;
    public static final Var const__270;
    public static final AFn const__273;
    public static final Var const__274;
    public static final AFn const__277;
    public static final Var const__278;
    public static final AFn const__281;
    public static final Var const__282;
    public static final AFn const__285;
    public static final Var const__286;
    public static final AFn const__289;
    public static final Var const__290;
    public static final AFn const__293;
    public static final Var const__294;
    public static final AFn const__297;
    public static final Var const__298;
    public static final AFn const__301;
    public static final Var const__302;
    public static final AFn const__305;
    public static final Var const__306;
    public static final AFn const__309;
    public static final Var const__310;
    public static final AFn const__313;
    public static final Var const__314;
    public static final AFn const__317;
    public static final Var const__318;
    public static final AFn const__321;
    public static final Var const__322;
    public static final AFn const__325;
    public static final Var const__326;
    public static final AFn const__329;
    public static final Var const__330;
    public static final AFn const__333;
    public static final Var const__334;
    public static final AFn const__337;
    public static final Var const__338;
    public static final AFn const__341;
    public static final Var const__342;
    public static final AFn const__345;
    public static final Var const__346;
    public static final AFn const__349;
    public static final Var const__350;
    public static final AFn const__353;
    public static final Var const__354;
    public static final AFn const__357;
    public static final Var const__358;
    public static final AFn const__361;
    public static final Var const__362;
    public static final AFn const__365;
    public static final Var const__366;
    public static final AFn const__369;
    public static final Var const__370;
    public static final AFn const__373;
    public static final Var const__374;
    public static final AFn const__377;
    public static final Var const__378;
    public static final AFn const__381;
    public static final Var const__382;
    public static final AFn const__385;
    public static final Var const__386;
    public static final AFn const__389;
    public static final Var const__390;
    public static final AFn const__393;
    public static final Var const__394;
    public static final AFn const__398;
    public static final Object const__399;
    public static final Var const__400;
    public static final Keyword const__401;

    public static void load() {
        Object v3;
        Object object = ((IFn)const__0.getRawRoot()).invoke(const__1);
        IPersistentMap iPersistentMap = ((AReference)Namespace.find((Symbol)const__1)).resetMeta((IPersistentMap)((Object)const__3));
        Object object2 = ((IFn)new core$loading__6789__auto____18510()).invoke();
        if (((Symbol)const__1).equals(const__4)) {
            v3 = null;
        } else {
            LockingTransaction.runInTransaction(new core$fn__18512());
            v3 = null;
        }
        Var var = const__5;
        var.setMeta((IPersistentMap)((Object)const__13));
        Var var2 = var;
        var.bindRoot(new core$deprecated());
        Object object3 = ((IFn)new core$fn__18551()).invoke();
        Object object4 = const__14;
        Object object5 = ((IFn)const__15.getRawRoot()).invoke(const__16, const__17.getRawRoot(), const__2, "Interface for various date time functions");
        Object object6 = ((IFn)const__18).invoke(const__16, const__19);
        Object object7 = ((IFn)const__20.getRawRoot()).invoke(const__16, const__21.getRawRoot(), ((IFn)const__17.getRawRoot()).invoke(const__25, const__26, const__27, const__28, const__16, const__29, const__48, const__49, RT.map(((IFn)const__50.getRawRoot()).invoke(const__51.get(), ((IFn)const__52.getRawRoot()).invoke(const__53, ((IFn)const__21.getRawRoot()).invoke(const__54, RT.mapUniqueKeys(const__55, const__16)))), new core$fn__18554(), ((IFn)const__50.getRawRoot()).invoke(const__51.get(), ((IFn)const__52.getRawRoot()).invoke(const__56, ((IFn)const__21.getRawRoot()).invoke(const__57, RT.mapUniqueKeys(const__55, const__16)))), new core$fn__18567(), ((IFn)const__50.getRawRoot()).invoke(const__51.get(), ((IFn)const__52.getRawRoot()).invoke(const__58, ((IFn)const__21.getRawRoot()).invoke(const__59, RT.mapUniqueKeys(const__55, const__16)))), new core$fn__18578(), ((IFn)const__50.getRawRoot()).invoke(const__51.get(), ((IFn)const__52.getRawRoot()).invoke(const__60, ((IFn)const__21.getRawRoot()).invoke(const__61, RT.mapUniqueKeys(const__55, const__16)))), new core$fn__18589(), ((IFn)const__50.getRawRoot()).invoke(const__51.get(), ((IFn)const__52.getRawRoot()).invoke(const__62, ((IFn)const__21.getRawRoot()).invoke(const__63, RT.mapUniqueKeys(const__55, const__16)))), new core$fn__18600(), ((IFn)const__50.getRawRoot()).invoke(const__51.get(), ((IFn)const__52.getRawRoot()).invoke(const__64, ((IFn)const__21.getRawRoot()).invoke(const__65, RT.mapUniqueKeys(const__55, const__16)))), new core$fn__18611(), ((IFn)const__50.getRawRoot()).invoke(const__51.get(), ((IFn)const__52.getRawRoot()).invoke(const__66, ((IFn)const__21.getRawRoot()).invoke(const__67, RT.mapUniqueKeys(const__55, const__16)))), new core$fn__18622(), ((IFn)const__50.getRawRoot()).invoke(const__51.get(), ((IFn)const__52.getRawRoot()).invoke(const__68, ((IFn)const__21.getRawRoot()).invoke(const__69, RT.mapUniqueKeys(const__55, const__16)))), new core$fn__18635(), ((IFn)const__50.getRawRoot()).invoke(const__51.get(), ((IFn)const__52.getRawRoot()).invoke(const__70, ((IFn)const__21.getRawRoot()).invoke(const__71, RT.mapUniqueKeys(const__55, const__16)))), new core$fn__18648(), ((IFn)const__50.getRawRoot()).invoke(const__51.get(), ((IFn)const__52.getRawRoot()).invoke(const__72, ((IFn)const__21.getRawRoot()).invoke(const__73, RT.mapUniqueKeys(const__55, const__16)))), new core$fn__18659(), ((IFn)const__50.getRawRoot()).invoke(const__51.get(), ((IFn)const__52.getRawRoot()).invoke(const__74, ((IFn)const__21.getRawRoot()).invoke(const__75, RT.mapUniqueKeys(const__55, const__16)))), new core$fn__18670(), ((IFn)const__50.getRawRoot()).invoke(const__51.get(), ((IFn)const__52.getRawRoot()).invoke(const__76, ((IFn)const__21.getRawRoot()).invoke(const__77, RT.mapUniqueKeys(const__55, const__16)))), new core$fn__18681(), ((IFn)const__50.getRawRoot()).invoke(const__51.get(), ((IFn)const__52.getRawRoot()).invoke(const__78, ((IFn)const__21.getRawRoot()).invoke(const__79, RT.mapUniqueKeys(const__55, const__16)))), new core$fn__18692(), ((IFn)const__50.getRawRoot()).invoke(const__51.get(), ((IFn)const__52.getRawRoot()).invoke(const__80, ((IFn)const__21.getRawRoot()).invoke(const__81, RT.mapUniqueKeys(const__55, const__16)))), new core$fn__18703(), ((IFn)const__50.getRawRoot()).invoke(const__51.get(), ((IFn)const__52.getRawRoot()).invoke(const__82, ((IFn)const__21.getRawRoot()).invoke(const__83, RT.mapUniqueKeys(const__55, const__16)))), new core$fn__18714(), ((IFn)const__50.getRawRoot()).invoke(const__51.get(), ((IFn)const__52.getRawRoot()).invoke(const__84, ((IFn)const__21.getRawRoot()).invoke(const__85, RT.mapUniqueKeys(const__55, const__16)))), new core$fn__18727(), ((IFn)const__50.getRawRoot()).invoke(const__51.get(), ((IFn)const__52.getRawRoot()).invoke(const__86, ((IFn)const__21.getRawRoot()).invoke(const__87, RT.mapUniqueKeys(const__55, const__16)))), new core$fn__18740(), ((IFn)const__50.getRawRoot()).invoke(const__51.get(), ((IFn)const__52.getRawRoot()).invoke(const__88, ((IFn)const__21.getRawRoot()).invoke(const__89, RT.mapUniqueKeys(const__55, const__16)))), new core$fn__18751())));
        Object object8 = ((IFn)const__90.getRawRoot()).invoke(const__16.getRawRoot());
        AFn aFn = const__91;
        Object object9 = ((IFn)new core$fn__18778()).invoke();
        Object object10 = const__92;
        Object object11 = ((IFn)const__15.getRawRoot()).invoke(const__93, const__17.getRawRoot(), const__2, "Interface for in-<time unit> functions");
        Object object12 = ((IFn)const__18).invoke(const__93, const__94);
        Object object13 = ((IFn)const__20.getRawRoot()).invoke(const__93, const__21.getRawRoot(), ((IFn)const__17.getRawRoot()).invoke(const__96, const__26, const__97, const__28, const__93, const__29, const__106, const__49, RT.map(((IFn)const__50.getRawRoot()).invoke(const__51.get(), ((IFn)const__52.getRawRoot()).invoke(const__107, ((IFn)const__21.getRawRoot()).invoke(const__108, RT.mapUniqueKeys(const__55, const__93)))), new core$fn__18781(), ((IFn)const__50.getRawRoot()).invoke(const__51.get(), ((IFn)const__52.getRawRoot()).invoke(const__109, ((IFn)const__21.getRawRoot()).invoke(const__110, RT.mapUniqueKeys(const__55, const__93)))), new core$fn__18792(), ((IFn)const__50.getRawRoot()).invoke(const__51.get(), ((IFn)const__52.getRawRoot()).invoke(const__111, ((IFn)const__21.getRawRoot()).invoke(const__112, RT.mapUniqueKeys(const__55, const__93)))), new core$fn__18803(), ((IFn)const__50.getRawRoot()).invoke(const__51.get(), ((IFn)const__52.getRawRoot()).invoke(const__113, ((IFn)const__21.getRawRoot()).invoke(const__114, RT.mapUniqueKeys(const__55, const__93)))), new core$fn__18814(), ((IFn)const__50.getRawRoot()).invoke(const__51.get(), ((IFn)const__52.getRawRoot()).invoke(const__115, ((IFn)const__21.getRawRoot()).invoke(const__116, RT.mapUniqueKeys(const__55, const__93)))), new core$fn__18825(), ((IFn)const__50.getRawRoot()).invoke(const__51.get(), ((IFn)const__52.getRawRoot()).invoke(const__117, ((IFn)const__21.getRawRoot()).invoke(const__118, RT.mapUniqueKeys(const__55, const__93)))), new core$fn__18836(), ((IFn)const__50.getRawRoot()).invoke(const__51.get(), ((IFn)const__52.getRawRoot()).invoke(const__119, ((IFn)const__21.getRawRoot()).invoke(const__120, RT.mapUniqueKeys(const__55, const__93)))), new core$fn__18847(), ((IFn)const__50.getRawRoot()).invoke(const__51.get(), ((IFn)const__52.getRawRoot()).invoke(const__121, ((IFn)const__21.getRawRoot()).invoke(const__122, RT.mapUniqueKeys(const__55, const__93)))), new core$fn__18858())));
        Object object14 = ((IFn)const__90.getRawRoot()).invoke(const__93.getRawRoot());
        AFn aFn2 = const__123;
        Object object15 = ((IFn)const__124.getRawRoot()).invoke(const__125, const__16.getRawRoot(), RT.mapUniqueKeys(const__30, new core$fn__18869(), const__31, new core$fn__18871(), const__32, new core$fn__18873(), const__33, new core$fn__18875(), const__34, new core$fn__18877(), const__35, new core$fn__18879(), const__36, new core$fn__18881(), const__37, new core$fn__18883(), const__38, new core$fn__18885(), const__39, new core$fn__18887(), const__40, new core$fn__18889(), const__41, new core$fn__18891(), const__42, new core$fn__18893(), const__43, new core$fn__18895(), const__44, new core$fn__18897(), const__45, new core$fn__18899(), const__46, new core$fn__18901(), const__47, new core$fn__18903()));
        Object object16 = ((IFn)const__124.getRawRoot()).invoke(const__126, const__16.getRawRoot(), RT.mapUniqueKeys(const__30, new core$fn__18905(), const__31, new core$fn__18907(), const__32, new core$fn__18909(), const__33, new core$fn__18911(), const__34, new core$fn__18913(), const__35, new core$fn__18915(), const__36, new core$fn__18917(), const__37, new core$fn__18919(), const__38, new core$fn__18921(), const__39, new core$fn__18923(), const__40, new core$fn__18925(), const__41, new core$fn__18927(), const__42, new core$fn__18929(), const__43, new core$fn__18931(), const__44, new core$fn__18933(), const__45, new core$fn__18935(), const__46, new core$fn__18937(), const__47, new core$fn__18939()));
        Object object17 = ((IFn)const__124.getRawRoot()).invoke(const__127, const__16.getRawRoot(), RT.mapUniqueKeys(const__30, new core$fn__18941(), const__31, new core$fn__18943(), const__32, new core$fn__18945(), const__33, new core$fn__18947(), const__34, new core$fn__18949(), const__35, new core$fn__18951(), const__36, new core$fn__18953(), const__37, new core$fn__18955(), const__38, new core$fn__18957(), const__39, new core$fn__18959(), const__40, new core$fn__18961(), const__41, new core$fn__18963(), const__42, new core$fn__18965(), const__43, new core$fn__18967(), const__44, new core$fn__18969(), const__45, new core$fn__18971(), const__46, new core$fn__18973(), const__47, new core$fn__18975()));
        Object object18 = ((IFn)const__124.getRawRoot()).invoke(const__128, const__16.getRawRoot(), RT.mapUniqueKeys(const__41, new core$fn__18977(), const__37, new core$fn__18979(), const__39, new core$fn__18981(), const__30, new core$fn__18983(), const__40, new core$fn__18985(), const__35, new core$fn__18987(), const__43, new core$fn__18989()));
        Object object19 = ((IFn)const__124.getRawRoot()).invoke(const__129, const__16.getRawRoot(), RT.mapUniqueKeys(const__30, new core$fn__18991(), const__31, new core$fn__18993(), const__34, new core$fn__18995(), const__35, new core$fn__18997(), const__36, new core$fn__18999(), const__37, new core$fn__19001(), const__38, new core$fn__19003(), const__39, new core$fn__19005(), const__40, new core$fn__19007(), const__41, new core$fn__19009(), const__42, new core$fn__19011(), const__43, new core$fn__19013(), const__45, new core$fn__19015()));
        Object object20 = ((IFn)const__124.getRawRoot()).invoke(const__130, const__16.getRawRoot(), RT.mapUniqueKeys(const__30, new core$fn__19017(), const__32, new core$fn__19019(), const__33, new core$fn__19021(), const__35, new core$fn__19023(), const__39, new core$fn__19025(), const__40, new core$fn__19027(), const__43, new core$fn__19029(), const__46, new core$fn__19031(), const__47, new core$fn__19033()));
        Var var3 = const__131;
        var3.setMeta((IPersistentMap)((Object)const__133));
        Var var4 = var3;
        var3.bindRoot(DateTimeZone.UTC);
        Var var5 = const__134;
        var5.setMeta((IPersistentMap)((Object)const__137));
        Var var6 = var5;
        var5.bindRoot(new core$now());
        Var var7 = const__138;
        var7.setMeta((IPersistentMap)((Object)const__141));
        Var var8 = var7;
        var7.bindRoot(new core$time_now());
        Var var9 = const__142;
        var9.setMeta((IPersistentMap)((Object)const__146));
        Var var10 = var9;
        var9.bindRoot(new core$today_at_midnight());
        Var var11 = const__147;
        var11.setMeta((IPersistentMap)((Object)const__151));
        Var var12 = var11;
        var11.bindRoot(new core$with_time_at_start_of_day());
        Var var13 = const__152;
        var13.setMeta((IPersistentMap)((Object)const__155));
        Var var14 = var13;
        var13.bindRoot(new core$epoch());
        Var var15 = const__156;
        var15.setMeta((IPersistentMap)((Object)const__159));
        Var var16 = var15;
        var15.bindRoot(new core$date_midnight());
        Var var17 = const__160;
        var17.setMeta((IPersistentMap)((Object)const__163));
        Var var18 = var17;
        var17.bindRoot(new core$min_date());
        Var var19 = const__164;
        var19.setMeta((IPersistentMap)((Object)const__167));
        Var var20 = var19;
        var19.bindRoot(new core$max_date());
        Var var21 = const__168;
        var21.setMeta((IPersistentMap)((Object)const__171));
        Var var22 = var21;
        var21.bindRoot(new core$date_time());
        Var var23 = const__172;
        var23.setMeta((IPersistentMap)((Object)const__175));
        Var var24 = var23;
        var23.bindRoot(new core$local_date_time());
        Var var25 = const__176;
        var25.setMeta((IPersistentMap)((Object)const__179));
        Var var26 = var25;
        var25.bindRoot(new core$year_month());
        Var var27 = const__180;
        var27.setMeta((IPersistentMap)((Object)const__183));
        Var var28 = var27;
        var27.bindRoot(new core$local_date());
        Var var29 = const__184;
        var29.setMeta((IPersistentMap)((Object)const__187));
        Var var30 = var29;
        var29.bindRoot(new core$local_time());
        Var var31 = const__188;
        var31.setMeta((IPersistentMap)((Object)const__191));
        Var var32 = var31;
        var31.bindRoot(new core$today());
        Var var33 = const__192;
        var33.setMeta((IPersistentMap)((Object)const__195));
        Var var34 = var33;
        var33.bindRoot(new core$time_zone_for_offset());
        Var var35 = const__196;
        var35.setMeta((IPersistentMap)((Object)const__199));
        Var var36 = var35;
        var35.bindRoot(new core$time_zone_for_id());
        Var var37 = const__200;
        var37.setMeta((IPersistentMap)((Object)const__203));
        Var var38 = var37;
        var37.bindRoot(new core$available_ids());
        Var var39 = const__204;
        var39.setMeta((IPersistentMap)((Object)const__207));
        Var var40 = var39;
        var39.bindRoot(new core$default_time_zone());
        Var var41 = const__208;
        var41.setMeta((IPersistentMap)((Object)const__211));
        Var var42 = var41;
        var41.bindRoot(new core$to_time_zone());
        Var var43 = const__212;
        var43.setMeta((IPersistentMap)((Object)const__215));
        Var var44 = var43;
        var43.bindRoot(new core$from_time_zone());
        Var var45 = const__216;
        var45.setMeta((IPersistentMap)((Object)const__219));
        Var var46 = var45;
        var45.bindRoot(new core$years());
        Var var47 = const__220;
        var47.setMeta((IPersistentMap)((Object)const__223));
        Var var48 = var47;
        var47.bindRoot(new core$months());
        Var var49 = const__224;
        var49.setMeta((IPersistentMap)((Object)const__227));
        Var var50 = var49;
        var49.bindRoot(new core$weeks());
        Var var51 = const__228;
        var51.setMeta((IPersistentMap)((Object)const__231));
        Var var52 = var51;
        var51.bindRoot(new core$days());
        Var var53 = const__232;
        var53.setMeta((IPersistentMap)((Object)const__235));
        Var var54 = var53;
        var53.bindRoot(new core$hours());
        Var var55 = const__236;
        var55.setMeta((IPersistentMap)((Object)const__239));
        Var var56 = var55;
        var55.bindRoot(new core$minutes());
        Var var57 = const__240;
        var57.setMeta((IPersistentMap)((Object)const__243));
        Var var58 = var57;
        var57.bindRoot(new core$seconds());
        Object object21 = ((IFn)const__124.getRawRoot()).invoke(const__244, const__93.getRawRoot(), RT.mapUniqueKeys(const__103, new core$fn__19070(), const__98, new core$fn__19072(), const__99, new core$fn__19074(), const__101, new core$fn__19076(), const__100, new core$fn__19078(), const__105, new core$fn__19080(), const__104, new core$fn__19082(), const__102, new core$fn__19084()));
        Object object22 = ((IFn)const__124.getRawRoot()).invoke(const__245, const__93.getRawRoot(), RT.mapUniqueKeys(const__103, new core$fn__19086(), const__98, new core$fn__19088(), const__99, new core$fn__19090(), const__101, new core$fn__19092(), const__100, new core$fn__19094(), const__105, new core$fn__19096(), const__104, new core$fn__19098(), const__102, new core$fn__19102()));
        Var var59 = const__246;
        var59.setMeta((IPersistentMap)((Object)const__249));
        Var var60 = var59;
        var59.bindRoot(new core$in_msecs());
        Var var61 = const__250;
        var61.setMeta((IPersistentMap)((Object)const__253));
        Var var62 = var61;
        var61.bindRoot(new core$in_secs());
        Var var63 = const__254;
        var63.setMeta((IPersistentMap)((Object)const__257));
        Var var64 = var63;
        var63.bindRoot(new core$secs());
        Var var65 = const__258;
        var65.setMeta((IPersistentMap)((Object)const__261));
        Var var66 = var65;
        var65.bindRoot(new core$millis());
        Var var67 = const__262;
        var67.setMeta((IPersistentMap)((Object)const__265));
        Var var68 = var67;
        var67.bindRoot(new core$plus());
        Var var69 = const__266;
        var69.setMeta((IPersistentMap)((Object)const__269));
        Var var70 = var69;
        var69.bindRoot(new core$minus());
        Var var71 = const__270;
        var71.setMeta((IPersistentMap)((Object)const__273));
        Var var72 = var71;
        var71.bindRoot(new core$ago());
        Var var73 = const__274;
        var73.setMeta((IPersistentMap)((Object)const__277));
        Var var74 = var73;
        var73.bindRoot(new core$yesterday());
        Var var75 = const__278;
        var75.setMeta((IPersistentMap)((Object)const__281));
        Var var76 = var75;
        var75.bindRoot(new core$from_now());
        Var var77 = const__282;
        var77.setMeta((IPersistentMap)((Object)const__285));
        Var var78 = var77;
        var77.bindRoot(new core$earliest());
        Var var79 = const__286;
        var79.setMeta((IPersistentMap)((Object)const__289));
        Var var80 = var79;
        var79.bindRoot(new core$latest());
        Var var81 = const__290;
        var81.setMeta((IPersistentMap)((Object)const__293));
        Var var82 = var81;
        var81.bindRoot(new core$interval());
        Var var83 = const__294;
        var83.setMeta((IPersistentMap)((Object)const__297));
        Var var84 = var83;
        var83.bindRoot(new core$start());
        Var var85 = const__298;
        var85.setMeta((IPersistentMap)((Object)const__301));
        Var var86 = var85;
        var85.bindRoot(new core$end());
        Var var87 = const__302;
        var87.setMeta((IPersistentMap)((Object)const__305));
        Var var88 = var87;
        var87.bindRoot(new core$extend());
        Var var89 = const__306;
        var89.setMeta((IPersistentMap)((Object)const__309));
        Var var90 = var89;
        var89.bindRoot(new core$adjust());
        Object v116 = null;
        Var var91 = const__310;
        var91.setMeta((IPersistentMap)((Object)const__313));
        Var var92 = var91;
        var91.bindRoot(new core$within_QMARK_());
        Var var93 = const__314;
        var93.setMeta((IPersistentMap)((Object)const__317));
        Var var94 = var93;
        var93.bindRoot(new core$overlaps_QMARK_());
        Var var95 = const__318;
        var95.setMeta((IPersistentMap)((Object)const__321));
        Var var96 = var95;
        var95.bindRoot(new core$overlap());
        Var var97 = const__322;
        var97.setMeta((IPersistentMap)((Object)const__325));
        Var var98 = var97;
        var97.bindRoot(new core$abuts_QMARK_());
        Var var99 = const__326;
        var99.setMeta((IPersistentMap)((Object)const__329));
        Var var100 = var99;
        var99.bindRoot(new core$years_QMARK_());
        Var var101 = const__330;
        var101.setMeta((IPersistentMap)((Object)const__333));
        Var var102 = var101;
        var101.bindRoot(new core$months_QMARK_());
        Var var103 = const__334;
        var103.setMeta((IPersistentMap)((Object)const__337));
        Var var104 = var103;
        var103.bindRoot(new core$weeks_QMARK_());
        Var var105 = const__338;
        var105.setMeta((IPersistentMap)((Object)const__341));
        Var var106 = var105;
        var105.bindRoot(new core$days_QMARK_());
        Var var107 = const__342;
        var107.setMeta((IPersistentMap)((Object)const__345));
        Var var108 = var107;
        var107.bindRoot(new core$hours_QMARK_());
        Var var109 = const__346;
        var109.setMeta((IPersistentMap)((Object)const__349));
        Var var110 = var109;
        var109.bindRoot(new core$minutes_QMARK_());
        Var var111 = const__350;
        var111.setMeta((IPersistentMap)((Object)const__353));
        Var var112 = var111;
        var111.bindRoot(new core$seconds_QMARK_());
        Var var113 = const__354;
        var113.setMeta((IPersistentMap)((Object)const__357));
        Var var114 = var113;
        var113.bindRoot(new core$secs_QMARK_());
        Var var115 = const__358;
        var115.setMeta((IPersistentMap)((Object)const__361));
        Var var116 = var115;
        var115.bindRoot(new core$mins_ago());
        Var var117 = const__362;
        var117.setMeta((IPersistentMap)((Object)const__365));
        Var var118 = var117;
        var117.bindRoot(new core$first_day_of_the_month());
        Var var119 = const__366;
        var119.setMeta((IPersistentMap)((Object)const__369));
        Var var120 = var119;
        var119.bindRoot(new core$last_day_of_the_month());
        Var var121 = const__370;
        var121.setMeta((IPersistentMap)((Object)const__373));
        Var var122 = var121;
        var121.bindRoot(new core$number_of_days_in_the_month());
        Var var123 = const__374;
        var123.setMeta((IPersistentMap)((Object)const__377));
        Var var124 = var123;
        var123.bindRoot(new core$nth_day_of_the_month());
        Var var125 = const__378;
        var125.setMeta((IPersistentMap)((Object)const__381));
        Var var126 = var125;
        var125.bindRoot(new core$today_at());
        Var var127 = const__382;
        var127.setMeta((IPersistentMap)((Object)const__385));
        Var var128 = var127;
        var127.bindRoot(new core$do_at_STAR_());
        Var var129 = const__386;
        var129.setMeta((IPersistentMap)((Object)const__389));
        Var var130 = var129;
        var129.bindRoot(new core$do_at());
        const__386.setMacro();
        Object v157 = null;
        Var var131 = const__386;
        Var var132 = const__390;
        var132.setMeta((IPersistentMap)((Object)const__393));
        Var var133 = var132;
        var132.bindRoot(new core$floor());
        Var var134 = const__394;
        var134.setMeta((IPersistentMap)((Object)const__398));
        Var var135 = var134;
        var134.bindRoot(new core$when_available());
        const__394.setMacro();
        Object v163 = null;
        Var var136 = const__394;
        Object object23 = ((IFn)const__124.getRawRoot()).invoke(const__399, const__400.getRawRoot(), RT.mapUniqueKeys(const__401, new core$fn__19157()));
    }

    public static void __init0() {
        const__0 = RT.var("clojure.core", "in-ns");
        const__1 = (AFn)((Object)((IObj)Symbol.intern(null, "clj-time.core")).withMeta(RT.map(RT.keyword(null, "doc"), "The core namespace for date-time operations in the clj-time library.\n\n   Create a DateTime instance with date-time (or a LocalDateTime instance with local-date-time),\n   specifying the year, month, day, hour, minute, second, and millisecond:\n\n     => (date-time 1986 10 14 4 3 27 456)\n     #<DateTime 1986-10-14T04:03:27.456Z>\n\n     => (local-date-time 1986 10 14 4 3 27 456)\n     #<LocalDateTime 1986-10-14T04:03:27.456>\n\n   Less-significant fields can be omitted:\n\n     => (date-time 1986 10 14)\n     #<DateTime 1986-10-14T00:00:00.000Z>\n\n     => (local-date-time 1986 10 14)\n     #<LocalDateTime 1986-10-14T00:00:00.000>\n\n   Get the current time with (now) and the start of the Unix epoch with (epoch).\n\n   Once you have a date-time, use accessors like hour and second to access the\n   corresponding fields:\n\n     => (hour (date-time 1986 10 14 22))\n     22\n\n     => (hour (local-date-time 1986 10 14 22))\n     22\n\n   The date-time constructor always returns times in the UTC time zone. If you\n   want a time with the specified fields in a different time zone, use\n   from-time-zone:\n\n     => (from-time-zone (date-time 1986 10 22) (time-zone-for-offset -2))\n     #<DateTime 1986-10-22T00:00:00.000-02:00>\n\n   If on the other hand you want a given absolute instant in time in a\n   different time zone, use to-time-zone:\n\n     => (to-time-zone (date-time 1986 10 22) (time-zone-for-offset -2))\n     #<DateTime 1986-10-21T22:00:00.000-02:00>\n\n   In addition to time-zone-for-offset, you can use the time-zone-for-id and\n   default-time-zone functions and the utc Var to construct or get DateTimeZone\n   instances.\n\n   The functions after? and before? determine the relative position of two\n   DateTime instances:\n\n     => (after? (date-time 1986 10) (date-time 1986 9))\n     true\n\n     => (after? (local-date-time 1986 10) (local-date-time 1986 9))\n     true\n\n   Often you will want to find a date some amount of time from a given date. For\n   example, to find the time 1 month and 3 weeks from a given date-time:\n\n     => (plus (date-time 1986 10 14) (months 1) (weeks 3))\n     #<DateTime 1986-12-05T00:00:00.000Z>\n\n     => (plus (local-date-time 1986 10 14) (months 1) (weeks 3))\n     #<LocalDateTime 1986-12-05T00:00:00.000Z>\n\n   An Interval is used to represent the span of time between two DateTime\n   instances. Construct one using interval, then query them using within?,\n   overlaps?, and abuts?\n\n     => (within? (interval (date-time 1986) (date-time 1990))\n                 (date-time 1987))\n     true\n\n   To find the amount of time encompassed by an interval, use in-seconds and\n   in-minutes:\n\n     => (in-minutes (interval (date-time 1986 10 2) (date-time 1986 10 14)))\n     17280\n\n   The overlap function can be used to get an Interval representing the\n   overlap between two intervals:\n\n     => (overlap (t/interval (t/date-time 1986) (t/date-time 1990))\n                             (t/interval (t/date-time 1987) (t/date-time 1991)))\n     #<Interval 1987-01-01T00:00:00.000Z/1990-01-01T00:00:00.000Z>\n\n   Note that all functions in this namespace work with Joda objects or ints. If\n   you need to print or parse date-times, see clj-time.format. If you need to\n   coerce date-times to or from other types, see clj-time.coerce.")));
        const__2 = RT.keyword(null, "doc");
        const__3 = (AFn)((Object)RT.map(RT.keyword(null, "doc"), "The core namespace for date-time operations in the clj-time library.\n\n   Create a DateTime instance with date-time (or a LocalDateTime instance with local-date-time),\n   specifying the year, month, day, hour, minute, second, and millisecond:\n\n     => (date-time 1986 10 14 4 3 27 456)\n     #<DateTime 1986-10-14T04:03:27.456Z>\n\n     => (local-date-time 1986 10 14 4 3 27 456)\n     #<LocalDateTime 1986-10-14T04:03:27.456>\n\n   Less-significant fields can be omitted:\n\n     => (date-time 1986 10 14)\n     #<DateTime 1986-10-14T00:00:00.000Z>\n\n     => (local-date-time 1986 10 14)\n     #<LocalDateTime 1986-10-14T00:00:00.000>\n\n   Get the current time with (now) and the start of the Unix epoch with (epoch).\n\n   Once you have a date-time, use accessors like hour and second to access the\n   corresponding fields:\n\n     => (hour (date-time 1986 10 14 22))\n     22\n\n     => (hour (local-date-time 1986 10 14 22))\n     22\n\n   The date-time constructor always returns times in the UTC time zone. If you\n   want a time with the specified fields in a different time zone, use\n   from-time-zone:\n\n     => (from-time-zone (date-time 1986 10 22) (time-zone-for-offset -2))\n     #<DateTime 1986-10-22T00:00:00.000-02:00>\n\n   If on the other hand you want a given absolute instant in time in a\n   different time zone, use to-time-zone:\n\n     => (to-time-zone (date-time 1986 10 22) (time-zone-for-offset -2))\n     #<DateTime 1986-10-21T22:00:00.000-02:00>\n\n   In addition to time-zone-for-offset, you can use the time-zone-for-id and\n   default-time-zone functions and the utc Var to construct or get DateTimeZone\n   instances.\n\n   The functions after? and before? determine the relative position of two\n   DateTime instances:\n\n     => (after? (date-time 1986 10) (date-time 1986 9))\n     true\n\n     => (after? (local-date-time 1986 10) (local-date-time 1986 9))\n     true\n\n   Often you will want to find a date some amount of time from a given date. For\n   example, to find the time 1 month and 3 weeks from a given date-time:\n\n     => (plus (date-time 1986 10 14) (months 1) (weeks 3))\n     #<DateTime 1986-12-05T00:00:00.000Z>\n\n     => (plus (local-date-time 1986 10 14) (months 1) (weeks 3))\n     #<LocalDateTime 1986-12-05T00:00:00.000Z>\n\n   An Interval is used to represent the span of time between two DateTime\n   instances. Construct one using interval, then query them using within?,\n   overlaps?, and abuts?\n\n     => (within? (interval (date-time 1986) (date-time 1990))\n                 (date-time 1987))\n     true\n\n   To find the amount of time encompassed by an interval, use in-seconds and\n   in-minutes:\n\n     => (in-minutes (interval (date-time 1986 10 2) (date-time 1986 10 14)))\n     17280\n\n   The overlap function can be used to get an Interval representing the\n   overlap between two intervals:\n\n     => (overlap (t/interval (t/date-time 1986) (t/date-time 1990))\n                             (t/interval (t/date-time 1987) (t/date-time 1991)))\n     #<Interval 1987-01-01T00:00:00.000Z/1990-01-01T00:00:00.000Z>\n\n   Note that all functions in this namespace work with Joda objects or ints. If\n   you need to print or parse date-times, see clj-time.format. If you need to\n   coerce date-times to or from other types, see clj-time.coerce."));
        const__4 = Symbol.intern(null, "clojure.core");
        const__5 = RT.var("clj-time.core", "deprecated");
        const__13 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "message")))), RT.keyword(null, "line"), 99, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__14 = RT.classForName("clj_time.core.DateTimeProtocol");
        const__15 = RT.var("clojure.core", "alter-meta!");
        const__16 = RT.var("clj-time.core", "DateTimeProtocol");
        const__17 = RT.var("clojure.core", "assoc");
        const__18 = RT.var("clojure.core", "assert-same-protocol");
        const__19 = (ISeq)((Object)PersistentList.create(Arrays.asList(((IObj)Symbol.intern(null, "after?")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns true if ReadableDateTime 'this' is strictly after date/time 'that'.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "that")))))), ((IObj)Symbol.intern(null, "day")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the day of month component of the given date/time.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), ((IObj)Symbol.intern(null, "hour")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the hour of day component of the given date/time. A time of 12:01am will have an hour component of 0.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), ((IObj)Symbol.intern(null, "second")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the second of minute component of the given date/time.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), ((IObj)Symbol.intern(null, "day-of-week")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the day of week component of the given date/time. Monday is 1 and Sunday is 7", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), ((IObj)Symbol.intern(null, "plus-")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns a new date/time corresponding to the given date/time moved forwards by the given Period(s).", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this"), ((IObj)Symbol.intern(null, "period")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "ReadablePeriod")))))))), ((IObj)Symbol.intern(null, "last-day-of-the-month-")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns the last day of the month", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), ((IObj)Symbol.intern(null, "month")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the month component of the given date/time.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), ((IObj)Symbol.intern(null, "week-year")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns the the week based year of the given date/time.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), ((IObj)Symbol.intern(null, "equal?")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns true if ReadableDateTime 'this' is strictly equal to date/time 'that'.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "that")))))), ((IObj)Symbol.intern(null, "before?")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns true if ReadableDateTime 'this' is strictly before date/time 'that'.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "that")))))), ((IObj)Symbol.intern(null, "year")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the year component of the given date/time.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), ((IObj)Symbol.intern(null, "week-number-of-year")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns the week of the week based year of the given date/time", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), ((IObj)Symbol.intern(null, "minus-")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns a new date/time corresponding to the given date/time moved backwards by the given Period(s).", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this"), ((IObj)Symbol.intern(null, "period")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "ReadablePeriod")))))))), ((IObj)Symbol.intern(null, "sec")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the second of minute component of the given date/time.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), ((IObj)Symbol.intern(null, "first-day-of-the-month-")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns the first day of the month", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), ((IObj)Symbol.intern(null, "milli")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the millisecond of second component of the given date/time.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), ((IObj)Symbol.intern(null, "minute")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the minute of hour component of the given date/time.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))))));
        const__20 = RT.var("clojure.core", "alter-var-root");
        const__21 = RT.var("clojure.core", "merge");
        const__25 = (AFn)((Object)RT.map(RT.keyword(null, "on"), Symbol.intern(null, "clj_time.core.DateTimeProtocol"), RT.keyword(null, "on-interface"), RT.classForName("clj_time.core.DateTimeProtocol"), RT.keyword(null, "doc"), "Interface for various date time functions"));
        const__26 = RT.keyword(null, "sigs");
        const__27 = (AFn)((Object)RT.map(RT.keyword(null, "after?"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "after?")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns true if ReadableDateTime 'this' is strictly after date/time 'that'.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "that")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "that")))), RT.keyword(null, "doc"), "Returns true if ReadableDateTime 'this' is strictly after date/time 'that'."), RT.keyword(null, "day"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "day")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the day of month component of the given date/time.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the day of month component of the given date/time."), RT.keyword(null, "hour"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "hour")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the hour of day component of the given date/time. A time of 12:01am will have an hour component of 0.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the hour of day component of the given date/time. A time of 12:01am will have an hour component of 0."), RT.keyword(null, "second"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "second")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the second of minute component of the given date/time.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the second of minute component of the given date/time."), RT.keyword(null, "day-of-week"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "day-of-week")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the day of week component of the given date/time. Monday is 1 and Sunday is 7", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the day of week component of the given date/time. Monday is 1 and Sunday is 7"), RT.keyword(null, "plus-"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "plus-")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns a new date/time corresponding to the given date/time moved forwards by the given Period(s).", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this"), ((IObj)Symbol.intern(null, "period")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "ReadablePeriod")))))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this"), ((IObj)Symbol.intern(null, "period")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "ReadablePeriod")))))), RT.keyword(null, "doc"), "Returns a new date/time corresponding to the given date/time moved forwards by the given Period(s)."), RT.keyword(null, "last-day-of-the-month-"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "last-day-of-the-month-")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns the last day of the month", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Returns the last day of the month"), RT.keyword(null, "month"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "month")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the month component of the given date/time.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the month component of the given date/time."), RT.keyword(null, "week-year"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "week-year")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns the the week based year of the given date/time.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Returns the the week based year of the given date/time."), RT.keyword(null, "equal?"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "equal?")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns true if ReadableDateTime 'this' is strictly equal to date/time 'that'.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "that")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "that")))), RT.keyword(null, "doc"), "Returns true if ReadableDateTime 'this' is strictly equal to date/time 'that'."), RT.keyword(null, "before?"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "before?")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns true if ReadableDateTime 'this' is strictly before date/time 'that'.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "that")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "that")))), RT.keyword(null, "doc"), "Returns true if ReadableDateTime 'this' is strictly before date/time 'that'."), RT.keyword(null, "year"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "year")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the year component of the given date/time.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the year component of the given date/time."), RT.keyword(null, "week-number-of-year"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "week-number-of-year")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns the week of the week based year of the given date/time", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Returns the week of the week based year of the given date/time"), RT.keyword(null, "minus-"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "minus-")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns a new date/time corresponding to the given date/time moved backwards by the given Period(s).", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this"), ((IObj)Symbol.intern(null, "period")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "ReadablePeriod")))))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this"), ((IObj)Symbol.intern(null, "period")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "ReadablePeriod")))))), RT.keyword(null, "doc"), "Returns a new date/time corresponding to the given date/time moved backwards by the given Period(s)."), RT.keyword(null, "sec"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "sec")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the second of minute component of the given date/time.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the second of minute component of the given date/time."), RT.keyword(null, "first-day-of-the-month-"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "first-day-of-the-month-")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns the first day of the month", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Returns the first day of the month"), RT.keyword(null, "milli"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "milli")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the millisecond of second component of the given date/time.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the millisecond of second component of the given date/time."), RT.keyword(null, "minute"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "minute")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the minute of hour component of the given date/time.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the minute of hour component of the given date/time.")));
        const__28 = RT.keyword(null, "var");
        const__29 = RT.keyword(null, "method-map");
        const__30 = RT.keyword(null, "after?");
        const__31 = RT.keyword(null, "day");
        const__32 = RT.keyword(null, "hour");
        const__33 = RT.keyword(null, "second");
        const__34 = RT.keyword(null, "day-of-week");
        const__35 = RT.keyword(null, "plus-");
        const__36 = RT.keyword(null, "last-day-of-the-month-");
        const__37 = RT.keyword(null, "month");
        const__38 = RT.keyword(null, "week-year");
        const__39 = RT.keyword(null, "equal?");
        const__40 = RT.keyword(null, "before?");
        const__41 = RT.keyword(null, "year");
        const__42 = RT.keyword(null, "week-number-of-year");
        const__43 = RT.keyword(null, "minus-");
        const__44 = RT.keyword(null, "sec");
        const__45 = RT.keyword(null, "first-day-of-the-month-");
        const__46 = RT.keyword(null, "milli");
        const__47 = RT.keyword(null, "minute");
        const__48 = (AFn)((Object)RT.map(RT.keyword(null, "after?"), RT.keyword(null, "after?"), RT.keyword(null, "day"), RT.keyword(null, "day"), RT.keyword(null, "hour"), RT.keyword(null, "hour"), RT.keyword(null, "second"), RT.keyword(null, "second"), RT.keyword(null, "day-of-week"), RT.keyword(null, "day-of-week"), RT.keyword(null, "plus-"), RT.keyword(null, "plus-"), RT.keyword(null, "last-day-of-the-month-"), RT.keyword(null, "last-day-of-the-month-"), RT.keyword(null, "month"), RT.keyword(null, "month"), RT.keyword(null, "week-year"), RT.keyword(null, "week-year"), RT.keyword(null, "equal?"), RT.keyword(null, "equal?"), RT.keyword(null, "before?"), RT.keyword(null, "before?"), RT.keyword(null, "year"), RT.keyword(null, "year"), RT.keyword(null, "week-number-of-year"), RT.keyword(null, "week-number-of-year"), RT.keyword(null, "minus-"), RT.keyword(null, "minus-"), RT.keyword(null, "sec"), RT.keyword(null, "sec"), RT.keyword(null, "first-day-of-the-month-"), RT.keyword(null, "first-day-of-the-month-"), RT.keyword(null, "milli"), RT.keyword(null, "milli"), RT.keyword(null, "minute"), RT.keyword(null, "minute")));
        const__49 = RT.keyword(null, "method-builders");
        const__50 = RT.var("clojure.core", "intern");
        const__51 = RT.var("clojure.core", "*ns*");
        const__52 = RT.var("clojure.core", "with-meta");
        const__53 = (AFn)((Object)((IObj)Symbol.intern(null, "minus-")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns a new date/time corresponding to the given date/time moved backwards by the given Period(s).", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this"), ((IObj)Symbol.intern(null, "period")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "ReadablePeriod")))))))));
        const__54 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "minus-")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns a new date/time corresponding to the given date/time moved backwards by the given Period(s).", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this"), ((IObj)Symbol.intern(null, "period")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "ReadablePeriod")))))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this"), ((IObj)Symbol.intern(null, "period")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "ReadablePeriod")))))), RT.keyword(null, "doc"), "Returns a new date/time corresponding to the given date/time moved backwards by the given Period(s)."));
        const__55 = RT.keyword(null, "protocol");
        const__56 = (AFn)((Object)((IObj)Symbol.intern(null, "last-day-of-the-month-")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns the last day of the month", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))));
        const__57 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "last-day-of-the-month-")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns the last day of the month", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Returns the last day of the month"));
        const__58 = (AFn)((Object)((IObj)Symbol.intern(null, "hour")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the hour of day component of the given date/time. A time of 12:01am will have an hour component of 0.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))));
        const__59 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "hour")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the hour of day component of the given date/time. A time of 12:01am will have an hour component of 0.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the hour of day component of the given date/time. A time of 12:01am will have an hour component of 0."));
        const__60 = (AFn)((Object)((IObj)Symbol.intern(null, "sec")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the second of minute component of the given date/time.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))));
        const__61 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "sec")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the second of minute component of the given date/time.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the second of minute component of the given date/time."));
        const__62 = (AFn)((Object)((IObj)Symbol.intern(null, "month")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the month component of the given date/time.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))));
        const__63 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "month")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the month component of the given date/time.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the month component of the given date/time."));
        const__64 = (AFn)((Object)((IObj)Symbol.intern(null, "first-day-of-the-month-")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns the first day of the month", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))));
        const__65 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "first-day-of-the-month-")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns the first day of the month", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Returns the first day of the month"));
        const__66 = (AFn)((Object)((IObj)Symbol.intern(null, "before?")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns true if ReadableDateTime 'this' is strictly before date/time 'that'.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "that")))))));
        const__67 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "before?")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns true if ReadableDateTime 'this' is strictly before date/time 'that'.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "that")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "that")))), RT.keyword(null, "doc"), "Returns true if ReadableDateTime 'this' is strictly before date/time 'that'."));
        const__68 = (AFn)((Object)((IObj)Symbol.intern(null, "after?")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns true if ReadableDateTime 'this' is strictly after date/time 'that'.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "that")))))));
        const__69 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "after?")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns true if ReadableDateTime 'this' is strictly after date/time 'that'.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "that")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "that")))), RT.keyword(null, "doc"), "Returns true if ReadableDateTime 'this' is strictly after date/time 'that'."));
        const__70 = (AFn)((Object)((IObj)Symbol.intern(null, "week-year")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns the the week based year of the given date/time.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))));
        const__71 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "week-year")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns the the week based year of the given date/time.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Returns the the week based year of the given date/time."));
        const__72 = (AFn)((Object)((IObj)Symbol.intern(null, "day-of-week")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the day of week component of the given date/time. Monday is 1 and Sunday is 7", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))));
        const__73 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "day-of-week")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the day of week component of the given date/time. Monday is 1 and Sunday is 7", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the day of week component of the given date/time. Monday is 1 and Sunday is 7"));
        const__74 = (AFn)((Object)((IObj)Symbol.intern(null, "second")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the second of minute component of the given date/time.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))));
        const__75 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "second")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the second of minute component of the given date/time.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the second of minute component of the given date/time."));
        const__76 = (AFn)((Object)((IObj)Symbol.intern(null, "year")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the year component of the given date/time.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))));
        const__77 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "year")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the year component of the given date/time.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the year component of the given date/time."));
        const__78 = (AFn)((Object)((IObj)Symbol.intern(null, "week-number-of-year")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns the week of the week based year of the given date/time", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))));
        const__79 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "week-number-of-year")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns the week of the week based year of the given date/time", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Returns the week of the week based year of the given date/time"));
        const__80 = (AFn)((Object)((IObj)Symbol.intern(null, "minute")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the minute of hour component of the given date/time.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))));
        const__81 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "minute")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the minute of hour component of the given date/time.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the minute of hour component of the given date/time."));
        const__82 = (AFn)((Object)((IObj)Symbol.intern(null, "plus-")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns a new date/time corresponding to the given date/time moved forwards by the given Period(s).", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this"), ((IObj)Symbol.intern(null, "period")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "ReadablePeriod")))))))));
        const__83 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "plus-")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns a new date/time corresponding to the given date/time moved forwards by the given Period(s).", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this"), ((IObj)Symbol.intern(null, "period")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "ReadablePeriod")))))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this"), ((IObj)Symbol.intern(null, "period")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "ReadablePeriod")))))), RT.keyword(null, "doc"), "Returns a new date/time corresponding to the given date/time moved forwards by the given Period(s)."));
        const__84 = (AFn)((Object)((IObj)Symbol.intern(null, "equal?")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns true if ReadableDateTime 'this' is strictly equal to date/time 'that'.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "that")))))));
        const__85 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "equal?")).withMeta(RT.map(RT.keyword(null, "doc"), "Returns true if ReadableDateTime 'this' is strictly equal to date/time 'that'.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "that")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "that")))), RT.keyword(null, "doc"), "Returns true if ReadableDateTime 'this' is strictly equal to date/time 'that'."));
        const__86 = (AFn)((Object)((IObj)Symbol.intern(null, "day")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the day of month component of the given date/time.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))));
        const__87 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "day")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the day of month component of the given date/time.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the day of month component of the given date/time."));
        const__88 = (AFn)((Object)((IObj)Symbol.intern(null, "milli")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the millisecond of second component of the given date/time.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))));
        const__89 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "milli")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the millisecond of second component of the given date/time.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the millisecond of second component of the given date/time."));
        const__90 = RT.var("clojure.core", "-reset-methods");
        const__91 = Symbol.intern(null, "DateTimeProtocol");
        const__92 = RT.classForName("clj_time.core.InTimeUnitProtocol");
        const__93 = RT.var("clj-time.core", "InTimeUnitProtocol");
        const__94 = (ISeq)((Object)PersistentList.create(Arrays.asList(((IObj)Symbol.intern(null, "in-millis")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the time in milliseconds.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), ((IObj)Symbol.intern(null, "in-seconds")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the time in seconds.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), ((IObj)Symbol.intern(null, "in-minutes")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the time in minutes.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), ((IObj)Symbol.intern(null, "in-hours")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the time in hours.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), ((IObj)Symbol.intern(null, "in-days")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the time in days.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), ((IObj)Symbol.intern(null, "in-weeks")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the time in weeks", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), ((IObj)Symbol.intern(null, "in-months")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the time in months", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), ((IObj)Symbol.intern(null, "in-years")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the time in years", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))))));
        const__96 = (AFn)((Object)RT.map(RT.keyword(null, "on"), Symbol.intern(null, "clj_time.core.InTimeUnitProtocol"), RT.keyword(null, "on-interface"), RT.classForName("clj_time.core.InTimeUnitProtocol"), RT.keyword(null, "doc"), "Interface for in-<time unit> functions"));
        const__97 = (AFn)((Object)RT.map(RT.keyword(null, "in-millis"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "in-millis")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the time in milliseconds.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the time in milliseconds."), RT.keyword(null, "in-seconds"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "in-seconds")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the time in seconds.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the time in seconds."), RT.keyword(null, "in-minutes"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "in-minutes")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the time in minutes.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the time in minutes."), RT.keyword(null, "in-hours"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "in-hours")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the time in hours.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the time in hours."), RT.keyword(null, "in-days"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "in-days")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the time in days.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the time in days."), RT.keyword(null, "in-weeks"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "in-weeks")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the time in weeks", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the time in weeks"), RT.keyword(null, "in-months"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "in-months")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the time in months", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the time in months"), RT.keyword(null, "in-years"), RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "in-years")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the time in years", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the time in years")));
        const__98 = RT.keyword(null, "in-seconds");
        const__99 = RT.keyword(null, "in-minutes");
    }

    public static void __init1() {
        const__100 = RT.keyword(null, "in-days");
        const__101 = RT.keyword(null, "in-hours");
        const__102 = RT.keyword(null, "in-years");
        const__103 = RT.keyword(null, "in-millis");
        const__104 = RT.keyword(null, "in-months");
        const__105 = RT.keyword(null, "in-weeks");
        const__106 = (AFn)((Object)RT.map(RT.keyword(null, "in-seconds"), RT.keyword(null, "in-seconds"), RT.keyword(null, "in-minutes"), RT.keyword(null, "in-minutes"), RT.keyword(null, "in-days"), RT.keyword(null, "in-days"), RT.keyword(null, "in-hours"), RT.keyword(null, "in-hours"), RT.keyword(null, "in-years"), RT.keyword(null, "in-years"), RT.keyword(null, "in-millis"), RT.keyword(null, "in-millis"), RT.keyword(null, "in-months"), RT.keyword(null, "in-months"), RT.keyword(null, "in-weeks"), RT.keyword(null, "in-weeks")));
        const__107 = (AFn)((Object)((IObj)Symbol.intern(null, "in-days")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the time in days.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))));
        const__108 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "in-days")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the time in days.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the time in days."));
        const__109 = (AFn)((Object)((IObj)Symbol.intern(null, "in-years")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the time in years", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))));
        const__110 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "in-years")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the time in years", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the time in years"));
        const__111 = (AFn)((Object)((IObj)Symbol.intern(null, "in-millis")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the time in milliseconds.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))));
        const__112 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "in-millis")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the time in milliseconds.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the time in milliseconds."));
        const__113 = (AFn)((Object)((IObj)Symbol.intern(null, "in-seconds")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the time in seconds.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))));
        const__114 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "in-seconds")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the time in seconds.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the time in seconds."));
        const__115 = (AFn)((Object)((IObj)Symbol.intern(null, "in-months")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the time in months", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))));
        const__116 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "in-months")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the time in months", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the time in months"));
        const__117 = (AFn)((Object)((IObj)Symbol.intern(null, "in-hours")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the time in hours.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))));
        const__118 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "in-hours")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the time in hours.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the time in hours."));
        const__119 = (AFn)((Object)((IObj)Symbol.intern(null, "in-minutes")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the time in minutes.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))));
        const__120 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "in-minutes")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the time in minutes.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the time in minutes."));
        const__121 = (AFn)((Object)((IObj)Symbol.intern(null, "in-weeks")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the time in weeks", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))));
        const__122 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), null, RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "in-weeks")).withMeta(RT.map(RT.keyword(null, "doc"), "Return the time in weeks", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))))), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "this")))), RT.keyword(null, "doc"), "Return the time in weeks"));
        const__123 = Symbol.intern(null, "InTimeUnitProtocol");
        const__124 = RT.var("clojure.core", "extend");
        const__125 = RT.classForName("org.joda.time.DateTime");
        const__126 = RT.classForName("org.joda.time.DateMidnight");
        const__127 = RT.classForName("org.joda.time.LocalDateTime");
        const__128 = RT.classForName("org.joda.time.YearMonth");
        const__129 = RT.classForName("org.joda.time.LocalDate");
        const__130 = RT.classForName("org.joda.time.LocalTime");
        const__131 = RT.var("clj-time.core", "utc");
        const__133 = (AFn)((Object)RT.map(RT.keyword(null, "doc"), "DateTimeZone for UTC.", RT.keyword(null, "line"), 254, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__134 = RT.var("clj-time.core", "now");
        const__137 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create())), RT.keyword(null, "doc"), "Returns a DateTime for the current instant in the UTC time zone.", RT.keyword(null, "line"), 258, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__138 = RT.var("clj-time.core", "time-now");
        const__141 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create())), RT.keyword(null, "doc"), "Returns a LocalTime for the current instant without date or time zone\n  using ISOChronology in the current time zone.", RT.keyword(null, "line"), 263, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__142 = RT.var("clj-time.core", "today-at-midnight");
        const__146 = (AFn)((Object)RT.map(RT.keyword(null, "deprecated"), "0.12.0", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(), Tuple.create(((IObj)Symbol.intern(null, "tz")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "DateTimeZone")))))), RT.keyword(null, "doc"), "DEPRECATED: Please use with-time-at-start-of-day instead. See http://goo.gl/nQCmKd\n  Returns a DateMidnight for today at midnight in the UTC time zone.", RT.keyword(null, "line"), 269, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__147 = RT.var("clj-time.core", "with-time-at-start-of-day");
        const__151 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), RT.classForName("org.joda.time.DateTime"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(((IObj)Symbol.intern(null, "dt")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "DateTime")))))), RT.keyword(null, "doc"), "Returns a DateTime representing the start of the day. Normally midnight,\n  but not always true, as in some time zones with daylight savings.", RT.keyword(null, "line"), 277, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__152 = RT.var("clj-time.core", "epoch");
        const__155 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create())), RT.keyword(null, "doc"), "Returns a DateTime for the beginning of the Unix epoch in the UTC time zone.", RT.keyword(null, "line"), 283, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__156 = RT.var("clj-time.core", "date-midnight");
        const__159 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "year")), Tuple.create(((IObj)Symbol.intern(null, "year")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long"))), ((IObj)Symbol.intern(null, "month")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))), Tuple.create(((IObj)Symbol.intern(null, "year")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Long"))), ((IObj)Symbol.intern(null, "month")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Long"))), ((IObj)Symbol.intern(null, "day")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Long")))))), RT.keyword(null, "doc"), "Constructs and returns a new DateMidnight in UTC.\n   Specify the year, month of year, day of month. Note that month and day are\n   1-indexed. Any number of least-significant components can be ommited, in which case\n   they will default to 1.", RT.keyword(null, "line"), 288, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__160 = RT.var("clj-time.core", "min-date");
        const__163 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "dt"), Symbol.intern(null, "&"), Symbol.intern(null, "dts")))), RT.keyword(null, "doc"), "Minimum of the provided DateTimes.", RT.keyword(null, "line"), 300, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__164 = RT.var("clj-time.core", "max-date");
        const__167 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "dt"), Symbol.intern(null, "&"), Symbol.intern(null, "dts")))), RT.keyword(null, "doc"), "Maximum of the provided DateTimes.", RT.keyword(null, "line"), 305, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__168 = RT.var("clj-time.core", "date-time");
        const__171 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), RT.classForName("org.joda.time.DateTime"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "year")), Tuple.create(Symbol.intern(null, "year"), Symbol.intern(null, "month")), Tuple.create(Symbol.intern(null, "year"), Symbol.intern(null, "month"), Symbol.intern(null, "day")), Tuple.create(Symbol.intern(null, "year"), Symbol.intern(null, "month"), Symbol.intern(null, "day"), Symbol.intern(null, "hour")), Tuple.create(Symbol.intern(null, "year"), Symbol.intern(null, "month"), Symbol.intern(null, "day"), Symbol.intern(null, "hour"), Symbol.intern(null, "minute")), Tuple.create(Symbol.intern(null, "year"), Symbol.intern(null, "month"), Symbol.intern(null, "day"), Symbol.intern(null, "hour"), Symbol.intern(null, "minute"), Symbol.intern(null, "second")), RT.vector(((IObj)Symbol.intern(null, "year")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Integer"))), ((IObj)Symbol.intern(null, "month")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Integer"))), ((IObj)Symbol.intern(null, "day")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Integer"))), ((IObj)Symbol.intern(null, "hour")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Integer"))), ((IObj)Symbol.intern(null, "minute")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Integer"))), ((IObj)Symbol.intern(null, "second")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Integer"))), ((IObj)Symbol.intern(null, "millis")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Integer")))))), RT.keyword(null, "doc"), "Constructs and returns a new DateTime in UTC.\n   Specify the year, month of year, day of month, hour of day, minute of hour,\n   second of minute, and millisecond of second. Note that month and day are\n   1-indexed while hour, second, minute, and millis are 0-indexed.\n   Any number of least-significant components can be ommited, in which case\n   they will default to 1 or 0 as appropriate.", RT.keyword(null, "line"), 310, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__172 = RT.var("clj-time.core", "local-date-time");
        const__175 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), RT.classForName("org.joda.time.LocalDateTime"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "year")), Tuple.create(Symbol.intern(null, "year"), Symbol.intern(null, "month")), Tuple.create(Symbol.intern(null, "year"), Symbol.intern(null, "month"), Symbol.intern(null, "day")), Tuple.create(Symbol.intern(null, "year"), Symbol.intern(null, "month"), Symbol.intern(null, "day"), Symbol.intern(null, "hour")), Tuple.create(Symbol.intern(null, "year"), Symbol.intern(null, "month"), Symbol.intern(null, "day"), Symbol.intern(null, "hour"), Symbol.intern(null, "minute")), Tuple.create(Symbol.intern(null, "year"), Symbol.intern(null, "month"), Symbol.intern(null, "day"), Symbol.intern(null, "hour"), Symbol.intern(null, "minute"), Symbol.intern(null, "second")), RT.vector(((IObj)Symbol.intern(null, "year")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Integer"))), ((IObj)Symbol.intern(null, "month")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Integer"))), ((IObj)Symbol.intern(null, "day")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Integer"))), ((IObj)Symbol.intern(null, "hour")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Integer"))), ((IObj)Symbol.intern(null, "minute")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Integer"))), ((IObj)Symbol.intern(null, "second")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Integer"))), ((IObj)Symbol.intern(null, "millis")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Integer")))))), RT.keyword(null, "doc"), "Constructs and returns a new LocalDateTime.\n   Specify the year, month of year, day of month, hour of day, minute of hour,\n   second of minute, and millisecond of second. Note that month and day are\n   1-indexed while hour, second, minute, and millis are 0-indexed.\n   Any number of least-significant components can be ommited, in which case\n   they will default to 1 or 0 as appropriate.", RT.keyword(null, "line"), 333, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__176 = RT.var("clj-time.core", "year-month");
        const__179 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), RT.classForName("org.joda.time.YearMonth"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "year")), Tuple.create(((IObj)Symbol.intern(null, "year")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Integer"))), ((IObj)Symbol.intern(null, "month")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Integer")))))), RT.keyword(null, "doc"), "Constructs and returns a new YearMonth.\n   Specify the year and month of year. Month is 1-indexed and defaults\n   to January (1).", RT.keyword(null, "line"), 356, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__180 = RT.var("clj-time.core", "local-date");
        const__183 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), RT.classForName("org.joda.time.LocalDate"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(((IObj)Symbol.intern(null, "year")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Integer"))), ((IObj)Symbol.intern(null, "month")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Integer"))), ((IObj)Symbol.intern(null, "day")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Integer")))))), RT.keyword(null, "doc"), "Constructs and returns a new LocalDate.\n   Specify the year, month, and day. Does not deal with timezones.", RT.keyword(null, "line"), 365, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__184 = RT.var("clj-time.core", "local-time");
        const__187 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), RT.classForName("org.joda.time.LocalTime"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "hour")), Tuple.create(Symbol.intern(null, "hour"), Symbol.intern(null, "minute")), Tuple.create(Symbol.intern(null, "hour"), Symbol.intern(null, "minute"), Symbol.intern(null, "second")), Tuple.create(((IObj)Symbol.intern(null, "hour")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Integer"))), ((IObj)Symbol.intern(null, "minute")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Integer"))), ((IObj)Symbol.intern(null, "second")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Integer"))), ((IObj)Symbol.intern(null, "millis")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Integer")))))), RT.keyword(null, "doc"), "Constructs and returns a new LocalTime.\n   Specify the hour of day, minute of hour, second of minute, and millisecond of second.\n   Any number of least-significant components can be ommited, in which case\n   they will default to 1 or 0 as appropriate.", RT.keyword(null, "line"), 371, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__188 = RT.var("clj-time.core", "today");
        const__191 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), RT.classForName("org.joda.time.LocalDate"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create())), RT.keyword(null, "doc"), "Constructs and returns a new LocalDate representing today's date.\n   LocalDate objects do not deal with timezones at all.", RT.keyword(null, "line"), 386, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__192 = RT.var("clj-time.core", "time-zone-for-offset");
        const__195 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "hours")), Tuple.create(Symbol.intern(null, "hours"), Symbol.intern(null, "minutes")))), RT.keyword(null, "doc"), "Returns a DateTimeZone for the given offset, specified either in hours or\n   hours and minutes.", RT.keyword(null, "line"), 392, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__196 = RT.var("clj-time.core", "time-zone-for-id");
        const__199 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(((IObj)Symbol.intern(null, "id")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "String")))))), RT.keyword(null, "doc"), "Returns a DateTimeZone for the given ID, which must be in long form, e.g.\n   'America/Matamoros'.", RT.keyword(null, "line"), 400, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
    }

    public static void __init2() {
        const__200 = RT.var("clj-time.core", "available-ids");
        const__203 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create())), RT.keyword(null, "doc"), "Returns a set of available IDs for use with time-zone-for-id.", RT.keyword(null, "line"), 406, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__204 = RT.var("clj-time.core", "default-time-zone");
        const__207 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create())), RT.keyword(null, "doc"), "Returns the default DateTimeZone for the current environment.", RT.keyword(null, "line"), 411, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__208 = RT.var("clj-time.core", "to-time-zone");
        const__211 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), RT.classForName("org.joda.time.DateTime"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(((IObj)Symbol.intern(null, "dt")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "DateTime"))), ((IObj)Symbol.intern(null, "tz")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "DateTimeZone")))))), RT.keyword(null, "doc"), "Returns a new ReadableDateTime corresponding to the same absolute instant in time as\n   the given ReadableDateTime, but with calendar fields corresponding to the given\n   TimeZone.", RT.keyword(null, "line"), 416, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__212 = RT.var("clj-time.core", "from-time-zone");
        const__215 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), RT.classForName("org.joda.time.DateTime"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(((IObj)Symbol.intern(null, "dt")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "DateTime"))), ((IObj)Symbol.intern(null, "tz")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "DateTimeZone")))))), RT.keyword(null, "doc"), "Returns a new ReadableDateTime corresponding to the same point in calendar time as\n   the given ReadableDateTime, but for a correspondingly different absolute instant in\n   time.", RT.keyword(null, "line"), 424, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__216 = RT.var("clj-time.core", "years");
        const__219 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(), Tuple.create(((IObj)Symbol.intern(null, "n")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Integer")))))), RT.keyword(null, "doc"), "Given a number, returns a Period representing that many years.\n   Without an argument, returns a PeriodType representing only years.", RT.keyword(null, "line"), 432, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__220 = RT.var("clj-time.core", "months");
        const__223 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(), Tuple.create(((IObj)Symbol.intern(null, "n")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Integer")))))), RT.keyword(null, "doc"), "Given a number, returns a Period representing that many months.\n   Without an argument, returns a PeriodType representing only months.", RT.keyword(null, "line"), 440, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__224 = RT.var("clj-time.core", "weeks");
        const__227 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(), Tuple.create(((IObj)Symbol.intern(null, "n")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Integer")))))), RT.keyword(null, "doc"), "Given a number, returns a Period representing that many weeks.\n   Without an argument, returns a PeriodType representing only weeks.", RT.keyword(null, "line"), 448, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__228 = RT.var("clj-time.core", "days");
        const__231 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(), Tuple.create(((IObj)Symbol.intern(null, "n")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Integer")))))), RT.keyword(null, "doc"), "Given a number, returns a Period representing that many days.\n   Without an argument, returns a PeriodType representing only days.", RT.keyword(null, "line"), 456, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__232 = RT.var("clj-time.core", "hours");
        const__235 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(), Tuple.create(((IObj)Symbol.intern(null, "n")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Integer")))))), RT.keyword(null, "doc"), "Given a number, returns a Period representing that many hours.\n   Without an argument, returns a PeriodType representing only hours.", RT.keyword(null, "line"), 464, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__236 = RT.var("clj-time.core", "minutes");
        const__239 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(), Tuple.create(((IObj)Symbol.intern(null, "n")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Integer")))))), RT.keyword(null, "doc"), "Given a number, returns a Period representing that many minutes.\n   Without an argument, returns a PeriodType representing only minutes.", RT.keyword(null, "line"), 472, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__240 = RT.var("clj-time.core", "seconds");
        const__243 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(), Tuple.create(((IObj)Symbol.intern(null, "n")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Integer")))))), RT.keyword(null, "doc"), "Given a number, returns a Period representing that many seconds.\n   Without an argument, returns a PeriodType representing only seconds.", RT.keyword(null, "line"), 480, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__244 = RT.classForName("org.joda.time.Interval");
        const__245 = RT.classForName("org.joda.time.ReadablePeriod");
        const__246 = RT.var("clj-time.core", "in-msecs");
        const__249 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(((IObj)Symbol.intern(null, "in")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Interval")))))), RT.keyword(null, "doc"), "DEPRECATED: Returns the number of milliseconds in the given Interval.", RT.keyword(null, "deprecated"), "0.6.0", RT.keyword(null, "line"), 520, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__250 = RT.var("clj-time.core", "in-secs");
        const__253 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(((IObj)Symbol.intern(null, "in")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Interval")))))), RT.keyword(null, "doc"), "DEPRECATED: Returns the number of standard seconds in the given Interval.", RT.keyword(null, "deprecated"), "0.6.0", RT.keyword(null, "line"), 527, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__254 = RT.var("clj-time.core", "secs");
        const__257 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(), Tuple.create(((IObj)Symbol.intern(null, "n")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Integer")))))), RT.keyword(null, "doc"), "DEPRECATED", RT.keyword(null, "deprecated"), "0.6.0", RT.keyword(null, "line"), 534, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__258 = RT.var("clj-time.core", "millis");
        const__261 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(), Tuple.create(((IObj)Symbol.intern(null, "n")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Integer")))))), RT.keyword(null, "doc"), "Given a number, returns a Period representing that many milliseconds.\n   Without an argument, returns a PeriodType representing only milliseconds.", RT.keyword(null, "line"), 544, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__262 = RT.var("clj-time.core", "plus");
        const__265 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "dt"), ((IObj)Symbol.intern(null, "p")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "ReadablePeriod")))), Tuple.create(Symbol.intern(null, "dt"), Symbol.intern(null, "p"), Symbol.intern(null, "&"), Symbol.intern(null, "ps")))), RT.keyword(null, "doc"), "Returns a new date/time corresponding to the given date/time moved forwards by\n   the given Period(s).", RT.keyword(null, "line"), 552, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__266 = RT.var("clj-time.core", "minus");
        const__269 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "dt"), ((IObj)Symbol.intern(null, "p")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "ReadablePeriod")))), Tuple.create(Symbol.intern(null, "dt"), Symbol.intern(null, "p"), Symbol.intern(null, "&"), Symbol.intern(null, "ps")))), RT.keyword(null, "doc"), "Returns a new date/time object corresponding to the given date/time moved backwards by\n   the given Period(s).", RT.keyword(null, "line"), 560, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__270 = RT.var("clj-time.core", "ago");
        const__273 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(((IObj)Symbol.intern(null, "period")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Period")))))), RT.keyword(null, "doc"), "Returns a DateTime a supplied period before the present.\n  e.g. (-> 5 years ago)", RT.keyword(null, "line"), 568, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__274 = RT.var("clj-time.core", "yesterday");
        const__277 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create())), RT.keyword(null, "doc"), "Returns a DateTime for yesterday relative to now", RT.keyword(null, "line"), 574, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__278 = RT.var("clj-time.core", "from-now");
        const__281 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(((IObj)Symbol.intern(null, "period")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Period")))))), RT.keyword(null, "doc"), "Returns a DateTime a supplied period after the present.\n  e.g. (-> 30 minutes from-now)", RT.keyword(null, "line"), 579, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__282 = RT.var("clj-time.core", "earliest");
        const__285 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(((IObj)Symbol.intern(null, "dt1")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "ReadableInstant"))), ((IObj)Symbol.intern(null, "dt2")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "ReadableInstant")))), Tuple.create(Symbol.intern(null, "dts")))), RT.keyword(null, "doc"), "Returns the earliest of the supplied DateTimes", RT.keyword(null, "line"), 585, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__286 = RT.var("clj-time.core", "latest");
        const__289 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(((IObj)Symbol.intern(null, "dt1")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "ReadableInstant"))), ((IObj)Symbol.intern(null, "dt2")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "ReadableInstant")))), Tuple.create(Symbol.intern(null, "dts")))), RT.keyword(null, "doc"), "Returns the latest of the supplied DateTimes", RT.keyword(null, "line"), 593, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__290 = RT.var("clj-time.core", "interval");
        const__293 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(((IObj)Symbol.intern(null, "dt-a")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "ReadableDateTime"))), ((IObj)Symbol.intern(null, "dt-b")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "ReadableDateTime")))))), RT.keyword(null, "doc"), "Returns an interval representing the span between the two given ReadableDateTimes.\n   Note that intervals are closed on the left and open on the right.", RT.keyword(null, "line"), 601, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__294 = RT.var("clj-time.core", "start");
        const__297 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(((IObj)Symbol.intern(null, "in")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Interval")))))), RT.keyword(null, "doc"), "Returns the start DateTime of an Interval.", RT.keyword(null, "line"), 607, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__298 = RT.var("clj-time.core", "end");
    }

    public static void __init3() {
        const__301 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(((IObj)Symbol.intern(null, "in")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Interval")))))), RT.keyword(null, "doc"), "Returns the end DateTime of an Interval.", RT.keyword(null, "line"), 612, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__302 = RT.var("clj-time.core", "extend");
        const__305 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(((IObj)Symbol.intern(null, "in")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Interval"))), Symbol.intern(null, "&"), Symbol.intern(null, "by")))), RT.keyword(null, "doc"), "Returns an Interval with an end ReadableDateTime the specified Period after the end\n   of the given Interval", RT.keyword(null, "line"), 617, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__306 = RT.var("clj-time.core", "adjust");
        const__309 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(((IObj)Symbol.intern(null, "in")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Interval"))), Symbol.intern(null, "&"), Symbol.intern(null, "by")))), RT.keyword(null, "doc"), "Returns an Interval with the start and end adjusted by the specified Periods.", RT.keyword(null, "line"), 623, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__310 = RT.var("clj-time.core", "within?");
        const__313 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(((IObj)Symbol.intern(null, "i")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Interval"))), ((IObj)Symbol.intern(null, "dt")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "ReadableDateTime")))), Tuple.create(((IObj)Symbol.intern(null, "start")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "ReadablePartial"))), ((IObj)Symbol.intern(null, "end")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "ReadablePartial"))), ((IObj)Symbol.intern(null, "test")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "ReadablePartial")))))), RT.keyword(null, "doc"), "With 2 arguments: Returns true if the given Interval contains the given\n   ReadableDateTime. Note that if the ReadableDateTime is exactly equal to the\n   end of the interval, this function returns false.\n   With 3 arguments: Returns true if the start ReadablePartial is\n   equal to or before and the end ReadablePartial is equal to or after the test\n   ReadablePartial.", RT.keyword(null, "line"), 634, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__314 = RT.var("clj-time.core", "overlaps?");
        const__317 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(((IObj)Symbol.intern(null, "i-a")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Interval"))), ((IObj)Symbol.intern(null, "i-b")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Interval")))), Tuple.create(((IObj)Symbol.intern(null, "start-a")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "ReadablePartial"))), ((IObj)Symbol.intern(null, "end-a")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "ReadablePartial"))), ((IObj)Symbol.intern(null, "start-b")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "ReadablePartial"))), ((IObj)Symbol.intern(null, "end-b")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "ReadablePartial")))))), RT.keyword(null, "doc"), "With 2 arguments: Returns true of the two given Intervals overlap.\n   Note that intervals that satisfy abuts? do not satisfy overlaps?\n   With 4 arguments: Returns true if the range specified by start-a and end-a\n   overlaps with the range specified by start-b and end-b.", RT.keyword(null, "line"), 648, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__318 = RT.var("clj-time.core", "overlap");
        const__321 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(((IObj)Symbol.intern(null, "i-a")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Interval"))), ((IObj)Symbol.intern(null, "i-b")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Interval")))))), RT.keyword(null, "doc"), "Returns an Interval representing the overlap of the specified Intervals.\n   Returns nil if the Intervals do not overlap.\n   The first argument must not be nil.\n   If the second argument is nil then the overlap of the first argument\n   and a zero duration interval with both start and end times equal to the\n   current time is returned.", RT.keyword(null, "line"), 661, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__322 = RT.var("clj-time.core", "abuts?");
        const__325 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(((IObj)Symbol.intern(null, "i-a")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Interval"))), ((IObj)Symbol.intern(null, "i-b")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "Interval")))))), RT.keyword(null, "doc"), "Returns true if Interval i-a abuts i-b, i.e. then end of i-a is exactly the\n   beginning of i-b.", RT.keyword(null, "line"), 676, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__326 = RT.var("clj-time.core", "years?");
        const__329 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "val")))), RT.keyword(null, "doc"), "Returns true if the given value is an instance of Years", RT.keyword(null, "line"), 682, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__330 = RT.var("clj-time.core", "months?");
        const__333 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "val")))), RT.keyword(null, "doc"), "Returns true if the given value is an instance of Months", RT.keyword(null, "line"), 687, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__334 = RT.var("clj-time.core", "weeks?");
        const__337 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "val")))), RT.keyword(null, "doc"), "Returns true if the given value is an instance of Weeks", RT.keyword(null, "line"), 692, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__338 = RT.var("clj-time.core", "days?");
        const__341 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "val")))), RT.keyword(null, "doc"), "Returns true if the given value is an instance of Days", RT.keyword(null, "line"), 697, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__342 = RT.var("clj-time.core", "hours?");
        const__345 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "val")))), RT.keyword(null, "doc"), "Returns true if the given value is an instance of Hours", RT.keyword(null, "line"), 702, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__346 = RT.var("clj-time.core", "minutes?");
        const__349 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "val")))), RT.keyword(null, "doc"), "Returns true if the given value is an instance of Minutes", RT.keyword(null, "line"), 707, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__350 = RT.var("clj-time.core", "seconds?");
        const__353 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "val")))), RT.keyword(null, "doc"), "Returns true if the given value is an instance of Seconds", RT.keyword(null, "line"), 712, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__354 = RT.var("clj-time.core", "secs?");
        const__357 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "val")))), RT.keyword(null, "doc"), "DEPRECATED", RT.keyword(null, "deprecated"), "0.6.0", RT.keyword(null, "line"), 717, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__358 = RT.var("clj-time.core", "mins-ago");
        const__361 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "d")))), RT.keyword(null, "line"), 724, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__362 = RT.var("clj-time.core", "first-day-of-the-month");
        const__365 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(((IObj)Symbol.intern(null, "year")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long"))), ((IObj)Symbol.intern(null, "month")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))), Tuple.create(Symbol.intern(null, "dt")))), RT.keyword(null, "line"), 728, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__366 = RT.var("clj-time.core", "last-day-of-the-month");
        const__369 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(((IObj)Symbol.intern(null, "year")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long"))), ((IObj)Symbol.intern(null, "month")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))), Tuple.create(Symbol.intern(null, "dt")))), RT.keyword(null, "line"), 734, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__370 = RT.var("clj-time.core", "number-of-days-in-the-month");
        const__373 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(((IObj)((Object)Tuple.create(((IObj)Symbol.intern(null, "dt")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "DateTime")))))).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long"))), ((IObj)((Object)Tuple.create(((IObj)Symbol.intern(null, "year")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long"))), ((IObj)Symbol.intern(null, "month")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))))).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long"))))), RT.keyword(null, "line"), 740, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__374 = RT.var("clj-time.core", "nth-day-of-the-month");
        const__377 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(((IObj)Symbol.intern(null, "year")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long"))), ((IObj)Symbol.intern(null, "month")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long"))), ((IObj)Symbol.intern(null, "n")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))), Tuple.create(((IObj)Symbol.intern(null, "dt")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "DateTime"))), ((IObj)Symbol.intern(null, "n")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))))), RT.keyword(null, "doc"), "Returns the nth day of the month.", RT.keyword(null, "line"), 746, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__378 = RT.var("clj-time.core", "today-at");
        const__381 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), RT.classForName("org.joda.time.DateTime"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(((IObj)Symbol.intern(null, "hours")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long"))), ((IObj)Symbol.intern(null, "minutes")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long"))), ((IObj)Symbol.intern(null, "seconds")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long"))), ((IObj)Symbol.intern(null, "millis")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))), Tuple.create(((IObj)Symbol.intern(null, "hours")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long"))), ((IObj)Symbol.intern(null, "minutes")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long"))), ((IObj)Symbol.intern(null, "seconds")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))), Tuple.create(((IObj)Symbol.intern(null, "hours")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long"))), ((IObj)Symbol.intern(null, "minutes")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))))), RT.keyword(null, "line"), 754, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__382 = RT.var("clj-time.core", "do-at*");
        const__385 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(((IObj)Symbol.intern(null, "base-date-time")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "BaseDateTime"))), Symbol.intern(null, "body-fn")))), RT.keyword(null, "line"), 767, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__386 = RT.var("clj-time.core", "do-at");
        const__389 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(((IObj)Symbol.intern(null, "base-date-time")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "BaseDateTime"))), Symbol.intern(null, "&"), Symbol.intern(null, "body")))), RT.keyword(null, "doc"), "Like clojure.core/do except evalautes the expression at the given date-time", RT.keyword(null, "line"), 774, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__390 = RT.var("clj-time.core", "floor");
        const__393 = (AFn)((Object)RT.map(RT.keyword(null, "tag"), RT.classForName("org.joda.time.DateTime"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(((IObj)Symbol.intern(null, "dt")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "DateTime"))), Symbol.intern(null, "dt-fn")))), RT.keyword(null, "doc"), "Floors the given date-time dt to the given time unit dt-fn,\n  e.g. (floor (now) hour) returns (now) for all units\n  up to and including the hour", RT.keyword(null, "line"), 780, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__394 = RT.var("clj-time.core", "when-available");
        const__398 = (AFn)((Object)RT.map(RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "sym"), Symbol.intern(null, "&"), Symbol.intern(null, "body")))), RT.keyword(null, "line"), 795, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "clj_time/core.clj"));
        const__399 = RT.classForName("org.joda.time.ReadableInstant");
    }

    public static void __init4() {
        const__400 = RT.var("clojure.core", "Inst");
        const__401 = RT.keyword(null, "inst-ms*");
    }

    static {
        core__init.__init0();
        core__init.__init1();
        core__init.__init2();
        core__init.__init3();
        core__init.__init4();
        Compiler.pushNSandLoader(RT.classForName("clj_time.core__init").getClassLoader());
        try {
            core__init.load();
        }
        catch (Throwable throwable2) {
            Var.popThreadBindings();
            throw throwable2;
        }
        Var.popThreadBindings();
    }
}

