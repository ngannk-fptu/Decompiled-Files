/*
 * Decompiled with CFR 0.152.
 */
import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;

public class primitive_math__init {
    public static final Var const__0;
    public static final AFn const__1;
    public static final AFn const__2;
    public static final Var const__3;
    public static final Keyword const__5;
    public static final Keyword const__7;
    public static final Keyword const__8;
    public static final Keyword const__10;
    public static final Object const__11;
    public static final Keyword const__12;
    public static final AFn const__13;
    public static final Var const__14;
    public static final AFn const__17;
    public static final Var const__19;
    public static final AFn const__22;
    public static final Var const__23;
    public static final AFn const__26;
    public static final Var const__27;
    public static final AFn const__30;
    public static final Var const__31;
    public static final AFn const__34;
    public static final Var const__35;
    public static final AFn const__38;
    public static final Var const__39;
    public static final AFn const__42;
    public static final Var const__43;
    public static final AFn const__46;
    public static final Var const__47;
    public static final AFn const__50;
    public static final Var const__51;
    public static final AFn const__54;
    public static final Var const__55;
    public static final AFn const__58;
    public static final Var const__59;
    public static final AFn const__62;
    public static final Var const__63;
    public static final AFn const__66;
    public static final Var const__67;
    public static final AFn const__70;
    public static final Var const__72;
    public static final AFn const__75;
    public static final Var const__76;
    public static final AFn const__79;
    public static final Var const__80;
    public static final AFn const__83;
    public static final Var const__84;
    public static final AFn const__87;
    public static final Var const__88;
    public static final AFn const__91;
    public static final Var const__92;
    public static final AFn const__95;
    public static final Var const__96;
    public static final AFn const__99;
    public static final Var const__100;
    public static final AFn const__103;
    public static final Var const__104;
    public static final AFn const__107;
    public static final Var const__108;
    public static final AFn const__111;
    public static final Var const__112;
    public static final AFn const__115;
    public static final Var const__116;
    public static final AFn const__119;
    public static final Var const__120;
    public static final AFn const__123;
    public static final Var const__124;
    public static final AFn const__127;
    public static final Var const__128;
    public static final AFn const__131;
    public static final Var const__132;
    public static final AFn const__135;
    public static final Var const__136;
    public static final AFn const__140;
    public static final Var const__141;
    public static final AFn const__144;
    public static final Var const__145;
    public static final AFn const__148;
    public static final Var const__149;
    public static final AFn const__152;
    public static final Var const__153;
    public static final AFn const__156;
    public static final Var const__157;
    public static final AFn const__159;
    public static final AFn const__160;
    public static final Var const__161;
    public static final AFn const__164;
    public static final Var const__165;
    public static final AFn const__168;
    public static final Var const__169;
    public static final AFn const__172;
    public static final Var const__173;
    public static final AFn const__176;
    public static final Var const__177;
    public static final Object const__178;
    public static final Keyword const__179;
    public static final Object const__180;
    public static final Var const__181;
    public static final Object const__182;
    public static final Object const__183;
    public static final Var const__184;
    public static final Object const__185;
    public static final Object const__186;
    public static final Var const__187;
    public static final Object const__188;
    public static final Object const__189;
    public static final Var const__190;
    public static final Object const__191;
    public static final Object const__192;
    public static final Var const__193;
    public static final Object const__194;
    public static final Object const__195;
    public static final Var const__196;
    public static final Object const__197;
    public static final Object const__198;
    public static final Var const__199;
    public static final Object const__200;
    public static final Object const__201;
    public static final Var const__202;
    public static final Object const__203;
    public static final Object const__204;
    public static final Var const__205;
    public static final Object const__206;
    public static final Object const__207;
    public static final Var const__208;
    public static final Object const__209;
    public static final Object const__210;
    public static final Var const__211;
    public static final Object const__212;
    public static final Object const__213;
    public static final Var const__214;
    public static final AFn const__217;
    public static final Var const__218;
    public static final Keyword const__219;
    public static final Object const__220;
    public static final Object const__221;
    public static final Var const__222;
    public static final Object const__223;
    public static final Object const__224;
    public static final Var const__225;
    public static final Object const__226;
    public static final Object const__227;
    public static final Var const__228;
    public static final Object const__229;
    public static final Object const__230;
    public static final Var const__231;
    public static final Object const__232;
    public static final Object const__233;
    public static final Var const__234;
    public static final Object const__235;
    public static final Object const__236;
    public static final Var const__237;
    public static final Object const__238;
    public static final Object const__239;
    public static final Var const__240;
    public static final Object const__241;
    public static final Object const__242;
    public static final Var const__243;
    public static final Object const__244;
    public static final Object const__245;
    public static final Var const__246;
    public static final Object const__247;
    public static final Object const__248;

    public static void load() {
        Object v2;
        Object object = ((IFn)const__0.getRawRoot()).invoke(const__1);
        Object object2 = ((IFn)new primitive_math$loading__6789__auto____17679()).invoke();
        if (((Symbol)const__1).equals(const__2)) {
            v2 = null;
        } else {
            LockingTransaction.runInTransaction(new primitive_math$fn__17681());
            v2 = null;
        }
        Var var = const__3;
        var.setMeta((IPersistentMap)((Object)const__13));
        Var var2 = var;
        var.bindRoot(new primitive_math$variadic_proxy());
        const__3.setMacro();
        Object v5 = null;
        Var var3 = const__3;
        Var var4 = const__14;
        var4.setMeta((IPersistentMap)((Object)const__17));
        Var var5 = var4;
        var4.bindRoot(new primitive_math$variadic_predicate_proxy());
        const__14.setMacro();
        Object v9 = null;
        Var var6 = const__14;
        Var var7 = const__19;
        var7.setMeta((IPersistentMap)((Object)const__22));
        Var var8 = var7;
        var7.bindRoot(new primitive_math$_PLUS_());
        const__19.setMacro();
        Object v13 = null;
        Var var9 = const__19;
        Var var10 = const__23;
        var10.setMeta((IPersistentMap)((Object)const__26));
        Var var11 = var10;
        var10.bindRoot(new primitive_math$_());
        const__23.setMacro();
        Object v17 = null;
        Var var12 = const__23;
        Var var13 = const__27;
        var13.setMeta((IPersistentMap)((Object)const__30));
        Var var14 = var13;
        var13.bindRoot(new primitive_math$_STAR_());
        const__27.setMacro();
        Object v21 = null;
        Var var15 = const__27;
        Var var16 = const__31;
        var16.setMeta((IPersistentMap)((Object)const__34));
        Var var17 = var16;
        var16.bindRoot(new primitive_math$_SLASH_());
        const__31.setMacro();
        Object v25 = null;
        Var var18 = const__31;
        Var var19 = const__35;
        var19.setMeta((IPersistentMap)((Object)const__38));
        Var var20 = var19;
        var19.bindRoot(new primitive_math$div());
        const__35.setMacro();
        Object v29 = null;
        Var var21 = const__35;
        Var var22 = const__39;
        var22.setMeta((IPersistentMap)((Object)const__42));
        Var var23 = var22;
        var22.bindRoot(new primitive_math$bit_and());
        const__39.setMacro();
        Object v33 = null;
        Var var24 = const__39;
        Var var25 = const__43;
        var25.setMeta((IPersistentMap)((Object)const__46));
        Var var26 = var25;
        var25.bindRoot(new primitive_math$bit_or());
        const__43.setMacro();
        Object v37 = null;
        Var var27 = const__43;
        Var var28 = const__47;
        var28.setMeta((IPersistentMap)((Object)const__50));
        Var var29 = var28;
        var28.bindRoot(new primitive_math$bit_xor());
        const__47.setMacro();
        Object v41 = null;
        Var var30 = const__47;
        Var var31 = const__51;
        var31.setMeta((IPersistentMap)((Object)const__54));
        Var var32 = var31;
        var31.bindRoot(new primitive_math$bool_and());
        const__51.setMacro();
        Object v45 = null;
        Var var33 = const__51;
        Var var34 = const__55;
        var34.setMeta((IPersistentMap)((Object)const__58));
        Var var35 = var34;
        var34.bindRoot(new primitive_math$bool_or());
        const__55.setMacro();
        Object v49 = null;
        Var var36 = const__55;
        Var var37 = const__59;
        var37.setMeta((IPersistentMap)((Object)const__62));
        Var var38 = var37;
        var37.bindRoot(new primitive_math$bool_xor());
        const__59.setMacro();
        Object v53 = null;
        Var var39 = const__59;
        Var var40 = const__63;
        var40.setMeta((IPersistentMap)((Object)const__66));
        Var var41 = var40;
        var40.bindRoot(new primitive_math$min());
        const__63.setMacro();
        Object v57 = null;
        Var var42 = const__63;
        Var var43 = const__67;
        var43.setMeta((IPersistentMap)((Object)const__70));
        Var var44 = var43;
        var43.bindRoot(new primitive_math$max());
        const__67.setMacro();
        Object v61 = null;
        Var var45 = const__67;
        Var var46 = const__72;
        var46.setMeta((IPersistentMap)((Object)const__75));
        Var var47 = var46;
        var46.bindRoot(new primitive_math$_GT_());
        const__72.setMacro();
        Object v65 = null;
        Var var48 = const__72;
        Var var49 = const__76;
        var49.setMeta((IPersistentMap)((Object)const__79));
        Var var50 = var49;
        var49.bindRoot(new primitive_math$_LT_());
        const__76.setMacro();
        Object v69 = null;
        Var var51 = const__76;
        Var var52 = const__80;
        var52.setMeta((IPersistentMap)((Object)const__83));
        Var var53 = var52;
        var52.bindRoot(new primitive_math$_LT__EQ_());
        const__80.setMacro();
        Object v73 = null;
        Var var54 = const__80;
        Var var55 = const__84;
        var55.setMeta((IPersistentMap)((Object)const__87));
        Var var56 = var55;
        var55.bindRoot(new primitive_math$_GT__EQ_());
        const__84.setMacro();
        Object v77 = null;
        Var var57 = const__84;
        Var var58 = const__88;
        var58.setMeta((IPersistentMap)((Object)const__91));
        Var var59 = var58;
        var58.bindRoot(new primitive_math$_EQ__EQ_());
        const__88.setMacro();
        Object v81 = null;
        Var var60 = const__88;
        Var var61 = const__92;
        var61.setMeta((IPersistentMap)((Object)const__95));
        Var var62 = var61;
        var61.bindRoot(new primitive_math$not_EQ__EQ_());
        const__92.setMacro();
        Object v85 = null;
        Var var63 = const__92;
        Var var64 = const__96;
        var64.setMeta((IPersistentMap)((Object)const__99));
        Var var65 = var64;
        var64.bindRoot(new primitive_math$inc());
        const__96.setMacro();
        Object v89 = null;
        Var var66 = const__96;
        Var var67 = const__100;
        var67.setMeta((IPersistentMap)((Object)const__103));
        Var var68 = var67;
        var67.bindRoot(new primitive_math$dec());
        const__100.setMacro();
        Object v93 = null;
        Var var69 = const__100;
        Var var70 = const__104;
        var70.setMeta((IPersistentMap)((Object)const__107));
        Var var71 = var70;
        var70.bindRoot(new primitive_math$rem());
        const__104.setMacro();
        Object v97 = null;
        Var var72 = const__104;
        Var var73 = const__108;
        var73.setMeta((IPersistentMap)((Object)const__111));
        Var var74 = var73;
        var73.bindRoot(new primitive_math$zero_QMARK_());
        const__108.setMacro();
        Object v101 = null;
        Var var75 = const__108;
        Var var76 = const__112;
        var76.setMeta((IPersistentMap)((Object)const__115));
        Var var77 = var76;
        var76.bindRoot(new primitive_math$bool_not());
        const__112.setMacro();
        Object v105 = null;
        Var var78 = const__112;
        Var var79 = const__116;
        var79.setMeta((IPersistentMap)((Object)const__119));
        Var var80 = var79;
        var79.bindRoot(new primitive_math$bit_not());
        const__116.setMacro();
        Object v109 = null;
        Var var81 = const__116;
        Var var82 = const__120;
        var82.setMeta((IPersistentMap)((Object)const__123));
        Var var83 = var82;
        var82.bindRoot(new primitive_math$true_QMARK_());
        const__120.setMacro();
        Object v113 = null;
        Var var84 = const__120;
        Var var85 = const__124;
        var85.setMeta((IPersistentMap)((Object)const__127));
        Var var86 = var85;
        var85.bindRoot(new primitive_math$false_QMARK_());
        const__124.setMacro();
        Object v117 = null;
        Var var87 = const__124;
        Var var88 = const__128;
        var88.setMeta((IPersistentMap)((Object)const__131));
        Var var89 = var88;
        var88.bindRoot(new primitive_math$bit_shift_left());
        const__128.setMacro();
        Object v121 = null;
        Var var90 = const__128;
        Var var91 = const__132;
        var91.setMeta((IPersistentMap)((Object)const__135));
        Var var92 = var91;
        var91.bindRoot(new primitive_math$bit_shift_right());
        const__132.setMacro();
        Object v125 = null;
        Var var93 = const__132;
        Var var94 = const__136;
        var94.setMeta((IPersistentMap)((Object)const__140));
        Var var95 = var94;
        var94.bindRoot(new primitive_math$bit_unsigned_shift_right());
        const__136.setMacro();
        Object v129 = null;
        Var var96 = const__136;
        Var var97 = const__141;
        var97.setMeta((IPersistentMap)((Object)const__144));
        Var var98 = var97;
        var97.bindRoot(new primitive_math$unsigned_bit_shift_right());
        const__141.setMacro();
        Object v133 = null;
        Var var99 = const__141;
        Var var100 = const__145;
        var100.setMeta((IPersistentMap)((Object)const__148));
        Var var101 = var100;
        var100.bindRoot(new primitive_math$_LT__LT_());
        const__145.setMacro();
        Object v137 = null;
        Var var102 = const__145;
        Var var103 = const__149;
        var103.setMeta((IPersistentMap)((Object)const__152));
        Var var104 = var103;
        var103.bindRoot(new primitive_math$_GT__GT_());
        const__149.setMacro();
        Object v141 = null;
        Var var105 = const__149;
        Var var106 = const__153;
        var106.setMeta((IPersistentMap)((Object)const__156));
        Var var107 = var106;
        var106.bindRoot(new primitive_math$_GT__GT__GT_());
        const__153.setMacro();
        Object v145 = null;
        Var var108 = const__153;
        Var var109 = const__157;
        var109.setMeta((IPersistentMap)((Object)const__159));
        Var var110 = var109;
        var109.bindRoot(const__160);
        Var var111 = const__161;
        var111.setMeta((IPersistentMap)((Object)const__164));
        Var var112 = var111;
        var111.bindRoot(new primitive_math$using_primitive_operators_QMARK_());
        Object object3 = ((IFn)new primitive_math$fn__17761()).invoke();
        Var var113 = const__165;
        var113.setMeta((IPersistentMap)((Object)const__168));
        Var var114 = var113;
        var113.bindRoot(new primitive_math$ns_wrapper());
        Var var115 = const__169;
        var115.setMeta((IPersistentMap)((Object)const__172));
        Var var116 = var115;
        var115.bindRoot(new primitive_math$use_primitive_operators());
        Var var117 = const__173;
        var117.setMeta((IPersistentMap)((Object)const__176));
        Var var118 = var117;
        var117.bindRoot(new primitive_math$unuse_primitive_operators());
        Var var119 = const__177;
        var119.setMeta(RT.mapUniqueKeys(const__5, const__178, const__7, "Truncates a number to a byte, will not check for overflow.", const__179, new primitive_math$byte__inliner__17788(), const__8, const__180, const__10, const__11, const__12, "primitive_math.clj"));
        Var var120 = var119;
        var119.bindRoot(new primitive_math$byte());
        Var var121 = const__181;
        var121.setMeta(RT.mapUniqueKeys(const__5, const__182, const__7, "Truncates a number to a short, will not check for overflow.", const__179, new primitive_math$short__inliner__17791(), const__8, const__183, const__10, const__11, const__12, "primitive_math.clj"));
        Var var122 = var121;
        var121.bindRoot(new primitive_math$short());
        Var var123 = const__184;
        var123.setMeta(RT.mapUniqueKeys(const__5, const__185, const__7, "Truncates a number to an int, will not check for overflow.", const__179, new primitive_math$int__inliner__17794(), const__8, const__186, const__10, const__11, const__12, "primitive_math.clj"));
        Var var124 = var123;
        var123.bindRoot(new primitive_math$int());
        Var var125 = const__187;
        var125.setMeta(RT.mapUniqueKeys(const__5, const__188, const__7, "Truncates a number to a float, will not check for overflow.", const__179, new primitive_math$float__inliner__17797(), const__8, const__189, const__10, const__11, const__12, "primitive_math.clj"));
        Var var126 = var125;
        var125.bindRoot(new primitive_math$float());
        Var var127 = const__190;
        var127.setMeta(RT.mapUniqueKeys(const__5, const__191, const__7, "Converts a number to a long.", const__179, new primitive_math$long__inliner__17800(), const__8, const__192, const__10, const__11, const__12, "primitive_math.clj"));
        Var var128 = var127;
        var127.bindRoot(new primitive_math$long());
        Var var129 = const__193;
        var129.setMeta(RT.mapUniqueKeys(const__5, const__194, const__7, "Converts a number to a double.", const__179, new primitive_math$double__inliner__17803(), const__8, const__195, const__10, const__11, const__12, "primitive_math.clj"));
        Var var130 = var129;
        var129.bindRoot(new primitive_math$double());
        Var var131 = const__196;
        var131.setMeta(RT.mapUniqueKeys(const__5, const__197, const__7, "Converts a byte to an unsigned byte.", const__179, new primitive_math$byte__GT_ubyte__inliner__17806(), const__8, const__198, const__10, const__11, const__12, "primitive_math.clj"));
        Var var132 = var131;
        var131.bindRoot(new primitive_math$byte__GT_ubyte());
        Var var133 = const__199;
        var133.setMeta(RT.mapUniqueKeys(const__5, const__200, const__7, "Converts an unsigned byte to a byte.", const__179, new primitive_math$ubyte__GT_byte__inliner__17809(), const__8, const__201, const__10, const__11, const__12, "primitive_math.clj"));
        Var var134 = var133;
        var133.bindRoot(new primitive_math$ubyte__GT_byte());
        Var var135 = const__202;
        var135.setMeta(RT.mapUniqueKeys(const__5, const__203, const__7, "Converts a short to an unsigned short.", const__179, new primitive_math$short__GT_ushort__inliner__17812(), const__8, const__204, const__10, const__11, const__12, "primitive_math.clj"));
        Var var136 = var135;
        var135.bindRoot(new primitive_math$short__GT_ushort());
        Var var137 = const__205;
        var137.setMeta(RT.mapUniqueKeys(const__5, const__206, const__7, "Converts an unsigned short to a short.", const__179, new primitive_math$ushort__GT_short__inliner__17815(), const__8, const__207, const__10, const__11, const__12, "primitive_math.clj"));
        Var var138 = var137;
        var137.bindRoot(new primitive_math$ushort__GT_short());
        Var var139 = const__208;
        var139.setMeta(RT.mapUniqueKeys(const__5, const__209, const__7, "Converts an integer to an unsigned integer.", const__179, new primitive_math$int__GT_uint__inliner__17818(), const__8, const__210, const__10, const__11, const__12, "primitive_math.clj"));
        Var var140 = var139;
        var139.bindRoot(new primitive_math$int__GT_uint());
        Var var141 = const__211;
        var141.setMeta(RT.mapUniqueKeys(const__5, const__212, const__7, "Converts an unsigned integer to an integer.", const__179, new primitive_math$uint__GT_int__inliner__17821(), const__8, const__213, const__10, const__11, const__12, "primitive_math.clj"));
        Var var142 = var141;
        var141.bindRoot(new primitive_math$uint__GT_int());
        Var var143 = const__214;
        var143.setMeta((IPersistentMap)((Object)const__217));
        Var var144 = var143;
        var143.bindRoot(new primitive_math$long__GT_ulong());
        Var var145 = const__218;
        var145.setMeta(RT.mapUniqueKeys(const__219, const__190.getRawRoot(), const__5, const__220, const__7, "Converts an unsigned long to a long.", const__8, const__221, const__10, const__11, const__12, "primitive_math.clj"));
        Var var146 = var145;
        var145.bindRoot(new primitive_math$ulong__GT_long());
        Var var147 = const__222;
        var147.setMeta(RT.mapUniqueKeys(const__5, const__223, const__7, "Converts a float to an integer.", const__179, new primitive_math$float__GT_int__inliner__17826(), const__8, const__224, const__10, const__11, const__12, "primitive_math.clj"));
        Var var148 = var147;
        var147.bindRoot(new primitive_math$float__GT_int());
        Var var149 = const__225;
        var149.setMeta(RT.mapUniqueKeys(const__5, const__226, const__7, "Converts an integer to a float.", const__179, new primitive_math$int__GT_float__inliner__17829(), const__8, const__227, const__10, const__11, const__12, "primitive_math.clj"));
        Var var150 = var149;
        var149.bindRoot(new primitive_math$int__GT_float());
        Var var151 = const__228;
        var151.setMeta(RT.mapUniqueKeys(const__5, const__229, const__7, "Converts a double to a long.", const__179, new primitive_math$double__GT_long__inliner__17832(), const__8, const__230, const__10, const__11, const__12, "primitive_math.clj"));
        Var var152 = var151;
        var151.bindRoot(new primitive_math$double__GT_long());
        Var var153 = const__231;
        var153.setMeta(RT.mapUniqueKeys(const__5, const__232, const__7, "Converts a long to a double.", const__179, new primitive_math$long__GT_double__inliner__17835(), const__8, const__233, const__10, const__11, const__12, "primitive_math.clj"));
        Var var154 = var153;
        var153.bindRoot(new primitive_math$long__GT_double());
        Var var155 = const__234;
        var155.setMeta(RT.mapUniqueKeys(const__5, const__235, const__7, "Inverts the endianness of a short.", const__179, new primitive_math$reverse_short__inliner__17838(), const__8, const__236, const__10, const__11, const__12, "primitive_math.clj"));
        Var var156 = var155;
        var155.bindRoot(new primitive_math$reverse_short());
        Var var157 = const__237;
        var157.setMeta(RT.mapUniqueKeys(const__5, const__238, const__7, "Inverts the endianness of an int.", const__179, new primitive_math$reverse_int__inliner__17841(), const__8, const__239, const__10, const__11, const__12, "primitive_math.clj"));
        Var var158 = var157;
        var157.bindRoot(new primitive_math$reverse_int());
        Var var159 = const__240;
        var159.setMeta(RT.mapUniqueKeys(const__5, const__241, const__7, "Inverts the endianness of a long.", const__179, new primitive_math$reverse_long__inliner__17844(), const__8, const__242, const__10, const__11, const__12, "primitive_math.clj"));
        Var var160 = var159;
        var159.bindRoot(new primitive_math$reverse_long());
        Var var161 = const__243;
        var161.setMeta(RT.mapUniqueKeys(const__5, const__244, const__7, "Inverts the endianness of a float.", const__179, new primitive_math$reverse_float__inliner__17847(), const__8, const__245, const__10, const__11, const__12, "primitive_math.clj"));
        Var var162 = var161;
        var161.bindRoot(new primitive_math$reverse_float());
        Var var163 = const__246;
        var163.setMeta(RT.mapUniqueKeys(const__5, const__247, const__7, "Inverts the endianness of a double.", const__179, new primitive_math$reverse_double__inliner__17850(), const__8, const__248, const__10, const__11, const__12, "primitive_math.clj"));
        Var var164 = var163;
        var163.bindRoot(new primitive_math$reverse_double());
    }

    public static void __init0() {
        const__0 = RT.var("clojure.core", "in-ns");
        const__1 = Symbol.intern(null, "primitive-math");
        const__2 = Symbol.intern(null, "clojure.core");
        const__3 = RT.var("primitive-math", "variadic-proxy");
        const__5 = RT.keyword(null, "arglists");
        const__7 = RT.keyword(null, "doc");
        const__8 = RT.keyword(null, "line");
        const__10 = RT.keyword(null, "column");
        const__11 = 1;
        const__12 = RT.keyword(null, "file");
        const__13 = (AFn)((Object)RT.map(RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "fn")), Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "fn"), Symbol.intern(null, "doc")), Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "fn"), Symbol.intern(null, "doc"), Symbol.intern(null, "single-arg-form")))), RT.keyword(null, "doc"), "Creates left-associative variadic forms for any operator.", RT.keyword(null, "line"), 10, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__14 = RT.var("primitive-math", "variadic-predicate-proxy");
        const__17 = (AFn)((Object)RT.map(RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "fn")), Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "fn"), Symbol.intern(null, "doc")), Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "fn"), Symbol.intern(null, "doc"), Symbol.intern(null, "single-arg-form")))), RT.keyword(null, "doc"), "Turns variadic predicates into multiple pair-wise comparisons.", RT.keyword(null, "line"), 27, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__19 = RT.var("primitive-math", "+");
        const__22 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "x17691")), Tuple.create(Symbol.intern(null, "x__17683__auto__"), Symbol.intern(null, "y__17684__auto__")), Tuple.create(Symbol.intern(null, "x__17683__auto__"), Symbol.intern(null, "y__17684__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17685__auto__")))), RT.keyword(null, "doc"), "A primitive macro version of `+`", RT.keyword(null, "line"), 44, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__23 = RT.var("primitive-math", "-");
        const__26 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "x17693")), Tuple.create(Symbol.intern(null, "x__17683__auto__"), Symbol.intern(null, "y__17684__auto__")), Tuple.create(Symbol.intern(null, "x__17683__auto__"), Symbol.intern(null, "y__17684__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17685__auto__")))), RT.keyword(null, "doc"), "A primitive macro version of `-`", RT.keyword(null, "line"), 45, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__27 = RT.var("primitive-math", "*");
        const__30 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "x17699")), Tuple.create(Symbol.intern(null, "x__17683__auto__"), Symbol.intern(null, "y__17684__auto__")), Tuple.create(Symbol.intern(null, "x__17683__auto__"), Symbol.intern(null, "y__17684__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17685__auto__")))), RT.keyword(null, "doc"), "A primitive macro version of `*`", RT.keyword(null, "line"), 46, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__31 = RT.var("primitive-math", "/");
        const__34 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "x17701")), Tuple.create(Symbol.intern(null, "x__17683__auto__"), Symbol.intern(null, "y__17684__auto__")), Tuple.create(Symbol.intern(null, "x__17683__auto__"), Symbol.intern(null, "y__17684__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17685__auto__")))), RT.keyword(null, "doc"), "A primitive macro version of `/`", RT.keyword(null, "line"), 47, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__35 = RT.var("primitive-math", "div");
        const__38 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "x17703")), Tuple.create(Symbol.intern(null, "x__17683__auto__"), Symbol.intern(null, "y__17684__auto__")), Tuple.create(Symbol.intern(null, "x__17683__auto__"), Symbol.intern(null, "y__17684__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17685__auto__")))), RT.keyword(null, "doc"), "A primitive macro version of `div`", RT.keyword(null, "line"), 48, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__39 = RT.var("primitive-math", "bit-and");
        const__42 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "x17705")), Tuple.create(Symbol.intern(null, "x__17683__auto__"), Symbol.intern(null, "y__17684__auto__")), Tuple.create(Symbol.intern(null, "x__17683__auto__"), Symbol.intern(null, "y__17684__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17685__auto__")))), RT.keyword(null, "doc"), "A primitive macro version of `bit-and`", RT.keyword(null, "line"), 49, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__43 = RT.var("primitive-math", "bit-or");
        const__46 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "x17707")), Tuple.create(Symbol.intern(null, "x__17683__auto__"), Symbol.intern(null, "y__17684__auto__")), Tuple.create(Symbol.intern(null, "x__17683__auto__"), Symbol.intern(null, "y__17684__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17685__auto__")))), RT.keyword(null, "doc"), "A primitive macro version of `bit-or`", RT.keyword(null, "line"), 50, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__47 = RT.var("primitive-math", "bit-xor");
        const__50 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "x17709")), Tuple.create(Symbol.intern(null, "x__17683__auto__"), Symbol.intern(null, "y__17684__auto__")), Tuple.create(Symbol.intern(null, "x__17683__auto__"), Symbol.intern(null, "y__17684__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17685__auto__")))), RT.keyword(null, "doc"), "A primitive macro version of `bit-xor`", RT.keyword(null, "line"), 51, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__51 = RT.var("primitive-math", "bool-and");
        const__54 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "x17711")), Tuple.create(Symbol.intern(null, "x__17683__auto__"), Symbol.intern(null, "y__17684__auto__")), Tuple.create(Symbol.intern(null, "x__17683__auto__"), Symbol.intern(null, "y__17684__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17685__auto__")))), RT.keyword(null, "doc"), "A primitive macro version of `bool-and`", RT.keyword(null, "line"), 52, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__55 = RT.var("primitive-math", "bool-or");
        const__58 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "x17713")), Tuple.create(Symbol.intern(null, "x__17683__auto__"), Symbol.intern(null, "y__17684__auto__")), Tuple.create(Symbol.intern(null, "x__17683__auto__"), Symbol.intern(null, "y__17684__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17685__auto__")))), RT.keyword(null, "doc"), "A primitive macro version of `bool-or`", RT.keyword(null, "line"), 53, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__59 = RT.var("primitive-math", "bool-xor");
        const__62 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "x17715")), Tuple.create(Symbol.intern(null, "x__17683__auto__"), Symbol.intern(null, "y__17684__auto__")), Tuple.create(Symbol.intern(null, "x__17683__auto__"), Symbol.intern(null, "y__17684__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17685__auto__")))), RT.keyword(null, "doc"), "A primitive macro version of `bool-xor`", RT.keyword(null, "line"), 54, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__63 = RT.var("primitive-math", "min");
        const__66 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "x17717")), Tuple.create(Symbol.intern(null, "x__17683__auto__"), Symbol.intern(null, "y__17684__auto__")), Tuple.create(Symbol.intern(null, "x__17683__auto__"), Symbol.intern(null, "y__17684__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17685__auto__")))), RT.keyword(null, "doc"), "A primitive macro version of `min`", RT.keyword(null, "line"), 55, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__67 = RT.var("primitive-math", "max");
        const__70 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "x17719")), Tuple.create(Symbol.intern(null, "x__17683__auto__"), Symbol.intern(null, "y__17684__auto__")), Tuple.create(Symbol.intern(null, "x__17683__auto__"), Symbol.intern(null, "y__17684__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17685__auto__")))), RT.keyword(null, "doc"), "A primitive macro version of `max`", RT.keyword(null, "line"), 56, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__72 = RT.var("primitive-math", ">");
        const__75 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "x17721")), Tuple.create(Symbol.intern(null, "x__17687__auto__"), Symbol.intern(null, "y__17688__auto__")), Tuple.create(Symbol.intern(null, "x__17687__auto__"), Symbol.intern(null, "y__17688__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17689__auto__")))), RT.keyword(null, "doc"), "A primitive macro version of `>`", RT.keyword(null, "line"), 58, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__76 = RT.var("primitive-math", "<");
        const__79 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "x17725")), Tuple.create(Symbol.intern(null, "x__17687__auto__"), Symbol.intern(null, "y__17688__auto__")), Tuple.create(Symbol.intern(null, "x__17687__auto__"), Symbol.intern(null, "y__17688__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17689__auto__")))), RT.keyword(null, "doc"), "A primitive macro version of `<`", RT.keyword(null, "line"), 59, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__80 = RT.var("primitive-math", "<=");
        const__83 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "x17729")), Tuple.create(Symbol.intern(null, "x__17687__auto__"), Symbol.intern(null, "y__17688__auto__")), Tuple.create(Symbol.intern(null, "x__17687__auto__"), Symbol.intern(null, "y__17688__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17689__auto__")))), RT.keyword(null, "doc"), "A primitive macro version of `<=`", RT.keyword(null, "line"), 60, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__84 = RT.var("primitive-math", ">=");
        const__87 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "x17733")), Tuple.create(Symbol.intern(null, "x__17687__auto__"), Symbol.intern(null, "y__17688__auto__")), Tuple.create(Symbol.intern(null, "x__17687__auto__"), Symbol.intern(null, "y__17688__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17689__auto__")))), RT.keyword(null, "doc"), "A primitive macro version of `>=`", RT.keyword(null, "line"), 61, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__88 = RT.var("primitive-math", "==");
        const__91 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "x17737")), Tuple.create(Symbol.intern(null, "x__17687__auto__"), Symbol.intern(null, "y__17688__auto__")), Tuple.create(Symbol.intern(null, "x__17687__auto__"), Symbol.intern(null, "y__17688__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17689__auto__")))), RT.keyword(null, "doc"), "A primitive macro version of `==`", RT.keyword(null, "line"), 62, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__92 = RT.var("primitive-math", "not==");
        const__95 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "x17741")), Tuple.create(Symbol.intern(null, "x__17687__auto__"), Symbol.intern(null, "y__17688__auto__")), Tuple.create(Symbol.intern(null, "x__17687__auto__"), Symbol.intern(null, "y__17688__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17689__auto__")))), RT.keyword(null, "doc"), "A primitive macro complement of `==`", RT.keyword(null, "line"), 63, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__96 = RT.var("primitive-math", "inc");
        const__99 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "x")))), RT.keyword(null, "doc"), "A primitive macro version of `inc`.", RT.keyword(null, "line"), 65, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
    }

    public static void __init1() {
        const__100 = RT.var("primitive-math", "dec");
        const__103 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "x")))), RT.keyword(null, "doc"), "A primitive macro version of `dec`.", RT.keyword(null, "line"), 70, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__104 = RT.var("primitive-math", "rem");
        const__107 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "n"), Symbol.intern(null, "div")))), RT.keyword(null, "doc"), "A primitive macro version of `rem`.", RT.keyword(null, "line"), 75, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__108 = RT.var("primitive-math", "zero?");
        const__111 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "x")))), RT.keyword(null, "doc"), "A primitive macro version of `zero?`.", RT.keyword(null, "line"), 80, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__112 = RT.var("primitive-math", "bool-not");
        const__115 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "x")))), RT.keyword(null, "doc"), "A primitive macro version of `not`.", RT.keyword(null, "line"), 85, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__116 = RT.var("primitive-math", "bit-not");
        const__119 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "x")))), RT.keyword(null, "doc"), "A primitive macro version of `bit-not`.", RT.keyword(null, "line"), 90, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__120 = RT.var("primitive-math", "true?");
        const__123 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "x")))), RT.keyword(null, "doc"), "A primitive macro version of `true?`.", RT.keyword(null, "line"), 95, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__124 = RT.var("primitive-math", "false?");
        const__127 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "x")))), RT.keyword(null, "doc"), "A primitive macro version of `false?`.", RT.keyword(null, "line"), 100, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__128 = RT.var("primitive-math", "bit-shift-left");
        const__131 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "n"), Symbol.intern(null, "bits")))), RT.keyword(null, "doc"), "A primitive macro version of `bit-shift-left`.", RT.keyword(null, "line"), 105, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__132 = RT.var("primitive-math", "bit-shift-right");
        const__135 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "n"), Symbol.intern(null, "bits")))), RT.keyword(null, "doc"), "A primitive macro version of `bit-shift-right`.", RT.keyword(null, "line"), 110, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__136 = RT.var("primitive-math", "bit-unsigned-shift-right");
        const__140 = (AFn)((Object)RT.map(RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "n"), Symbol.intern(null, "bits")))), RT.keyword(null, "line"), 117, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__141 = RT.var("primitive-math", "unsigned-bit-shift-right");
        const__144 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "n"), Symbol.intern(null, "bits")))), RT.keyword(null, "doc"), "A primitive macro which performs an unsigned right bit-shift.", RT.keyword(null, "line"), 121, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__145 = RT.var("primitive-math", "<<");
        const__148 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "n"), Symbol.intern(null, "bits")))), RT.keyword(null, "doc"), "An alias for `bit-shift-left`.", RT.keyword(null, "line"), 126, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__149 = RT.var("primitive-math", ">>");
        const__152 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "n"), Symbol.intern(null, "bits")))), RT.keyword(null, "doc"), "An alias for `bit-shift-right`.", RT.keyword(null, "line"), 131, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__153 = RT.var("primitive-math", ">>>");
        const__156 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "n"), Symbol.intern(null, "bits")))), RT.keyword(null, "doc"), "An alias for `bit-unsigned-shift-right`.", RT.keyword(null, "line"), 136, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__157 = RT.var("primitive-math", "vars-to-exclude");
        const__159 = (AFn)((Object)RT.map(RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), 143, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__160 = (AFn)((Object)RT.vector(Symbol.intern(null, "*"), Symbol.intern(null, "+"), Symbol.intern(null, "-"), Symbol.intern(null, "/"), Symbol.intern(null, "<"), Symbol.intern(null, ">"), Symbol.intern(null, "<="), Symbol.intern(null, ">="), Symbol.intern(null, "=="), Symbol.intern(null, "rem"), Symbol.intern(null, "bit-or"), Symbol.intern(null, "bit-and"), Symbol.intern(null, "bit-xor"), Symbol.intern(null, "bit-not"), Symbol.intern(null, "bit-shift-left"), Symbol.intern(null, "bit-shift-right"), Symbol.intern(null, "byte"), Symbol.intern(null, "short"), Symbol.intern(null, "int"), Symbol.intern(null, "float"), Symbol.intern(null, "long"), Symbol.intern(null, "double"), Symbol.intern(null, "inc"), Symbol.intern(null, "dec"), Symbol.intern(null, "zero?"), Symbol.intern(null, "true?"), Symbol.intern(null, "false?"), Symbol.intern(null, "min"), Symbol.intern(null, "max")));
        const__161 = RT.var("primitive-math", "using-primitive-operators?");
        const__164 = (AFn)((Object)RT.map(RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create())), RT.keyword(null, "line"), 146, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__165 = RT.var("primitive-math", "ns-wrapper");
        const__168 = (AFn)((Object)RT.map(RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(Symbol.intern(null, "f")))), RT.keyword(null, "doc"), "Makes sure that if a namespace that is using primitive operators is reloaded, it will automatically\n   exclude the shadowed operators in `clojure.core`.", RT.keyword(null, "line"), 151, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__169 = RT.var("primitive-math", "use-primitive-operators");
        const__172 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create())), RT.keyword(null, "doc"), "Replaces Clojure's arithmetic and number coercion functions with primitive equivalents.  These are\n   defined as macros, so they cannot be used as higher-order functions.  This is an idempotent operation..", RT.keyword(null, "line"), 170, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__173 = RT.var("primitive-math", "unuse-primitive-operators");
        const__176 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create())), RT.keyword(null, "doc"), "Undoes the work of `use-primitive-operators`.  This is idempotent.", RT.keyword(null, "line"), 182, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__177 = RT.var("primitive-math", "byte");
        const__178 = PersistentList.create(Arrays.asList(((IObj)((Object)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))))).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))));
        const__179 = RT.keyword(null, "inline");
        const__180 = 191;
        const__181 = RT.var("primitive-math", "short");
        const__182 = PersistentList.create(Arrays.asList(((IObj)((Object)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))))).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))));
        const__183 = 197;
        const__184 = RT.var("primitive-math", "int");
        const__185 = PersistentList.create(Arrays.asList(((IObj)((Object)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))))).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))));
        const__186 = 203;
        const__187 = RT.var("primitive-math", "float");
        const__188 = PersistentList.create(Arrays.asList(((IObj)((Object)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "double")))))).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "double")))));
        const__189 = 209;
        const__190 = RT.var("primitive-math", "long");
        const__191 = PersistentList.create(Arrays.asList(((IObj)((Object)Tuple.create(Symbol.intern(null, "x")))).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))));
        const__192 = 215;
        const__193 = RT.var("primitive-math", "double");
        const__194 = PersistentList.create(Arrays.asList(((IObj)((Object)Tuple.create(Symbol.intern(null, "x")))).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "double")))));
        const__195 = 221;
        const__196 = RT.var("primitive-math", "byte->ubyte");
        const__197 = PersistentList.create(Arrays.asList(((IObj)((Object)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))))).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))));
        const__198 = 227;
        const__199 = RT.var("primitive-math", "ubyte->byte");
    }

    public static void __init2() {
        const__200 = PersistentList.create(Arrays.asList(((IObj)((Object)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))))).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))));
        const__201 = 233;
        const__202 = RT.var("primitive-math", "short->ushort");
        const__203 = PersistentList.create(Arrays.asList(((IObj)((Object)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))))).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))));
        const__204 = 239;
        const__205 = RT.var("primitive-math", "ushort->short");
        const__206 = PersistentList.create(Arrays.asList(((IObj)((Object)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))))).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))));
        const__207 = 245;
        const__208 = RT.var("primitive-math", "int->uint");
        const__209 = PersistentList.create(Arrays.asList(((IObj)((Object)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))))).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))));
        const__210 = 251;
        const__211 = RT.var("primitive-math", "uint->int");
        const__212 = PersistentList.create(Arrays.asList(((IObj)((Object)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))))).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))));
        const__213 = 257;
        const__214 = RT.var("primitive-math", "long->ulong");
        const__217 = (AFn)((Object)RT.map(RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))))), RT.keyword(null, "doc"), "Converts a long to an unsigned long.", RT.keyword(null, "line"), 263, RT.keyword(null, "column"), 1, RT.keyword(null, "file"), "primitive_math.clj"));
        const__218 = RT.var("primitive-math", "ulong->long");
        const__219 = RT.keyword(null, "tag");
        const__220 = PersistentList.create(Arrays.asList(((IObj)((Object)Tuple.create(Symbol.intern(null, "x")))).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))));
        const__221 = 269;
        const__222 = RT.var("primitive-math", "float->int");
        const__223 = PersistentList.create(Arrays.asList(((IObj)((Object)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "double")))))).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))));
        const__224 = 274;
        const__225 = RT.var("primitive-math", "int->float");
        const__226 = PersistentList.create(Arrays.asList(((IObj)((Object)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))))).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "double")))));
        const__227 = 280;
        const__228 = RT.var("primitive-math", "double->long");
        const__229 = PersistentList.create(Arrays.asList(((IObj)((Object)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "double")))))).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))));
        const__230 = 286;
        const__231 = RT.var("primitive-math", "long->double");
        const__232 = PersistentList.create(Arrays.asList(((IObj)((Object)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))))).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "double")))));
        const__233 = 292;
        const__234 = RT.var("primitive-math", "reverse-short");
        const__235 = PersistentList.create(Arrays.asList(((IObj)((Object)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))))).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))));
        const__236 = 298;
        const__237 = RT.var("primitive-math", "reverse-int");
        const__238 = PersistentList.create(Arrays.asList(((IObj)((Object)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))))).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))));
        const__239 = 304;
        const__240 = RT.var("primitive-math", "reverse-long");
        const__241 = PersistentList.create(Arrays.asList(((IObj)((Object)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))))).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "long")))));
        const__242 = 310;
        const__243 = RT.var("primitive-math", "reverse-float");
        const__244 = PersistentList.create(Arrays.asList(((IObj)((Object)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "double")))))).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "double")))));
        const__245 = 316;
        const__246 = RT.var("primitive-math", "reverse-double");
        const__247 = PersistentList.create(Arrays.asList(((IObj)((Object)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "double")))))).withMeta(RT.map(RT.keyword(null, "tag"), Symbol.intern(null, "double")))));
        const__248 = 322;
    }

    static {
        primitive_math__init.__init0();
        primitive_math__init.__init1();
        primitive_math__init.__init2();
        Compiler.pushNSandLoader(RT.classForName("primitive_math__init").getClassLoader());
        try {
            primitive_math__init.load();
        }
        catch (Throwable throwable2) {
            Var.popThreadBindings();
            throw throwable2;
        }
        Var.popThreadBindings();
    }
}

